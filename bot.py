import os
import asyncio
import sqlite3
from contextlib import closing
from datetime import datetime

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229"))
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://telegram-bot-b6pn.onrender.com")
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = os.environ.get("DB_PATH", "files.db")

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==========
class UploadStates(StatesGroup):
    waiting_object_id = State()
    uploading_steps = State()

class AddPhotoStates(StatesGroup):
    waiting_object_id = State()
    uploading_files = State()

class DownloadStates(StatesGroup):
    waiting_object_id = State()

class InfoStates(StatesGroup):
    waiting_object_id = State()

# ========== –ü–ê–ú–Ø–¢–¨ –°–ï–°–°–ò–ò (–ù–ï-–ü–û–°–¢–û–Ø–ù–ù–ê–Ø) ==========
objects_data = {}

# ========== –ë–î ==========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""
            CREATE TABLE IF NOT EXISTS objects (
                object_id TEXT PRIMARY KEY,
                created_at TEXT NOT NULL
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_id TEXT NOT NULL,
                step TEXT NOT NULL,
                kind TEXT NOT NULL CHECK (kind IN ('photo','video','document')),
                file_id TEXT NOT NULL,
                created_at TEXT NOT NULL,
                FOREIGN KEY (object_id) REFERENCES objects(object_id) ON DELETE CASCADE
            )
        """)
        conn.commit()

def ensure_object(conn, object_id: str):
    conn.execute(
        "INSERT OR IGNORE INTO objects(object_id, created_at) VALUES (?, ?)",
        (object_id, datetime.now().isoformat())
    )

def save_files_to_db(object_id: str, step_name: str, files: list[dict]):
    if not files:
        return
    with closing(sqlite3.connect(DB_PATH)) as conn:
        ensure_object(conn, object_id)
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, created_at) VALUES (?,?,?,?,?)",
            [
                (object_id, step_name, f["type"], f["file_id"], datetime.now().isoformat())
                for f in files
            ]
        )
        conn.commit()

def read_files_from_db(object_id: str):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute(
            "SELECT step, kind, file_id FROM files WHERE object_id = ? ORDER BY id ASC",
            (object_id,)
        )
        rows = cur.fetchall()
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —à–∞–≥–∞–º
    by_step = {}
    for step, kind, file_id in rows:
        by_step.setdefault(step, []).append({"type": kind, "file_id": file_id})
    return by_step

def has_object_in_db(object_id: str) -> bool:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT 1 FROM objects WHERE object_id = ? LIMIT 1", (object_id,))
        return cur.fetchone() is not None

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/start"), KeyboardButton(text="/photo")],
            [KeyboardButton(text="/addphoto"), KeyboardButton(text="/download")],
            [KeyboardButton(text="/result"), KeyboardButton(text="/info")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )
    return keyboard

def get_upload_keyboard(step_name, has_files=False):
    buttons = []
    if has_files:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
        ])
    else:
        if step_name in MANDATORY_STEPS:
            buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")])
        else:
            buttons.append([
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
            ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_addphoto_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
    ]])

# ========== –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ (–∏–∑ –ë–î)\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ (—Å–µ—Å—Å–∏—è)\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ objects.xlsx"
    )
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("photo"))
async def cmd_photo(message: Message, state: FSMContext):
    await state.set_state(UploadStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=get_main_keyboard())

@router.message(Command("addphoto"))
async def cmd_addphoto(message: Message, state: FSMContext):
    await state.set_state(AddPhotoStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=get_main_keyboard())

@router.message(Command("download"))
async def cmd_download(message: Message, state: FSMContext):
    await state.set_state(DownloadStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=get_main_keyboard())

@router.message(Command("result"))
async def cmd_result(message: Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.", reply_markup=get_main_keyboard())
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è):\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s['files']) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("info"))
async def cmd_info(message: Message, state: FSMContext):
    await state.set_state(InfoStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–ú–ï–†–ê –û–ë–™–ï–ö–¢–ê ==========
@router.message(UploadStates.waiting_object_id)
async def process_upload_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
    await state.update_data(object_id=object_id, steps=steps, step_index=0, last_message_id=None)
    await state.set_state(UploadStates.uploading_steps)
    await send_upload_step(message, state)

@router.message(AddPhotoStates.waiting_object_id)
async def process_addphoto_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    await state.update_data(object_id=object_id, files=[], last_message_id=None)
    await state.set_state(AddPhotoStates.uploading_files)
    msg = await message.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=get_addphoto_keyboard()
    )
    await state.update_data(last_message_id=msg.message_id)

@router.message(DownloadStates.waiting_object_id)
async def process_download_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    await message.answer(f"üîç –ò—â—É —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –≤ –ë–î...")
    try:
        if not has_object_in_db(object_id):
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", reply_markup=get_main_keyboard())
            await state.clear()
            return

        by_step = read_files_from_db(object_id)
        total = sum(len(v) for v in by_step.values())
        if total == 0:
            await message.answer(f"‚ùå –î–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=get_main_keyboard())
            await state.clear()
            return

        await message.answer(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}. –û—Ç–ø—Ä–∞–≤–ª—è—é...")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —à–∞–≥–∞–º —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        for step_name, files in by_step.items():
            await message.answer(f"üìÅ {step_name}")

            # 1) —Ñ–æ—Ç–æ+–≤–∏–¥–µ–æ –∞–ª—å–±–æ–º–∞–º–∏ (2-10 —à—Ç—É–∫)
            pv = [f for f in files if f["type"] in ("photo", "video")]
            for i in range(0, len(pv), 10):
                batch = pv[i:i+10]
                media = []
                for f in batch:
                    if f["type"] == "photo":
                        media.append(InputMediaPhoto(media=f["file_id"]))
                    else:
                        media.append(InputMediaVideo(media=f["file_id"]))
                if len(media) == 1:
                    # Telegram –Ω–µ –ª—é–±–∏—Ç –∞–ª—å–±–æ–º –∏–∑ 1 —ç–ª–µ–º–µ–Ω—Ç–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ–¥–∏–Ω–æ—á–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                    if pv[i]["type"] == "photo":
                        await bot.send_photo(chat_id=message.chat.id, photo=pv[i]["file_id"])
                    else:
                        await bot.send_video(chat_id=message.chat.id, video=pv[i]["file_id"])
                else:
                    await bot.send_media_group(chat_id=message.chat.id, media=media)

            # 2) –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É (–∏–ª–∏ –ø–∞—á–∫–∞–º–∏ –ø–æ 10 –æ–¥–∏–Ω–æ—á–Ω—ã–º–∏)
            docs = [f for f in files if f["type"] == "document"]
            for d in docs:
                await bot.send_document(chat_id=message.chat.id, document=d["file_id"])

        await message.answer(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())

    except Exception as e:
        print(f"[process_download_object_id] –û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ñ–∞–π–ª–æ–≤: {e}", reply_markup=get_main_keyboard())

    await state.clear()

@router.message(InfoStates.waiting_object_id)
async def process_info_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    try:
        workbook = openpyxl.load_workbook("objects.xlsx")
        sheet = workbook.active
        found = False
        info_text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ {object_id}:\n\n"
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == object_id:
                found = True
                info_text += f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {row[1] if len(row) > 1 else '–ù/–î'}\n"
                info_text += f"üìç –û–±—ä–µ–∫—Ç: {row[2] if len(row) > 2 else '–ù/–î'}\n"
                info_text += f"üó∫ –ê–¥—Ä–µ—Å: {row[3] if len(row) > 3 else '–ù/–î'}\n"
                break
        if found:
            await message.answer(info_text, reply_markup=get_main_keyboard())
        else:
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx", reply_markup=get_main_keyboard())
    except FileNotFoundError:
        await message.answer("‚ùå –§–∞–π–ª objects.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_main_keyboard())
    await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@router.message(UploadStates.uploading_steps, F.photo | F.video | F.document)
async def handle_upload_files(message: Message, state: FSMContext):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if file_info:
        current_step["files"].append(file_info)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_upload_keyboard(current_step["name"], has_files=True))
    await state.update_data(steps=steps, last_message_id=msg.message_id)

@router.message(AddPhotoStates.uploading_files, F.photo | F.video | F.document)
async def handle_addphoto_files(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data["files"]

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if file_info:
        files.append(file_info)
        await state.update_data(files=files)

# ========== CALLBACKS ==========
@router.callback_query(F.data == "upload_ok")
async def callback_upload_ok(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    await advance_step(callback.message, state)

@router.callback_query(F.data == "upload_next")
async def callback_upload_next(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await advance_step(callback.message, state, skip=True)

@router.callback_query(F.data == "upload_cancel")
async def callback_upload_cancel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data.get("object_id", "")
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "addphoto_done")
async def callback_addphoto_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data["object_id"]
    files = data["files"]

    if not files:
        await callback.answer("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_files_to_db(object_id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", files)

    # –ü–∏—à–µ–º –≤ –∞—Ä—Ö–∏–≤ (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è)
    await post_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": files}])

    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({len(files)} —à—Ç.).",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def send_upload_step(message: Message, state: FSMContext):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]

    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass

    msg = await message.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {current_step['name']}",
        reply_markup=get_upload_keyboard(current_step["name"], has_files=False)
    )
    await state.update_data(last_message_id=msg.message_id)

async def advance_step(message: Message, state: FSMContext, skip=False):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    object_id = data["object_id"]

    # –ï—Å–ª–∏ –ù–ï –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞
    current = steps[step_index]
    if not skip and current["files"]:
        save_files_to_db(object_id, current["name"], current["files"])

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
    step_index += 1
    if step_index >= len(steps):
        # –§–∏–Ω–∞–ª: –ø–æ—Å—Ç–∏–º –≤–µ—Å—å –∫–æ–º–ø–ª–µ–∫—Ç –≤ –∞—Ä—Ö–∏–≤ –∏ –æ—á–∏—â–∞–µ–º
        await post_to_archive(object_id, steps)
        objects_data[object_id] = {"steps": steps}  # –¥–ª—è /result (—Å–µ—Å—Å–∏—è)
        total_files = sum(len(s["files"]) for s in steps)

        try:
            await message.delete()
        except:
            pass
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    else:
        await state.update_data(step_index=step_index)
        await send_upload_step(message, state)

async def post_to_archive(object_id: str, steps: list):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ —Ñ–∞–π–ª—ã –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —á–∞—Ç.
       (–ù–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —ç—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç ‚Äî –æ–Ω–æ –∏–¥—ë—Ç –∏–∑ –ë–î.)"""
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ARCHIVE_CHAT_ID, info_text)

        for step in steps:
            files = step["files"]
            if not files:
                continue
            await bot.send_message(ARCHIVE_CHAT_ID, f"üìÅ {step['name']}")

            # –§–æ—Ç–æ+–≤–∏–¥–µ–æ ‚Äî –∞–ª—å–±–æ–º–∞–º–∏
            pv = [f for f in files if f["type"] in ("photo", "video")]
            for i in range(0, len(pv), 10):
                batch = pv[i:i+10]
                media = []
                for f in batch:
                    if f["type"] == "photo":
                        media.append(InputMediaPhoto(media=f["file_id"]))
                    else:
                        media.append(InputMediaVideo(media=f["file_id"]))
                if len(media) == 1:
                    if pv[i]["type"] == "photo":
                        await bot.send_photo(ARCHIVE_CHAT_ID, pv[i]["file_id"])
                    else:
                        await bot.send_video(ARCHIVE_CHAT_ID, pv[i]["file_id"])
                else:
                    await bot.send_media_group(ARCHIVE_CHAT_ID, media)

            # –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É
            docs = [f for f in files if f["type"] == "document"]
            for d in docs:
                await bot.send_document(ARCHIVE_CHAT_ID, d["file_id"])

    except Exception as e:
        print(f"[post_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== WEBHOOK ==========
async def on_startup():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    init_db()

    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)

    commands = [
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
    ]
    await bot.set_my_commands(commands)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å webhook:", webhook_url)

async def on_shutdown():
    await bot.session.close()

async def handle_webhook(request):
    update = await request.json()
    from aiogram.types import Update
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return web.Response(text="OK")

async def health_check(request):
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

# ========== –ó–ê–ü–£–°–ö ==========
def main():
    dp.include_router(router)
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health_check)
    app.on_startup.append(lambda app: asyncio.create_task(on_startup()))
    app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown()))
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
