# bot.py
import os
import asyncio
from datetime import datetime
from typing import Tuple, Dict, Any, List

import pandas as pd  # –î–ª—è /info (–µ—Å–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å)
from aiohttp import web

from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, Message, CallbackQuery
)
from aiogram.filters import Command

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN env var is required")

ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
# –ü–æ–ª–Ω—ã–π URL, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É Telegram –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
# –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞ Render –∫–∞–∫: https://<your-service>.onrender.com/<TOKEN>
WEBHOOK_URL = os.environ.get("WEBHOOK_URL")  # –ø—Ä–∏–º–µ—Ä: https://.../<TOKEN>

# –ü–æ—Ä—Ç (Render –æ–±—ã—á–Ω–æ –∑–∞–¥–∞—ë—Ç PORT env var)
PORT = int(os.environ.get("PORT", 10000))
WEBAPP_HOST = "0.0.0.0"

bot = Bot(token=TOKEN, parse_mode="HTML")
dp = Dispatcher()

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
# –∫–ª—é—á: (chat_id, thread_id, user_id)
user_state: Dict[Tuple[int, int, int], Dict[str, Any]] = {}
objects_data: Dict[str, Dict[str, Any]] = {}  # –æ–±—ä–µ–∫—Ç -> –¥–∞–Ω–Ω—ã–µ (–≤ –ø–∞–º—è—Ç–∏)

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def make_main_reply_keyboard() -> ReplyKeyboardMarkup:
    kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
    kb.add(KeyboardButton("/start"), KeyboardButton("/photo"))
    kb.add(KeyboardButton("/addphoto"), KeyboardButton("/download"))
    kb.add(KeyboardButton("/result"), KeyboardButton("/info"))
    return kb

MAIN_KB = make_main_reply_keyboard()

def upload_inline_keyboard(step_name: str) -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(row_width=3)
    # –∫–Ω–æ–ø–∫–∏: –ó–∞–≤–µ—Ä—à–∏—Ç—å / (–≤–æ–∑–º–æ–∂–Ω–æ) –°–ª–µ–¥. / –û—Ç–º–µ–Ω–∞
    buttons = [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok")]
    if step_name not in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    kb.add(*buttons)
    return kb

def addphoto_markup() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
           InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    return kb

# ========== –•–ï–õ–ü–ï–†–´ ==========
def make_key(chat_id: int, thread_id: int, user_id: int) -> Tuple[int, int, int]:
    return (chat_id, thread_id or 0, user_id)

async def send_message(chat_id: int, text: str, thread_id: int = None,
                       reply_markup=None, **kwargs) -> types.Message:
    """–í–µ–∑–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å MAIN_KB –∫–∞–∫ –Ω–∏–∂–Ω–µ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–ª–∏ None)."""
    try:
        rm = reply_markup if reply_markup is not None else MAIN_KB
        # message_thread_id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Ç–µ–º–∞—Ö (forum)
        params = {"chat_id": chat_id, "text": text, "reply_markup": rm}
        if thread_id:
            params["message_thread_id"] = thread_id
        params.update(kwargs)
        msg = await bot.send_message(**params)
        return msg
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

async def delete_message(chat_id: int, msg_id: int):
    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
    user_state.pop(key, None)
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–ù–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /photo, /addphoto –∏ —Ç.–¥."
    )
    await send_message(message.chat.id, text, thread_id=message.message_thread_id)

@dp.message(Command(commands=["photo"]))
async def cmd_photo(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", thread_id=message.message_thread_id)

@dp.message(Command(commands=["addphoto"]))
async def cmd_addphoto(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_addphoto_object"}
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –∏ –∫–Ω–æ–ø–∫–∏ –ó–∞–≤–µ—Ä—à–∏—Ç—å/–û—Ç–º–µ–Ω–∞
    await send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:",
        thread_id=message.message_thread_id
    )

@dp.message(Command(commands=["download"]))
async def cmd_download(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    if not objects_data:
        await send_message(message.chat.id, "üìÇ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.", thread_id=message.message_thread_id)
        return
    # —Å—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è id –æ–±—ä–µ–∫—Ç–∞
    user_state[key] = {"command": "await_download_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)

@dp.message(Command(commands=["result"]))
async def cmd_result(message: Message):
    if not objects_data:
        await send_message(message.chat.id, "üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", thread_id=message.message_thread_id)
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await send_message(message.chat.id, text, thread_id=message.message_thread_id)

@dp.message(Command(commands=["info"]))
async def cmd_info(message: Message):
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∑–∞—Ç–µ–º –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –≤ objects.xlsx
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª objects.xlsx –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
    """
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_info_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", thread_id=message.message_thread_id)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@dp.message()  # –ª–æ–≤–∏–º –ª—é–±—ã–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_text(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        # –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∂–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞
        return

    cmd = state.get("command")

    # –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    if cmd == "await_object":
        object_id = message.text.strip()
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {
            "command": "upload_steps",
            "object_id": object_id,
            "steps": steps,
            "step_index": 0,
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id or 0
        }
        await send_upload_step(key)

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É
    elif cmd == "await_addphoto_object":
        object_id = message.text.strip()
        user_state[key] = {
            "command": "add_photos",
            "object_id": object_id,
            "files": [],
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id or 0
        }
        # –ø—Ä–∏—Å—ã–ª–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é + inline –∫–Ω–æ–ø–∫–∏
        await send_message(
            message.chat.id,
            f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}.",
            thread_id=message.message_thread_id,
            reply_markup=addphoto_markup()
        )

    elif cmd == "await_download_object":
        object_id = message.text.strip()
        if object_id not in objects_data:
            await send_message(message.chat.id, f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.", thread_id=message.message_thread_id)
            user_state.pop(key, None)
            return
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
        data = objects_data[object_id]
        await send_object_files(message.chat.id, object_id, data, thread_id=message.message_thread_id)
        user_state.pop(key, None)

    elif cmd == "await_info_object":
        object_id = message.text.strip()
        await handle_info_request(message.chat_id, object_id, thread_id=message.message_thread_id)
        user_state.pop(key, None)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@dp.message(content_types=["photo", "document", "video"])
async def handle_files(message: Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    cmd = state.get("command")

    def extract_file_info(msg: Message) -> Dict[str, str]:
        if msg.photo:
            return {"type": "photo", "file_id": msg.photo[-1].file_id}
        if msg.document:
            return {"type": "document", "file_id": msg.document.file_id}
        if msg.video:
            return {"type": "video", "file_id": msg.video.file_id}
        return {}

    if cmd == "upload_steps":
        step = state["steps"][state["step_index"]]
        f = extract_file_info(message)
        if f:
            step["files"].append(f)
        # –£–¥–∞–ª–∏–º —Å—Ç–∞—Ä–æ–µ "–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ" —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å
        if "last_message_id" in state:
            try:
                await delete_message(state["chat_id"], state["last_message_id"])
            except Exception:
                pass
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é + inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —à–∞–≥–∞
        step_name = step["name"]
        text = f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step_name}"
        msg = await send_message(state["chat_id"], text,
                                 reply_markup=upload_inline_keyboard(step_name),
                                 thread_id=state["thread_id"])
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
        state["last_message_id"] = msg.message_id

    elif cmd == "add_photos":
        f = extract_file_info(message)
        if f:
            state["files"].append(f)
        # –ø—Ä–æ—Å—Ç–æ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–º—ë—Ç ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–≥–¥–∞ –≥–æ—Ç–æ–≤

# ========== CALLBACKS ==========
@dp.callback_query(lambda c: c.data and (c.data.startswith("upload_") or c.data.startswith("addphoto_")))
async def handle_callback(call: CallbackQuery):
    # thread id –ø—Ä–æ–Ω–∏—Ü–∞—Ç–µ–ª–µ–Ω —á–µ—Ä–µ–∑ call.message.message_thread_id
    thread_id = getattr(call.message, "message_thread_id", 0) or 0
    key = make_key(call.message.chat.id, thread_id, call.from_user.id)
    state = user_state.get(key)
    if not state:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)
        return

    if call.data == "upload_ok":
        await advance_step(key)
        await call.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif call.data == "upload_next":
        await advance_step(key, skip=True)
        await call.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    elif call.data == "upload_cancel":
        obj = state.get("object_id", "")
        user_state.pop(key, None)
        # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        try:
            await delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        await send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    elif call.data == "addphoto_done":
        object_id = state.get("object_id")
        files = state.get("files", [])
        if object_id not in objects_data:
            objects_data[object_id] = {"steps": []}
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–∞–≥
        save_steps = [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": files}]
        await save_to_archive(object_id, save_steps, append=True)
        # merge into memory
        if "steps" not in objects_data[object_id]:
            objects_data[object_id]["steps"] = []
        objects_data[object_id]["steps"].extend(save_steps)
        user_state.pop(key, None)
        try:
            await delete_message(call.message.chat.id, call.message.message_id)
        except Exception:
            pass
        await send_message(call.message.chat.id, f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await call.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==========
async def send_upload_step(key: Tuple[int, int, int]):
    state = user_state[key]
    step = state["steps"][state["step_index"]]
    if "last_message_id" in state:
        try:
            await delete_message(state["chat_id"], state["last_message_id"])
        except Exception:
            pass
    text = f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step['name']}"
    msg = await send_message(state["chat_id"], text,
                             reply_markup=upload_inline_keyboard(step["name"]),
                             thread_id=state["thread_id"])
    state["last_message_id"] = msg.message_id

async def advance_step(key: Tuple[int, int, int], skip: bool = False):
    state = user_state.get(key)
    if not state:
        return
    state["step_index"] += 1
    if state["step_index"] >= len(state["steps"]):
        object_id = state["object_id"]
        all_steps = state["steps"]
        await save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        await send_message(state["chat_id"], f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}")
    else:
        await send_upload_step(key)

# ========== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ê–†–•–ò–í ==========
async def save_to_archive(object_id: str, steps: List[Dict[str, Any]], append: bool = False):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ ARCHIVE_CHAT_ID –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ media_group'—ã.
    –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Telegram: media_group –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω–æ –≤ –≤–∞—à–µ–º —Å—Ç–∞—Ä–æ–º –∫–æ–¥–µ –±—ã–ª–æ 50 ‚Äî —Ç—É—Ç —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ –ø–æ 10.
    """
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ARCHIVE_CHAT_ID, info_text)
        for s in steps:
            files = s.get("files", [])
            if not files:
                continue
            # –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ —á–∞–Ω–∫–∞–º –ø–æ 10
            idx = 0
            while idx < len(files):
                chunk = files[idx: idx + 10]  # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 10
                media = []
                for f in chunk:
                    if f["type"] == "photo":
                        media.append(InputMediaPhoto(media=f["file_id"]))
                    elif f["type"] == "video":
                        media.append(InputMediaVideo(media=f["file_id"]))
                    elif f["type"] == "document":
                        media.append(InputMediaDocument(media=f["file_id"]))
                if media:
                    await bot.send_media_group(ARCHIVE_CHAT_ID, media)
                idx += 10
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í –ü–û –û–ë–™–ï–ö–¢–£ (DOWNLOAD) ==========
async def send_object_files(chat_id: int, object_id: str, data: Dict[str, Any], thread_id: int = None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞:
     - –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ >1 => send_media_group (–ø–∞–∫–µ—Ç–Ω–æ –ø–æ 10)
     - –µ—Å–ª–∏ 1 => send_* –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    """
    steps = data.get("steps", [])
    if not steps:
        await send_message(chat_id, f"‚ùå –î–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤.", thread_id=thread_id)
        return
    await send_message(chat_id, f"üìÅ –§–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}:", thread_id=thread_id)
    for s in steps:
        files = s.get("files", [])
        if not files:
            continue
        # –µ—Å–ª–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if len(files) == 1:
            f = files[0]
            try:
                if f["type"] == "photo":
                    await bot.send_photo(chat_id, f["file_id"], caption=s.get("name", ""), message_thread_id=thread_id)
                elif f["type"] == "video":
                    await bot.send_video(chat_id, f["file_id"], caption=s.get("name", ""), message_thread_id=thread_id)
                elif f["type"] == "document":
                    await bot.send_document(chat_id, f["file_id"], caption=s.get("name", ""), message_thread_id=thread_id)
            except Exception as e:
                print(f"[send_object_files single] –û—à–∏–±–∫–∞: {e}")
        else:
            # –≥—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 10
            idx = 0
            while idx < len(files):
                chunk = files[idx: idx + 10]
                media = []
                for f in chunk:
                    if f["type"] == "photo":
                        media.append(InputMediaPhoto(media=f["file_id"]))
                    elif f["type"] == "video":
                        media.append(InputMediaVideo(media=f["file_id"]))
                    elif f["type"] == "document":
                        media.append(InputMediaDocument(media=f["file_id"]))
                if media:
                    try:
                        await bot.send_media_group(chat_id, media, message_thread_id=thread_id)
                    except Exception as e:
                        print(f"[send_object_files group] –û—à–∏–±–∫–∞: {e}")
                idx += 10

# ========== /info: —á—Ç–µ–Ω–∏–µ objects.xlsx ==========
async def handle_info_request(chat_id: int, object_id: str, thread_id: int = None):
    filename = "objects.xlsx"
    if not os.path.exists(filename):
        await send_message(chat_id, "‚ùå –§–∞–π–ª objects.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.", thread_id=thread_id)
        return
    try:
        df = pd.read_excel(filename, dtype=str)  # —á–∏—Ç–∞–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
        # –¥–æ–ø—É—Å—Ç–∏–º, –≤ —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –∫–æ–ª–æ–Ω–∫–∞ "object_id" –∏–ª–∏ "–ù–æ–º–µ—Ä" ‚Äî –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        possible_cols = [c for c in df.columns if any(x in c.lower() for x in ["object", "–Ω–æ–º–µ—Ä", "id"])]
        if not possible_cols:
            # –ø—Ä–æ—Å—Ç–æ –∏—â–µ–º –ª—é–±–æ–π –≤—Ö–æ–∂–¥. object_id –ø–æ –≤—Å–µ–º —è—á–µ–π–∫–∞–º
            matched = df[df.apply(lambda row: row.astype(str).str.contains(object_id, case=False, na=False).any(), axis=1)]
        else:
            # –∏—â–µ–º –ø–æ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–æ–ª–æ–Ω–∫–∞–º
            mask = False
            for col in possible_cols:
                mask = mask | df[col].astype(str).str.strip().eq(object_id)
            matched = df[mask]
        if matched.empty:
            await send_message(chat_id, f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ objects.xlsx.", thread_id=thread_id)
            return
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É(–∏)
        texts = []
        for _, row in matched.iterrows():
            parts = [f"{col}: {str(row[col])}" for col in df.columns if pd.notna(row[col])]
            texts.append("\n".join(parts))
        await send_message(chat_id, "‚ÑπÔ∏è –ù–∞–π–¥–µ–Ω–æ:\n\n" + "\n\n---\n\n".join(texts), thread_id=thread_id)
    except Exception as e:
        print(f"[handle_info_request] –û—à–∏–±–∫–∞: {e}")
        await send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ objects.xlsx", thread_id=thread_id)

# ========== WEBHOOK (aiohttp) ==========
async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω WEBHOOK_URL
    if WEBHOOK_URL:
        try:
            await bot.delete_webhook(drop_pending_updates=True)
            await bot.set_webhook(WEBHOOK_URL)
            print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        except Exception as e:
            print(f"[on_startup] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook: {e}")
    else:
        print("WEBHOOK_URL –Ω–µ –∑–∞–¥–∞–Ω. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEBHOOK_URL –¥–ª—è webhook —Ä–µ–∂–∏–º–∞.")

async def handle_webhook(request: web.Request):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ POST –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç Telegram (webhook)."""
    try:
        data = await request.json()
    except Exception:
        return web.Response(text="no json", status=400)
    update = types.Update(**data)
    await dp.feed_update(update)
    return web.Response(text="OK")

async def index(request: web.Request):
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", status=200)

def run():
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)  # Telegram –±—É–¥–µ—Ç –ø–æ—Å—Ç–∏—Ç—å —Å—é–¥–∞
    app.router.add_get("/", index)
    # –ó–∞–ø—É—Å–∫ on_startup
    loop = asyncio.get_event_loop()
    loop.create_task(on_startup())
    web.run_app(app, host=WEBAPP_HOST, port=PORT)

if __name__ == "__main__":
    print("üöÄ Bot (aiogram 3.x) starting...")
    run()
