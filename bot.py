import os
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto,
    InputMediaVideo, InputMediaDocument
)
from aiohttp import web
import pandas as pd

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
BOT_URL = os.environ.get("BOT_URL", f"https://telegram-bot-b6pn.onrender.com/{TOKEN}")

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï ==========
user_state = {}
objects_data = {}
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]
MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

EXCEL_FILE = "https://github.com/Abu-al-Fugas/telegram-bot/blob/main/objects.xlsx"

# ========== FSM ==========
class UploadStates(StatesGroup):
    waiting_for_object = State()
    upload_steps = State()
    add_photos = State()
    download_object = State()
    info_object = State()

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def reply_keyboard():
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton("/start"), KeyboardButton("/photo")],
            [KeyboardButton("/addphoto"), KeyboardButton("/download")],
            [KeyboardButton("/result"), KeyboardButton("/info")]
        ],
        resize_keyboard=True
    )
    return kb

def upload_keyboard(step_name):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok")]
    if step_name not in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    kb.add(*buttons)
    return kb

def add_photo_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
    )
    return kb

# ========== –•–ï–õ–ü–ï–†–´ ==========
def make_key(chat_id, user_id):
    return (chat_id, user_id)

async def send_message(chat_id, text, reply_markup=None):
    try:
        return await bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

async def delete_message(chat_id, msg_id):
    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

def save_to_archive(object_id, steps, append=False):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        bot.send_message(ARCHIVE_CHAT_ID, info_text)
        for s in steps:
            files = s["files"]
            if not files:
                continue
            media = []
            for f in files[:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                bot.send_media_group(ARCHIVE_CHAT_ID, media)
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ"
    )
    await state.clear()
    await message.answer(text, reply_markup=reply_keyboard())

@dp.message(Command("photo"))
async def cmd_photo(message: types.Message, state: FSMContext):
    await state.set_state(UploadStates.waiting_for_object)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=reply_keyboard())

@dp.message(Command("addphoto"))
async def cmd_addphoto(message: types.Message, state: FSMContext):
    await state.set_state(UploadStates.add_photos)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=reply_keyboard())

@dp.message(Command("download"))
async def cmd_download(message: types.Message, state: FSMContext):
    await state.set_state(UploadStates.download_object)
    if not objects_data:
        await message.answer("üìÇ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.", reply_markup=reply_keyboard())
        return
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", reply_markup=reply_keyboard())

@dp.message(Command("result"))
async def cmd_result(message: types.Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", reply_markup=reply_keyboard())
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await message.answer(text, reply_markup=reply_keyboard())

@dp.message(Command("info"))
async def cmd_info(message: types.Message, state: FSMContext):
    await state.set_state(UploadStates.info_object)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=reply_keyboard())

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@dp.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    current = await state.get_state()
    key = make_key(message.chat.id, message.from_user.id)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if current == UploadStates.waiting_for_object.state:
        object_id = message.text.strip()
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {"object_id": object_id, "steps": steps, "step_index": 0}
        await state.set_state(UploadStates.upload_steps)
        await send_upload_step(message.chat.id, key)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    elif current == UploadStates.add_photos.state:
        object_id = message.text.strip()
        user_state[key] = {"object_id": object_id, "files": []}
        await message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}", reply_markup=add_photo_keyboard())

    # Download
    elif current == UploadStates.download_object.state:
        object_id = message.text.strip()
        if object_id not in objects_data:
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=reply_keyboard())
            return
        all_steps = objects_data[object_id]["steps"]
        for s in all_steps:
            media = []
            for f in s["files"][:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                await bot.send_media_group(message.chat.id, media)
        await state.clear()

    # Info
    elif current == UploadStates.info_object.state:
        object_id = message.text.strip()
        try:
            df = pd.read_excel(EXCEL_FILE)
            info = df[df['object_id'] == int(object_id)].to_string(index=False)
            await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É {object_id}:\n{info}", reply_markup=reply_keyboard())
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", reply_markup=reply_keyboard())
        await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@dp.message(F.content_type.in_({"photo", "document", "video"}))
async def handle_files(message: types.Message, state: FSMContext):
    key = make_key(message.chat.id, message.from_user.id)
    if key not in user_state:
        return
    state_data = user_state[key]

    current_state = await state.get_state()
    if current_state == UploadStates.upload_steps.state:
        step = state_data["steps"][state_data["step_index"]]
        if message.photo:
            step["files"].append({"type": "photo", "file_id": message.photo[-1].file_id})
        elif message.document:
            step["files"].append({"type": "document", "file_id": message.document.file_id})
        elif message.video:
            step["files"].append({"type": "video", "file_id": message.video.file_id})
        await send_upload_step(message.chat.id, key)

    elif current_state == UploadStates.add_photos.state:
        if message.photo:
            state_data["files"].append({"type": "photo", "file_id": message.photo[-1].file_id})
        elif message.document:
            state_data["files"].append({"type": "document", "file_id": message.document.file_id})
        elif message.video:
            state_data["files"].append({"type": "video", "file_id": message.video.file_id})

# ========== CALLBACK ==========
@dp.callback_query()
async def handle_callback(query: types.CallbackQuery, state: FSMContext):
    key = make_key(query.message.chat.id, query.from_user.id)
    if key not in user_state:
        await query.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return
    data = user_state[key]

    if query.data == "upload_ok":
        await advance_step(query.message.chat.id, key)
        await query.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif query.data == "upload_next":
        await advance_step(query.message.chat.id, key, skip=True)
        await query.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    elif query.data == "upload_cancel":
        obj = data.get("object_id", "")
        user_state.pop(key, None)
        await query.message.delete()
        await query.message.answer(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=reply_keyboard())
        await query.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    elif query.data == "addphoto_done":
        object_id = data["object_id"]
        if object_id not in objects_data:
            objects_data[object_id] = {"steps": []}
        save_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": data["files"]}], append=True)
        user_state.pop(key, None)
        await query.message.delete()
        await query.message.answer(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=reply_keyboard())
        await query.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==========
async def send_upload_step(chat_id, key):
    state_data = user_state[key]
    step = state_data["steps"][state_data["step_index"]]
    text = f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step['name']}"
    kb = upload_keyboard(step["name"])
    await bot.send_message(chat_id, text, reply_markup=kb)

async def advance_step(chat_id, key, skip=False):
    state_data = user_state[key]
    state_data["step_index"] += 1
    if state_data["step_index"] >= len(state_data["steps"]):
        object_id = state_data["object_id"]
        all_steps = state_data["steps"]
        save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        await bot.send_message(chat_id, f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}", reply_markup=reply_keyboard())
    else:
        await send_upload_step(chat_id, key)

# ========== WEBHOOK ==========
async def handle_webhook(request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

app = web.Application()
app.router.add_post(f"/{TOKEN}", handle_webhook)
app.router.add_get("/", lambda r: web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"))

if __name__ == "__main__":
    import asyncio
    from aiohttp import web
    # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    async def on_startup(app):
        await bot.delete_webhook(drop_pending_updates=True)
        await bot.set_webhook(BOT_URL)

    app.on_startup.append(on_startup)
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
