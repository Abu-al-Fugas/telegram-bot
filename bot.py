import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    CallbackQueryHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BASE_DIR = "data"

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
os.makedirs(BASE_DIR, exist_ok=True)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∫–∞–∂–¥—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
user_object_selection = {}


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:",
        reply_markup=get_object_keyboard()
    )


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ —Å –Ω–æ–º–µ—Ä–∞–º–∏ –æ–±—ä–µ–∫—Ç–æ–≤
def get_object_keyboard():
    buttons = []
    for i in range(1, 21):  # –ø–æ–∫–∞ 20 –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å
        buttons.append(
            InlineKeyboardButton(f"–û–±—ä–µ–∫—Ç {i}", callback_data=f"object_{i}")
        )

    # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 4
    keyboard = [buttons[i:i+4] for i in range(0, len(buttons), 4)]
    return InlineKeyboardMarkup(keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
async def object_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    object_id = query.data.split("_")[1]
    user_object_selection[query.from_user.id] = object_id

    # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫–∏ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
    object_dir = os.path.join(BASE_DIR, f"object_{object_id}")
    os.makedirs(os.path.join(object_dir, "photos"), exist_ok=True)
    os.makedirs(os.path.join(object_dir, "videos"), exist_ok=True)
    os.makedirs(os.path.join(object_dir, "docs"), exist_ok=True)

    await query.message.reply_text(
        f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–±—ä–µ–∫—Ç {object_id}.\n"
        f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö."
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ (—Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã)
async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    object_id = user_object_selection.get(user_id)

    if not object_id:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –∫–æ–º–∞–Ω–¥–æ–π /start.")
        return

    object_dir = os.path.join(BASE_DIR, f"object_{object_id}")

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file = None
    file_type = None

    if update.message.photo:
        file = await update.message.photo[-1].get_file()
        file_type = "photos"
    elif update.message.video:
        file = await update.message.video.get_file()
        file_type = "videos"
    elif update.message.document:
        file = await update.message.document.get_file()
        file_type = "docs"

    if not file:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞ üòï")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    folder = os.path.join(object_dir, file_type)
    os.makedirs(folder, exist_ok=True)
    filename = os.path.join(folder, f"{file.file_unique_id}.dat")
    await file.download_to_drive(filename)

    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.delete()

    await context.bot.send_message(
        chat_id=update.message.chat_id,
        text=f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –æ–±—ä–µ–∫—Ç {object_id} ({file_type})"
    )


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É
async def show_object(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /show 15 (–Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞)")
        return

    object_id = args[0]
    object_dir = os.path.join(BASE_DIR, f"object_{object_id}")

    if not os.path.exists(object_dir):
        await update.message.reply_text(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    await update.message.reply_text(f"üìÇ –û–±—ä–µ–∫—Ç {object_id}\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")

    # –§–æ—Ç–æ
    photos_dir = os.path.join(object_dir, "photos")
    photos = os.listdir(photos_dir)
    if photos:
        await update.message.reply_text("üì∏ –§–æ—Ç–æ:")
        for p in photos:
            await update.message.reply_photo(photo=open(os.path.join(photos_dir, p), "rb"))

    # –í–∏–¥–µ–æ
    videos_dir = os.path.join(object_dir, "videos")
    videos = os.listdir(videos_dir)
    if videos:
        await update.message.reply_text("üé• –í–∏–¥–µ–æ:")
        for v in videos:
            await update.message.reply_video(video=open(os.path.join(videos_dir, v), "rb"))

    # –î–æ–∫—É–º–µ–Ω—Ç—ã
    docs_dir = os.path.join(object_dir, "docs")
    docs = os.listdir(docs_dir)
    if docs:
        await update.message.reply_text("üìë –î–æ–∫—É–º–µ–Ω—Ç—ã:")
        for d in docs:
            await update.message.reply_document(document=open(os.path.join(docs_dir, d), "rb"))


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("show", show_object))
    app.add_handler(CallbackQueryHandler(object_selected))
    app.add_handler(MessageHandler(
        filters.PHOTO | filters.VIDEO | filters.Document.ALL,
        handle_file
    ))

    app.run_polling()


if __name__ == "__main__":
    main()
