import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument
)
from aiogram.dispatcher.fsm.storage.memory import MemoryStorage
from aiohttp import web
import pandas as pd

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
WEBHOOK_PATH = f"/{TOKEN}"
WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com{WEBHOOK_PATH}"
PORT = int(os.environ.get("PORT", 10000))

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
user_state = {}
objects_data = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

OBJECTS_XLSX_URL = "https://github.com/Abu-al-Fugas/telegram-bot/blob/main/objects.xlsx?raw=true"

# ========== –•–ï–õ–ü–ï–†–´ ==========
def make_key(chat_id, thread_id, user_id):
    return (chat_id, thread_id, user_id)

def upload_keyboard(step_name):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = []
    if step_name not in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    buttons.append(InlineKeyboardButton("‚úÖ OK", callback_data="upload_ok"))
    kb.add(*buttons)
    return kb

def send_reply_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(
        KeyboardButton("/start"),
        KeyboardButton("/photo"),
        KeyboardButton("/addphoto")
    )
    kb.add(
        KeyboardButton("/download"),
        KeyboardButton("/result"),
        KeyboardButton("/info")
    )
    return kb

async def send_message(chat_id, text, reply_markup=None, thread_id=None):
    try:
        return await bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

async def delete_message(chat_id, msg_id):
    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ objects.xlsx"
    )
    await message.answer(text, reply_markup=send_reply_keyboard())

@dp.message(Command("photo"))
async def cmd_photo(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_object"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", reply_markup=send_reply_keyboard())

@dp.message(Command("addphoto"))
async def cmd_addphoto(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_addphoto_object"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", reply_markup=send_reply_keyboard())

@dp.message(Command("download"))
async def cmd_download(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_download_object"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=send_reply_keyboard())

@dp.message(Command("result"))
async def cmd_result(message: types.Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", reply_markup=send_reply_keyboard())
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await message.answer(text, reply_markup=send_reply_keyboard())

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    user_state[key] = {"command": "await_info_object"}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=send_reply_keyboard())

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@dp.message()
async def handle_text(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    text = message.text.strip()

    if state["command"] == "await_object":
        object_id = text
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {
            "command": "upload_steps",
            "object_id": object_id,
            "steps": steps,
            "step_index": 0,
            "chat_id": message.chat.id
        }
        await send_upload_step(key)

    elif state["command"] == "await_addphoto_object":
        object_id = text
        user_state[key] = {
            "command": "add_photos",
            "object_id": object_id,
            "files": [],
            "chat_id": message.chat.id
        }
        await message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
                             reply_markup=InlineKeyboardMarkup().add(
                                 InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
                                 InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
                             ))

    elif state["command"] == "await_download_object":
        object_id = text
        if object_id not in objects_data:
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=send_reply_keyboard())
        else:
            steps = objects_data[object_id]["steps"]
            for s in steps:
                media = []
                for f in s["files"][:10]:
                    if f["type"] == "photo":
                        media.append(InputMediaPhoto(f["file_id"]))
                    elif f["type"] == "video":
                        media.append(InputMediaVideo(f["file_id"]))
                    elif f["type"] == "document":
                        media.append(InputMediaDocument(f["file_id"]))
                if media:
                    await bot.send_media_group(message.chat.id, media)
            await message.answer(f"‚úÖ –§–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", reply_markup=send_reply_keyboard())
        user_state.pop(key, None)

    elif state["command"] == "await_info_object":
        try:
            df = pd.read_excel(OBJECTS_XLSX_URL)
            row = df[df['object_id'] == text]
            if row.empty:
                await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {text} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=send_reply_keyboard())
            else:
                info = row.to_string(index=False)
                await message.answer(f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É:\n{info}", reply_markup=send_reply_keyboard())
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}", reply_markup=send_reply_keyboard())
        user_state.pop(key, None)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@dp.message(lambda message: message.photo or message.document or message.video)
async def handle_files(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id or 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if state["command"] == "upload_steps":
        step = state["steps"][state["step_index"]]
        step["files"].append(file_info)
        msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=upload_keyboard(step["name"]))
        state["last_message_id"] = msg.message_id

    elif state["command"] == "add_photos":
        state["files"].append(file_info)

# ========== CALLBACKS ==========
@dp.callback_query(lambda c: c.data.startswith("upload_") or c.data.startswith("addphoto_"))
async def handle_callback(call: types.CallbackQuery):
    key = make_key(call.message.chat.id, call.message.message_thread_id or 0, call.from_user.id)
    state = user_state.get(key)
    if not state:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    if call.data == "upload_ok":
        await advance_step(key)
        await call.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif call.data == "upload_next":
        await advance_step(key, skip=True)
        await call.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    elif call.data == "upload_cancel":
        obj = state.get("object_id", "")
        user_state.pop(key, None)
        await call.message.delete()
        await send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=send_reply_keyboard())
        await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    elif call.data == "addphoto_done":
        object_id = state["object_id"]
        if object_id not in objects_data:
            objects_data[object_id] = {"steps": []}
        await save_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": state["files"]}], append=True)
        user_state.pop(key, None)
        await call.message.delete()
        await send_message(call.message.chat.id, f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=send_reply_keyboard())
        await call.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==========
async def send_upload_step(key):
    state = user_state[key]
    step = state["steps"][state["step_index"]]
    msg = await send_message(state["chat_id"], f"üì∏ –®–∞–≥: {step['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=upload_keyboard(step["name"]))
    state["last_message_id"] = msg.message_id

async def advance_step(key, skip=False):
    state = user_state[key]
    state["step_index"] += 1
    if state["step_index"] >= len(state["steps"]):
        object_id = state["object_id"]
        all_steps = state["steps"]
        await save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        await send_message(state["chat_id"], f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}", reply_markup=send_reply_keyboard())
    else:
        await send_upload_step(key)

# ========== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ê–†–•–ò–í ==========
async def save_to_archive(object_id, steps, append=False):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ARCHIVE_CHAT_ID, info_text)
        for s in steps:
            files = s["files"]
            if not files:
                continue
            media = []
            for f in files[:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                await bot.send_media_group(ARCHIVE_CHAT_ID, media)
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== WEBHOOK ==========
async def handle_webhook(request: web.Request):
    update = types.Update(**await request.json())
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

app = web.Application()
app.router.add_post(WEBHOOK_PATH, handle_webhook)
app.router.add_get("/", lambda request: web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"))

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

async def on_shutdown(app):
    await bot.delete_webhook()

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
