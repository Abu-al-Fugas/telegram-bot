# bot.py
import os
import asyncio
import sqlite3
from contextlib import closing
from datetime import datetime
import openpyxl

from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# ========= –ù–ê–°–¢–†–û–ô–ö–ò =========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("TELEGRAM_BOT_TOKEN is not set")

# –ì—Ä—É–ø–ø–∞-—Ñ–æ—Ä—É–º —Å —Ç–µ–º–∞–º–∏ (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∑–¥–µ—Å—å)
WORK_CHAT_ID = int(os.environ.get("WORK_CHAT_ID", "0"))
# –û–±—â–∞—è –≥—Ä—É–ø–ø–∞ –±–µ–∑ —Ç–µ–º (–ê—Ä—Ö–∏–≤)
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "0"))

WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "")
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = os.environ.get("DB_PATH", "files.db")

# ========= –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø =========
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========= –ß–ï–ö-–õ–ò–°–¢ =========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========= –°–û–°–¢–û–Ø–ù–ò–Ø =========
class UploadStates(StatesGroup):
    waiting_object_id = State()
    confirm_object = State()
    uploading_steps = State()

class AddPhotoStates(StatesGroup):
    waiting_object_id = State()
    confirm_object = State()
    uploading_files = State()

class DownloadStates(StatesGroup):
    waiting_object_id = State()

class InfoStates(StatesGroup):
    waiting_object_id = State()

# –î–ª—è /result (—Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è)
objects_data = {}

# ========= –ë–ê–ó–ê –î–ê–ù–ù–´–• =========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("PRAGMA journal_mode=WAL")
        conn.execute("""
            CREATE TABLE IF NOT EXISTS objects (
                object_id TEXT PRIMARY KEY,
                created_at TEXT NOT NULL
            )
        """)
        conn.execute("""
            CREATE TABLE IF NOT EXISTS files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                object_id TEXT NOT NULL,
                step TEXT NOT NULL,
                kind TEXT NOT NULL CHECK (kind IN ('photo','video','document')),
                file_id TEXT NOT NULL,
                author_id INTEGER,
                author_name TEXT,
                created_at TEXT NOT NULL,
                FOREIGN KEY (object_id) REFERENCES objects(object_id) ON DELETE CASCADE
            )
        """)
        conn.commit()

def ensure_object(conn, object_id: str):
    conn.execute(
        "INSERT OR IGNORE INTO objects(object_id, created_at) VALUES (?, ?)",
        (object_id, datetime.now().isoformat())
    )

def save_files_to_db(object_id: str, step_name: str, files: list[dict], author_id: int | None, author_name: str | None):
    if not files:
        return
    with closing(sqlite3.connect(DB_PATH)) as conn:
        ensure_object(conn, object_id)
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, author_id, author_name, created_at) VALUES (?,?,?,?,?,?,?)",
            [
                (object_id, step_name, f["type"], f["file_id"], author_id, author_name, datetime.now().isoformat())
                for f in files
            ]
        )
        conn.commit()

def read_files_from_db(object_id: str):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute(
            "SELECT step, kind, file_id FROM files WHERE object_id = ? ORDER BY id ASC",
            (object_id,)
        )
        rows = cur.fetchall()
    by_step = {}
    for step, kind, file_id in rows:
        by_step.setdefault(step, []).append({"type": kind, "file_id": file_id})
    return by_step

def has_object_in_db(object_id: str) -> bool:
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT 1 FROM objects WHERE object_id = ? LIMIT 1", (object_id,))
        return cur.fetchone() is not None

# ========= –•–ï–õ–ü–ï–†–´ =========
def is_from_work_topic(msg: Message) -> bool:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã-—Ñ–æ—Ä—É–º–∞ '–†–∞–±–æ—Ç–∞' –∏ –≤–Ω—É—Ç—Ä–∏ —Ç–µ–º—ã (topic)."""
    return (msg.chat and msg.chat.id == WORK_CHAT_ID) and bool(getattr(msg, "is_topic_message", False))

def employee_fullname(msg: Message) -> str:
    u = msg.from_user
    return (u.full_name or u.username or str(u.id)) if u else "unknown"

def find_object_in_excel(object_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª objects.xlsx:
    - —Å—Ç–æ–ª–±–µ—Ü A: –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞
    - —Å—Ç–æ–ª–±–µ—Ü B: –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (True, name) –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω,
              (False, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω,
              (None, '–æ—à–∏–±–∫–∞') –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è.
    """
    try:
        wb = openpyxl.load_workbook("objects.xlsx")
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                name = str(row[1]) if len(row) > 1 and row[1] is not None else "–ù/–î"
                return True, name
        return False, None
    except FileNotFoundError:
        return None, "–§–∞–π–ª objects.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω"
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {e}"

# ========= –ö–õ–ê–í–ò–ê–¢–£–†–´ =========
def get_main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/start"), KeyboardButton(text="/photo")],
            [KeyboardButton(text="/addphoto"), KeyboardButton(text="/download")],
            [KeyboardButton(text="/result"), KeyboardButton(text="/info")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )

def get_upload_keyboard(step_name, has_files=False):
    if has_files:
        buttons = [[
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
        ]]
    else:
        if step_name in MANDATORY_STEPS:
            buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")]]
        else:
            buttons = [[
                InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
            ]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_addphoto_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
    ]])

def get_object_confirm_keyboard(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"{prefix}_confirm"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{prefix}_cancel")
    ]])

# ========= –ö–û–ú–ê–ù–î–´ =========
@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ—Ç–µ–ª—å–Ω—ã—Ö\n\n"
        "‚Ä¢ –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏: —Ä–∞–±–æ—Ç–∞—é—Ç –≤ —Å–≤–æ–∏—Ö —Ç–µ–º–∞—Ö –≤ –≥—Ä—É–ø–ø–µ ¬´–†–∞–±–æ—Ç–∞¬ª\n"
        "‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: —Ä–∞–±–æ—Ç–∞—é—Ç –≤ –ª–∏—á–∫–µ\n\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ–º–µ ¬´–†–∞–±–æ—Ç–∞¬ª)\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –æ–±—ä–µ–∫—Ç—É (–≤ —Ç–µ–º–µ ¬´–†–∞–±–æ—Ç–∞¬ª –∏–ª–∏ –≤ –ª–∏—á–∫–µ –∞–¥–º–∏–Ω–∞)\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ (–∏–∑ –ë–î)\n"
        "/result ‚Äì –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ—Å—Å–∏—è)\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ"
    )
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("photo"))
async def cmd_photo(message: Message, state: FSMContext):
    # –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–º—ã –≥—Ä—É–ø–ø—ã ¬´–†–∞–±–æ—Ç–∞¬ª
    if not is_from_work_topic(message):
        await message.answer("üìç –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –≥—Ä—É–ø–ø–µ ¬´–†–∞–±–æ—Ç–∞¬ª, –≤–Ω—É—Ç—Ä–∏ —Å–≤–æ–µ–π —Ç–µ–º—ã.")
        return
    await state.set_state(UploadStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")

@router.message(Command("addphoto"))
async def cmd_addphoto(message: Message, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º: (–∞) –∏–∑ —Ç–µ–º—ã ¬´–†–∞–±–æ—Ç–∞¬ª (—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏), (–±) –∏–∑ –ª–∏—á–∫–∏ (–∞–¥–º–∏–Ω—ã)
    if message.chat.type in ("group", "supergroup") and not is_from_work_topic(message):
        await message.answer("üìç –î–æ–±–∞–≤–ª—è—Ç—å —Ñ–æ—Ç–æ –º–æ–∂–Ω–æ –≤ –≤–∞—à–µ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã ¬´–†–∞–±–æ—Ç–∞¬ª, –ª–∏–±–æ –≤ –ª–∏—á–∫–µ —Å –±–æ—Ç–æ–º (–¥–ª—è –∞–¥–º–∏–Ω–∞).")
        return
    await state.set_state(AddPhotoStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:")

@router.message(Command("download"))
async def cmd_download(message: Message, state: FSMContext):
    await state.set_state(DownloadStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")

@router.message(Command("result"))
async def cmd_result(message: Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.", reply_markup=get_main_keyboard())
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ—Å—Å–∏—è):\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s['files']) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("info"))
async def cmd_info(message: Message, state: FSMContext):
    await state.set_state(InfoStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

# ========= –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ö–¢–ê –í EXCEL =========
@router.message(UploadStates.waiting_object_id)
async def upload_check_object(message: Message, state: FSMContext):
    object_id = message.text.strip()
    exists, name = find_object_in_excel(object_id)
    if exists:
        await state.update_data(object_id=object_id, object_name=name)
        await state.set_state(UploadStates.confirm_object)
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç:\nüè¢ {name}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É –ø–æ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É.",
            reply_markup=get_object_confirm_keyboard("upload")
        )
    elif exists is False:
        await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx.")
        await state.clear()
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {name}")
        await state.clear()

@router.callback_query(F.data == "upload_confirm")
async def upload_confirmed(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data["object_id"]
    steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
    await state.update_data(
        steps=steps,
        step_index=0,
        author_id=callback.from_user.id,
        author_name=callback.from_user.full_name or callback.from_user.username
    )
    await state.set_state(UploadStates.uploading_steps)
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –æ–±—ä–µ–∫—Ç {object_id}. –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É.")
    await send_upload_step(callback.message, state)

@router.callback_query(F.data == "upload_cancel")
async def upload_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")

# ========= –î–û–ë–ê–í–õ–ï–ù–ò–ï –§–û–¢–û (addphoto) –° –ü–†–û–í–ï–†–ö–û–ô =========
@router.message(AddPhotoStates.waiting_object_id)
async def addphoto_check_object(message: Message, state: FSMContext):
    object_id = message.text.strip()
    exists, name = find_object_in_excel(object_id)
    if exists:
        await state.update_data(object_id=object_id, object_name=name)
        await state.set_state(AddPhotoStates.confirm_object)
        await message.answer(
            f"üìã –ù–∞–π–¥–µ–Ω –æ–±—ä–µ–∫—Ç:\nüè¢ {name}\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫ —ç—Ç–æ–º—É –æ–±—ä–µ–∫—Ç—É.",
            reply_markup=get_object_confirm_keyboard("add")
        )
    elif exists is False:
        await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx.")
        await state.clear()
    else:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {name}")
        await state.clear()

@router.callback_query(F.data == "add_confirm")
async def addphoto_confirmed(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data["object_id"]
    await state.set_state(AddPhotoStates.uploading_files)
    msg = await callback.message.answer(
        f"‚úÖ –û–±—ä–µ–∫—Ç {object_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=get_addphoto_keyboard()
    )
    await state.update_data(last_message_id=msg.message_id, files=[], author_id=callback.from_user.id, author_name=employee_fullname(callback.message))
    try:
        await callback.message.delete()
    except:
        pass

@router.callback_query(F.data == "add_cancel")
async def addphoto_cancel(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# ========= –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í =========
@router.message(UploadStates.uploading_steps, F.photo | F.video | F.document)
async def handle_upload_files(message: Message, state: FSMContext):
    # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–∏—ë–º —Ñ–∞–π–ª–æ–≤ –¥–ª—è —á–µ–∫-–ª–∏—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–∑ —Ç–µ–º—ã ¬´–†–∞–±–æ—Ç–∞¬ª
    if not is_from_work_topic(message):
        await message.answer("üìç –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã —á–µ–∫-–ª–∏—Å—Ç–∞ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–π —Ç–µ–º–µ –≥—Ä—É–ø–ø—ã ¬´–†–∞–±–æ—Ç–∞¬ª.")
        return

    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if file_info:
        current_step["files"].append(file_info)

    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass
    msg = await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_upload_keyboard(current_step["name"], has_files=True))
    await state.update_data(steps=steps, last_message_id=msg.message_id)

@router.message(AddPhotoStates.uploading_files, F.photo | F.video | F.document)
async def handle_addphoto_files(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data["files"]

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if file_info:
        files.append(file_info)
        await state.update_data(files=files)

# ========= CALLBACKS (—à–∞–≥–∏ —á–µ–∫-–ª–∏—Å—Ç–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏—è) =========
@router.callback_query(F.data == "upload_ok")
async def callback_upload_ok(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    await advance_step(callback.message, state, author_id=callback.from_user.id, author_name=employee_fullname(callback.message))

@router.callback_query(F.data == "upload_next")
async def callback_upload_next(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await advance_step(callback.message, state, skip=True, author_id=callback.from_user.id, author_name=employee_fullname(callback.message))

@router.callback_query(F.data == "upload_cancel")
async def callback_upload_cancel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data.get("object_id", "")
    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=get_main_keyboard())
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "addphoto_done")
async def callback_addphoto_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data["object_id"]
    files = data["files"]
    author_id = data.get("author_id") or (callback.from_user.id if callback.from_user else None)
    author_name = data.get("author_name") or employee_fullname(callback.message)

    if not files:
        await callback.answer("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_files_to_db(object_id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", files, author_id=author_id, author_name=author_name)

    # –ü—É–±–ª–∏–∫—É–µ–º –≤ ¬´–ê—Ä—Ö–∏–≤¬ª (–±–µ–∑ —Ç–µ–º)
    await post_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": files}], author_name=author_name, author_id=author_id)

    await state.clear()
    try:
        await callback.message.delete()
    except:
        pass
    await callback.message.answer(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({len(files)} —à—Ç.).",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =========
async def send_upload_step(message: Message, state: FSMContext):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]

    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass

    msg = await message.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {current_step['name']}",
        reply_markup=get_upload_keyboard(current_step["name"], has_files=False)
    )
    await state.update_data(last_message_id=msg.message_id)

async def advance_step(message: Message, state: FSMContext, skip=False, author_id: int | None = None, author_name: str | None = None):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    object_id = data["object_id"]

    current = steps[step_index]
    if not skip and current["files"]:
        save_files_to_db(object_id, current["name"], current["files"], author_id=author_id, author_name=author_name)

    step_index += 1
    if step_index >= len(steps):
        # –ü—É–±–ª–∏–∫—É–µ–º –∫–æ–º–ø–ª–µ–∫—Ç –≤ ¬´–ê—Ä—Ö–∏–≤¬ª
        await post_to_archive(object_id, steps, author_name=author_name, author_id=author_id)
        objects_data[object_id] = {"steps": steps}
        total_files = sum(len(s["files"]) for s in steps)

        try:
            await message.delete()
        except:
            pass
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}\n–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
    else:
        await state.update_data(step_index=step_index)
        await send_upload_step(message, state)

async def post_to_archive(object_id: str, steps: list, author_name: str | None, author_id: int | None):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –û–ë–©–£–Æ –≥—Ä—É–ø–ø—É ¬´–ê—Ä—Ö–∏–≤¬ª ‚Äî –±–µ–∑ —Ç–µ–º. –§–æ—Ç–æ/–≤–∏–¥–µ–æ –∞–ª—å–±–æ–º–∞–º–∏, –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É."""
    try:
        header = (
            f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author_name or author_id}\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await bot.send_message(ARCHIVE_CHAT_ID, header)

        for step in steps:
            files = step["files"]
            if not files:
                continue
            await bot.send_message(ARCHIVE_CHAT_ID, f"üìÅ {step['name']}")

            # –§–æ—Ç–æ+–≤–∏–¥–µ–æ ‚Äî –∞–ª—å–±–æ–º–∞–º–∏ (2..10)
            pv = [f for f in files if f["type"] in ("photo", "video")]
            i = 0
            while i < len(pv):
                batch = pv[i:i+10]
                if len(batch) == 1:
                    f = batch[0]
                    if f["type"] == "photo":
                        await bot.send_photo(ARCHIVE_CHAT_ID, f["file_id"])
                    else:
                        await bot.send_video(ARCHIVE_CHAT_ID, f["file_id"])
                else:
                    media = []
                    for f in batch:
                        if f["type"] == "photo":
                            media.append(InputMediaPhoto(media=f["file_id"]))
                        else:
                            media.append(InputMediaVideo(media=f["file_id"]))
                    await bot.send_media_group(ARCHIVE_CHAT_ID, media)
                i += len(batch)

            # –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É
            docs = [f for f in files if f["type"] == "document"]
            for d in docs:
                await bot.send_document(ARCHIVE_CHAT_ID, d["file_id"])

    except Exception as e:
        print(f"[post_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========= DOWNLOAD / INFO =========
@router.message(DownloadStates.waiting_object_id)
async def process_download_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    await message.answer(f"üîç –ò—â—É —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –≤ –ë–î...")
    try:
        if not has_object_in_db(object_id):
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.", reply_markup=get_main_keyboard())
            await state.clear()
            return

        by_step = read_files_from_db(object_id)
        total = sum(len(v) for v in by_step.values())
        if total == 0:
            await message.answer(f"‚ùå –î–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑–µ.", reply_markup=get_main_keyboard())
            await state.clear()
            return

        await message.answer(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {total}. –û—Ç–ø—Ä–∞–≤–ª—è—é...")

        for step_name, files in by_step.items():
            await message.answer(f"üìÅ {step_name}")

            # –§–æ—Ç–æ/–≤–∏–¥–µ–æ –∞–ª—å–±–æ–º–∞–º–∏ (2..10)
            pv = [f for f in files if f["type"] in ("photo", "video")]
            i = 0
            while i < len(pv):
                batch = pv[i:i+10]
                if len(batch) == 1:
                    f = batch[0]
                    if f["type"] == "photo":
                        await bot.send_photo(chat_id=message.chat.id, photo=f["file_id"])
                    else:
                        await bot.send_video(chat_id=message.chat.id, video=f["file_id"])
                else:
                    media = []
                    for f in batch:
                        if f["type"] == "photo":
                            media.append(InputMediaPhoto(media=f["file_id"]))
                        else:
                            media.append(InputMediaVideo(media=f["file_id"]))
                    await bot.send_media_group(chat_id=message.chat.id, media=media)
                i += len(batch)

            # –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É
            docs = [f for f in files if f["type"] == "document"]
            for d in docs:
                await bot.send_document(chat_id=message.chat.id, document=d["file_id"])

        await message.answer(f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.", reply_markup=get_main_keyboard())

    except Exception as e:
        print(f"[process_download_object_id] –û—à–∏–±–∫–∞: {e}")
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ —Ñ–∞–π–ª–æ–≤: {e}", reply_markup=get_main_keyboard())

    await state.clear()

@router.message(InfoStates.waiting_object_id)
async def process_info_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    try:
        workbook = openpyxl.load_workbook("objects.xlsx")
        sheet = workbook.active
        found = False
        info_text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ {object_id}:\n\n"
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == object_id:
                found = True
                info_text += f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {row[1] if len(row) > 1 else '–ù/–î'}\n"
                info_text += f"üìç –û–±—ä–µ–∫—Ç: {row[2] if len(row) > 2 else '–ù/–î'}\n"
                info_text += f"üó∫ –ê–¥—Ä–µ—Å: {row[3] if len(row) > 3 else '–ù/–î'}\n"
                break
        if found:
            await message.answer(info_text, reply_markup=get_main_keyboard())
        else:
            await message.answer(f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx", reply_markup=get_main_keyboard())
    except FileNotFoundError:
        await message.answer("‚ùå –§–∞–π–ª objects.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_main_keyboard())
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}", reply_markup=get_main_keyboard())
    await state.clear()

# ========= –ö–û–ú–ê–ù–î–´ (–≤–≤–æ–¥ ID –¥–ª—è download/info) =========
@router.message(Command("download"))
async def cmd_download(message: Message, state: FSMContext):
    await state.set_state(DownloadStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=get_main_keyboard())

@router.message(Command("info"))
async def cmd_info(message: Message, state: FSMContext):
    await state.set_state(InfoStates.waiting_object_id)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=get_main_keyboard())

@router.message(Command("result"))
async def cmd_result(message: Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.", reply_markup=get_main_keyboard())
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ—Å—Å–∏—è):\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s['files']) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await message.answer(text, reply_markup=get_main_keyboard())

# ========= WEBHOOK =========
async def on_startup():
    init_db()

    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ WORK_CHAT_ID
    if not WORK_CHAT_ID or WORK_CHAT_ID == 0:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: WORK_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω!")
        print("   –ö–æ–º–∞–Ω–¥–∞ /photo –∏ –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫-–ª–∏—Å—Ç–æ–≤ –≤ —Ç–µ–º–∞—Ö –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WORK_CHAT_ID —Å ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã '–†–∞–±–æ—Ç–∞'.")
    else:
        print(f"‚úÖ WORK_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WORK_CHAT_ID}")

    if not ARCHIVE_CHAT_ID or ARCHIVE_CHAT_ID == 0:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: ARCHIVE_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω! –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ '–ê—Ä—Ö–∏–≤' –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
    else:
        print(f"‚úÖ ARCHIVE_CHAT_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {ARCHIVE_CHAT_ID}")

    if not WEBHOOK_URL:
        raise RuntimeError("WEBHOOK_URL is not set")

    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)

    commands = [
        BotCommand(command="start", description="–°–ø—Ä–∞–≤–∫–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ —á–µ–∫-–ª–∏—Å—Ç—É (–≤ —Ç–µ–º–µ ¬´–†–∞–±–æ—Ç–∞¬ª)"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫ (—Å–µ—Å—Å–∏—è)"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ"),
    ]
    await bot.set_my_commands(commands)
    print("üöÄ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)

async def on_shutdown():
    await bot.session.close()

async def handle_webhook(request):
    """
    –í–∞–∂–Ω–æ: —Å—Ä–∞–∑—É –æ—Ç–¥–∞—ë–º 200 OK, –∞ –∞–ø–¥–µ–π—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ —Ñ–æ–Ω–µ ‚Äî
    —á—Ç–æ–±—ã Telegram –Ω–µ —Ä–µ—Ç—Ä–∞–∏–ª –∞–ø–¥–µ–π—Ç –ø—Ä–∏ –¥–æ–ª–≥–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–µ–¥–∏–∞.
    """
    update = await request.json()
    from aiogram.types import Update
    telegram_update = Update(**update)
    asyncio.create_task(dp.feed_update(bot, telegram_update))
    return web.Response(text="OK")

async def health_check(request):
    return web.Response(text="ü§ñ OK")

# ========= –ó–ê–ü–£–°–ö =========
def main():
    dp.include_router(router)

    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health_check)

    app.on_startup.append(lambda app: asyncio.create_task(on_startup()))
    app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown()))

    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()

