import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
import pandas as pd

# ================= –ù–ê–°–¢–†–û–ô–ö–ò =================
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
BOT_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
XLSX_URL = "https://github.com/Abu-al-Fugas/telegram-bot/blob/main/objects.xlsx"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# ================= –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï =================
user_state = {}
objects_data = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ================== –ö–ù–û–ü–ö–ò ==================
def reply_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton(text="/start"),
        KeyboardButton(text="/photo"),
        KeyboardButton(text="/addphoto"),
        KeyboardButton(text="/download"),
        KeyboardButton(text="/result"),
        KeyboardButton(text="/info")
    )
    return kb

def upload_keyboard(step_name):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok")]
    if step_name not in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    kb.add(*buttons)
    return kb

# ================== –•–ï–õ–ü–ï–†–´ ==================
def make_key(chat_id, thread_id, user_id):
    return (chat_id, thread_id, user_id)

async def send_message(chat_id, text, reply_markup=None, thread_id=None):
    try:
        return await bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

async def delete_message(chat_id, msg_id):
    try:
        await bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

# ================== –ö–û–ú–ê–ù–î–´ ==================
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/info ‚Äì –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ XLSX"
    )
    await message.answer(text, reply_markup=reply_keyboard())

@dp.message(Command(commands=["photo"]))
async def cmd_photo(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", thread_id=message.message_thread_id)

@dp.message(Command(commands=["addphoto"]))
async def cmd_addphoto(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_addphoto_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", thread_id=message.message_thread_id)

@dp.message(Command(commands=["download"]))
async def cmd_download(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_download_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)

@dp.message(Command(commands=["result"]))
async def cmd_result(message: types.Message):
    if not objects_data:
        await send_message(message.chat.id, "üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", thread_id=message.message_thread_id)
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await send_message(message.chat.id, text, thread_id=message.message_thread_id)

@dp.message(Command(commands=["info"]))
async def cmd_info(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_info_object"}
    await send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ XLSX:\n{XLSX_URL}",
                       thread_id=message.message_thread_id)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==================
@dp.message()
async def handle_text(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    text = message.text.strip()

    # –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
    if state.get("command") == "await_object":
        object_id = text
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {
            "command": "upload_steps",
            "object_id": object_id,
            "steps": steps,
            "step_index": 0,
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id
        }
        await send_upload_step(key)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É
    elif state.get("command") == "await_addphoto_object":
        object_id = text
        user_state[key] = {
            "command": "add_photos",
            "object_id": object_id,
            "files": [],
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id
        }
        kb = InlineKeyboardMarkup(row_width=2).add(
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
        )
        await send_message(message.chat.id, f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}.", reply_markup=kb,
                           thread_id=message.message_thread_id)

    # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –æ–±—ä–µ–∫—Ç–∞
    elif state.get("command") == "await_download_object":
        object_id = text
        if object_id not in objects_data:
            await send_message(message.chat.id, f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.", thread_id=message.message_thread_id)
            user_state.pop(key, None)
            return
        data = objects_data[object_id]["steps"]
        for step in data:
            for f in step["files"]:
                if f["type"] == "photo":
                    await bot.send_photo(message.chat.id, f["file_id"])
                elif f["type"] == "document":
                    await bot.send_document(message.chat.id, f["file_id"])
                elif f["type"] == "video":
                    await bot.send_video(message.chat.id, f["file_id"])
        user_state.pop(key, None)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ XLSX
    elif state.get("command") == "await_info_object":
        object_id = text
        try:
            df = pd.read_excel("objects.xlsx")
            if object_id in df["object_id"].astype(str).values:
                row = df[df["object_id"].astype(str) == object_id].iloc[0]
                info_text = "\n".join([f"{col}: {row[col]}" for col in df.columns])
                await send_message(message.chat.id, info_text, thread_id=message.message_thread_id)
            else:
                await send_message(message.chat.id, f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ XLSX.", thread_id=message.message_thread_id)
        except Exception as e:
            await send_message(message.chat.id, f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è XLSX: {e}", thread_id=message.message_thread_id)
        user_state.pop(key, None)

# ================== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==================
@dp.message(content_types=[types.ContentType.PHOTO, types.ContentType.DOCUMENT, types.ContentType.VIDEO])
async def handle_files(message: types.Message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if state.get("command") == "upload_steps":
        step = state["steps"][state["step_index"]]
        step["files"].append(file_info)
        if "last_message_id" in state:
            await delete_message(state["chat_id"], state["last_message_id"])
        msg = await send_message(state["chat_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=upload_keyboard(step["name"]),
                                 thread_id=state["thread_id"])
        state["last_message_id"] = msg.message_id

    elif state.get("command") == "add_photos":
        state["files"].append(file_info)

# ================== CALLBACK ==================
@dp.callback_query()
async def handle_callback(call: types.CallbackQuery):
    key = make_key(call.message.chat.id, call.message.message_thread_id, call.from_user.id)
    state = user_state.get(key)
    if not state:
        await call.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    if call.data == "upload_ok":
        await advance_step(key)
        await call.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif call.data == "upload_next":
        await advance_step(key, skip=True)
        await call.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    elif call.data == "upload_cancel":
        obj = state.get("object_id", "")
        user_state.pop(key, None)
        await delete_message(call.message.chat.id, call.message.message_id)
        await send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await call.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
    elif call.data == "addphoto_done":
        object_id = state["object_id"]
        if object_id not in objects_data:
            objects_data[object_id] = {"steps": []}
        await save_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": state["files"]}], append=True)
        user_state.pop(key, None)
        await delete_message(call.message.chat.id, call.message.message_id)
        await send_message(call.message.chat.id, f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        await call.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ================== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==================
async def send_upload_step(key):
    state = user_state[key]
    step = state["steps"][state["step_index"]]
    if "last_message_id" in state:
        await delete_message(state["chat_id"], state["last_message_id"])
    msg = await send_message(state["chat_id"], f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step['name']}", reply_markup=upload_keyboard(step["name"]),
                             thread_id=state["thread_id"])
    state["last_message_id"] = msg.message_id

async def advance_step(key, skip=False):
    state = user_state[key]
    state["step_index"] += 1
    if state["step_index"] >= len(state["steps"]):
        object_id = state["object_id"]
        all_steps = state["steps"]
        await save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        await send_message(state["chat_id"], f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}")
    else:
        await send_upload_step(key)

# ================== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ê–†–•–ò–í ==================
async def save_to_archive(object_id, steps, append=False):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ARCHIVE_CHAT_ID, info_text)
        for s in steps:
            files = s["files"]
            if not files:
                continue
            media = []
            for f in files[:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                await bot.send_media_group(ARCHIVE_CHAT_ID, media)
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ================== WEBHOOK ==================
async def handle_webhook(request: web.Request):
    try:
        update = types.Update(**await request.json())
        await dp.feed_update(bot, update)
        return web.Response(text="OK")
    except Exception as e:
        print(f"[handle_webhook] –û—à–∏–±–∫–∞: {e}")
        return web.Response(text="Error", status=500)

app = web.Application()
app.router.add_post(f"/{TOKEN}", handle_webhook)

if __name__ == "__main__":
    import logging
    logging.basicConfig(level=logging.INFO)
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    import asyncio
    async def on_startup():
        await bot.delete_webhook()
        await bot.set_webhook(BOT_URL)

    loop = asyncio.get_event_loop()
    loop.run_until_complete(on_startup())
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
