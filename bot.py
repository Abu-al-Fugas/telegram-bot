# bot.py
import os
import asyncio
from datetime import datetime
import openpyxl
import sqlite3
from contextlib import closing
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from aiohttp import web

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WORK_CHAT_ID = int(os.environ.get("WORK_CHAT_ID", "0"))
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "0"))
WEBHOOK_URL = "https://telegram-bot-b6pn.onrender.com"
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = "files.db"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS files(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            object_id TEXT, step TEXT, kind TEXT, file_id TEXT,
            author TEXT, created_at TEXT
        )""")
        conn.commit()

def save_files(object_id, step, files, author):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, author, created_at) VALUES (?,?,?,?,?,?)",
            [(object_id, step, f["type"], f["file_id"], author, datetime.now().isoformat()) for f in files]
        )
        conn.commit()

def get_files(object_id):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT step, kind, file_id FROM files WHERE object_id=? ORDER BY id", (object_id,))
        data = {}
        for step, kind, file_id in cur.fetchall():
            data.setdefault(step, []).append({"type": kind, "file_id": file_id})
        return data

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class Upload(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class AddPhoto(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class Download(StatesGroup):
    waiting_object = State()

class Info(StatesGroup):
    waiting_object = State()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
SESSION_COUNTER = {}  # {object_id: count_files}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_kb():
    """Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/photo"), KeyboardButton(text="/addphoto")]],
        resize_keyboard=True
    )

def step_kb(step_name, has_files=False):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à–∞–≥–æ–≤"""
    if has_files:
        buttons = [[
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]]
    else:
        if step_name in MANDATORY_STEPS:
            buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        else:
            buttons = [[
                InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def confirm_kb(prefix: str):
    # prefix –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è photo / addphoto
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_confirm_yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{prefix}_confirm_no"),
    ]])

# ========== –•–ï–õ–ü–ï–†–´ ==========
def is_from_work_topic(msg: Message) -> bool:
    return (msg.chat and msg.chat.id == WORK_CHAT_ID and getattr(msg, "is_topic_message", False))

async def safe_call(coro, pause=0.25):
    try:
        res = await coro
        await asyncio.sleep(pause)
        return res
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        return await coro

def check_object_excel(object_id):
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return True, str(row[1])
        return False, None
    except Exception as e:
        return None, str(e)

def get_object_info(object_id):
    # –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–∞ –¥–ª—è /info
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º: A:–Ω–æ–º–µ—Ä, B:–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, C:–æ–±—ä–µ–∫—Ç, D:–∞–¥—Ä–µ—Å
                return {
                    "id": str(row[0]).strip(),
                    "consumer": str(row[1]) if len(row) > 1 else "–ù/–î",
                    "object": str(row[2]) if len(row) > 2 else "–ù/–î",
                    "address": str(row[3]) if len(row) > 3 else "–ù/–î",
                }
        return None
    except:
        return None

# ========== –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–æ—Ç–µ–ª—å–Ω—ã—Ö.\n\n"
        "üì∏ –ò—Å–ø–æ–ª—å–∑—É–π /photo –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ /addphoto –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.\n"
        "‚öôÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.",
        reply_markup=main_kb()
    )

@router.message(Command("photo"))
async def cmd_photo(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(Upload.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("addphoto"))
async def cmd_addphoto(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(AddPhoto.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("download"))
async def cmd_download(m: Message, state: FSMContext):
    await state.set_state(Download.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("info"))
async def cmd_info(m: Message, state: FSMContext):
    await state.set_state(Info.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:")

@router.message(Command("result"))
async def cmd_result(m: Message):
    if not SESSION_COUNTER:
        await m.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.", reply_markup=main_kb())
        return
    lines = ["‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è):"]
    for oid, cnt in SESSION_COUNTER.items():
        lines.append(f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {cnt} —Ñ–∞–π–ª–æ–≤")
    await m.answer("\n".join(lines), reply_markup=main_kb())

# ========== –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ö–¢–ê + –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ==========
@router.message(Upload.waiting_object)
async def check_upload_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(obj)
    if ok:
        await state.update_data(object=obj, object_name=name, step=0, steps=[{"name": s, "files": []} for s in UPLOAD_STEPS])
        await state.set_state(Upload.confirming)
        await m.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n\nüÜî {obj}\nüè∑Ô∏è {name}", reply_markup=confirm_kb("photo"))
    else:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

@router.message(AddPhoto.waiting_object)
async def check_add_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(obj)
    if ok:
        await state.update_data(object=obj, object_name=name, files=[])
        await state.set_state(AddPhoto.confirming)
        await m.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤):\n\nüÜî {obj}\nüè∑Ô∏è {name}", reply_markup=confirm_kb("add"))
    else:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /photo =====
@router.callback_query(F.data == "photo_confirm_yes")
async def photo_confirm_yes(c: CallbackQuery, state: FSMContext):
    await state.set_state(Upload.uploading)
    # –±–µ—Å—à–æ–≤–Ω–æ –º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥
    data = await state.get_data()
    step0 = data["steps"][0]["name"]
    try:
        await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step0}", reply_markup=step_kb(step0))
        await state.update_data(last_msg=c.message.message_id)
    except:
        msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step0}", reply_markup=step_kb(step0))
        await state.update_data(last_msg=msg.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data == "photo_confirm_no")
async def photo_confirm_no(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except:
        await c.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–∞")

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /addphoto =====
@router.callback_query(F.data == "add_confirm_yes")
async def add_confirm_yes(c: CallbackQuery, state: FSMContext):
    await state.set_state(AddPhoto.uploading)
    try:
        await c.message.edit_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞.", reply_markup=step_kb('', True))
        await state.update_data(last_msg=c.message.message_id)
    except:
        msg = await c.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞.", reply_markup=step_kb('', True))
        await state.update_data(last_msg=msg.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data == "add_confirm_no")
async def add_confirm_no(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except:
        await c.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–∞")

# ========== –ü–†–ò–Å–ú –§–ê–ô–õ–û–í ==========
@router.message(Upload.uploading, F.photo | F.video | F.document)
async def handle_upload(m: Message, state: FSMContext):
    data = await state.get_data()
    step_i = data["step"]
    steps = data["steps"]
    cur = steps[step_i]

    # –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_info = {}
    if m.photo:
        file_info = {"type": "photo", "file_id": m.photo[-1].file_id}
    elif m.video:
        file_info = {"type": "video", "file_id": m.video.file_id}
    elif m.document:
        file_info = {"type": "document", "file_id": m.document.file_id}

    # –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    if m.media_group_id:
        media_groups = data.get("media_groups", {})
        group_id = m.media_group_id

        # –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        media_groups.setdefault(group_id, []).append(file_info)
        await state.update_data(media_groups=media_groups)

        # –ø–æ–¥–æ–∂–¥–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ ‚Äî Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª—å–±–æ–º –ø–æ —á–∞—Å—Ç—è–º
        await asyncio.sleep(1.2)

        # –ø—Ä–æ–≤–µ—Ä—è–µ–º ‚Äî –µ—Å–ª–∏ –∞–ª—å–±–æ–º –µ—â—ë –≤ –±—É—Ñ–µ—Ä–µ, –∑–Ω–∞—á–∏—Ç, –ø–æ—Ä–∞ –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
        data = await state.get_data()
        media_groups = data.get("media_groups", {})
        if group_id in media_groups:
            cur["files"].extend(media_groups.pop(group_id))

            # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–µ—Å–ª–∏ –±—ã–ª–æ)
            if data.get("last_msg"):
                try:
                    await bot.delete_message(m.chat.id, data["last_msg"])
                except:
                    pass

            # –ø—Ä–∏—Å–ª–∞—Ç—å –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
            msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=step_kb(cur["name"], has_files=True))
            await state.update_data(steps=steps, last_msg=msg.message_id, media_groups=media_groups)
    else:
        # –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª (–Ω–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞)
        cur["files"].append(file_info)

        if data.get("last_msg"):
            try:
                await bot.delete_message(m.chat.id, data["last_msg"])
            except:
                pass

        msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=step_kb(cur["name"], has_files=True))
        await state.update_data(steps=steps, last_msg=msg.message_id)

@router.message(AddPhoto.uploading, F.photo | F.video | F.document)
async def handle_add(m: Message, state: FSMContext):
    data = await state.get_data()
    files = data["files"]
    if m.photo:
        files.append({"type": "photo", "file_id": m.photo[-1].file_id})
    elif m.video:
        files.append({"type": "video", "file_id": m.video.file_id})
    elif m.document:
        files.append({"type": "document", "file_id": m.document.file_id})
    await state.update_data(files=files)

# ========== CALLBACKS ==========
@router.callback_query(F.data == "save")
async def step_save(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    obj = data["object"]
    obj_name = data.get("object_name") or ""
    step_i = data["step"]
    steps = data["steps"]
    cur = steps[step_i]
    author = c.from_user.full_name or c.from_user.username or str(c.from_user.id)

    if cur["files"]:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        save_files(obj, cur["name"], cur["files"], author)
        # —Å—á–∏—Ç–∞–µ–º –¥–ª—è /result
        SESSION_COUNTER[obj] = SESSION_COUNTER.get(obj, 0) + len(cur["files"])
        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ –∞—Ä—Ö–∏–≤ –û–î–ù–û–ô –ì–†–£–ü–ü–û–ô (–±–µ–∑ —à–∞–≥–æ–≤—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤)
        await post_archive_single_group(obj, obj_name, cur["files"], author)

    # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    step_i += 1
    await state.update_data(step=step_i, steps=steps)

    if step_i < len(steps):
        next_name = steps[step_i]["name"]
        # –±–µ—Å—à–æ–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —à–∞–≥–∞
        try:
            await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name))
            await state.update_data(last_msg=c.message.message_id)
        except:
            msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name))
            await state.update_data(last_msg=msg.message_id)
    else:
        try:
            await c.message.edit_text(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.", reply_markup=None)
        except:
            await c.message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.")
        await state.clear()

    await c.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

@router.callback_query(F.data == "skip")
async def step_skip(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step_i = data["step"] + 1
    steps = data["steps"]
    await state.update_data(step=step_i)

    if step_i < len(steps):
        next_name = steps[step_i]["name"]
        # –±–µ—Å—à–æ–≤–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        try:
            await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name))
            await state.update_data(last_msg=c.message.message_id)
        except:
            msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name))
            await state.update_data(last_msg=msg.message_id)
        await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        try:
            await c.message.edit_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=None)
        except:
            await c.message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.clear()
        await c.answer("–ì–æ—Ç–æ–≤–æ")

@router.callback_query(F.data == "cancel")
async def step_cancel(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    except:
        await c.message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==========
async def send_step(m: Message, state: FSMContext):
    data = await state.get_data()
    step_i = data["step"]
    steps = data["steps"]
    if step_i >= len(steps):
        return
    step = steps[step_i]
    # –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ "–ø—Ä–æ–º–ø—Ç-—Å–æ–æ–±—â–µ–Ω–∏–µ", —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –µ–≥–æ ‚Äî –±–µ—Å—à–æ–≤–Ω–æ
    last_id = data.get("last_msg")
    if last_id:
        try:
            await bot.edit_message_text(
                chat_id=m.chat.id,
                message_id=last_id,
                text=f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step['name']}",
                reply_markup=step_kb(step["name"])
            )
            return
        except:
            pass
    msg = await m.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step['name']}", reply_markup=step_kb(step["name"]))
    await state.update_data(last_msg=msg.message_id)

async def post_archive_single_group(object_id: str, object_name: str, files: list, author: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –ê—Ä—Ö–∏–≤: –æ–¥–Ω–∞ —à–∞–ø–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É + –æ–¥–Ω–æ–π/–Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏ (–±–µ–∑ —à–∞–≥–æ–≤)."""
    try:
        title = object_name or ""
        header = (
            f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\n"
            f"üè∑Ô∏è {title}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author}\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        await safe_call(bot.send_message(ARCHIVE_CHAT_ID, header))

        # Telegram –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–æ 10 —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º send_media_group
        batch = []
        for f in files:
            if f["type"] == "photo":
                batch.append(InputMediaPhoto(media=f["file_id"]))
            elif f["type"] == "video":
                batch.append(InputMediaVideo(media=f["file_id"]))
            elif f["type"] == "document":
                # –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ–ª—å–∑—è —Å–º–µ—à–∏–≤–∞—Ç—å –≤ media_group ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
                pass

            if len(batch) == 10:
                await safe_call(bot.send_media_group(ARCHIVE_CHAT_ID, batch))
                batch = []

        if batch:
            await safe_call(bot.send_media_group(ARCHIVE_CHAT_ID, batch))

        # –î–æ–∫—É–º–µ–Ω—Ç—ã —à–ª—ë–º –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (Telegram-–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ)
        for d in [x for x in files if x["type"] == "document"]:
            await safe_call(bot.send_document(ARCHIVE_CHAT_ID, d["file_id"]))

    except Exception as e:
        print(f"[archive_single_group] {e}")

# ========== DOWNLOAD ==========
@router.message(Download.waiting_object)
async def download_files(m: Message, state: FSMContext):
    obj = m.text.strip()
    data = get_files(obj)
    if not data:
        await m.answer(f"‚ùå –§–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    await m.answer(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: {len(data)}. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
    for step, files in data.items():
        # –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —à–∞–≥–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ ‚Äî –Ω–æ —Ç—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª–µ–∑–Ω–æ –≤–∏–¥–µ—Ç—å –±–ª–æ–∫–∏
        await safe_call(bot.send_message(m.chat.id, f"üìÅ {step}"))
        media_batch = []
        for f in files:
            if f["type"] == "photo":
                media_batch.append(InputMediaPhoto(media=f["file_id"]))
            elif f["type"] == "video":
                media_batch.append(InputMediaVideo(media=f["file_id"]))
        if media_batch:
            await safe_call(bot.send_media_group(m.chat.id, media_batch))
        docs = [f for f in files if f["type"] == "document"]
        for d in docs:
            await safe_call(bot.send_document(m.chat.id, d["file_id"]))
    await m.answer(f"‚úÖ –§–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É {obj} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.clear()

# ========== INFO ==========
@router.message(Info.waiting_object)
async def info_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    info = get_object_info(obj)
    if not info:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx")
    else:
        text = (
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ {info['id']}:\n\n"
            f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {info['consumer']}\n"
            f"üìç –û–±—ä–µ–∫—Ç: {info['object']}\n"
            f"üó∫ –ê–¥—Ä–µ—Å: {info['address']}"
        )
        await m.answer(text)
    await state.clear()

# ========== WEBHOOK ==========
async def on_startup():
    init_db()
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ—Å—Å–∏—è)"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
    ])
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)

async def handle_webhook(request):
    data = await request.json()
    from aiogram.types import Update
    update = Update(**data)  # –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ ‚Äî —Ä–∞–±–æ—á–∏–π –ø—É—Ç—å –¥–ª—è —Ç–≤–æ–µ–π —Å—Ä–µ–¥—ã
    asyncio.create_task(dp.feed_update(bot, update))
    return web.Response(text="OK")

async def health(request):
    return web.Response(text="ü§ñ OK")

def main():
    dp.include_router(router)
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health)
    app.on_startup.append(lambda a: asyncio.create_task(on_startup()))
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
