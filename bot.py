# bot.py
import os
import asyncio
from datetime import datetime
import openpyxl
import sqlite3
from contextlib import closing
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from aiohttp import web

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WORK_CHAT_ID = int(os.environ.get("WORK_CHAT_ID", "0"))
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "0"))
WEBHOOK_URL = "https://telegram-bot-b6pn.onrender.com"
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = "files.db"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS files(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            object_id TEXT, step TEXT, kind TEXT, file_id TEXT,
            author TEXT, created_at TEXT
        )""")
        conn.commit()

def save_files(object_id, step, files, author):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, author, created_at) VALUES (?,?,?,?,?,?)",
            [(object_id, step, f["type"], f["file_id"], author, datetime.now().isoformat()) for f in files]
        )
        conn.commit()

def get_files(object_id):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT step, kind, file_id FROM files WHERE object_id=? ORDER BY id", (object_id,))
        data = {}
        for step, kind, file_id in cur.fetchall():
            data.setdefault(step, []).append({"type": kind, "file_id": file_id})
        return data

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class Upload(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class AddPhoto(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class Download(StatesGroup):
    waiting_object = State()

class Info(StatesGroup):
    waiting_object = State()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# —Ç—Ä–µ–∫–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏
SESSION_COUNTER = {}  # {object_id: count_files}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_kb():
    # /photo /addphoto /info –≤ –æ–¥–∏–Ω —Ä—è–¥
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/photo"), KeyboardButton(text="/addphoto"), KeyboardButton(text="/info")]],
        resize_keyboard=True
    )

def step_kb(step_name, has_files=False, allow_skip=True):
    """Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à–∞–≥–æ–≤ –¥–ª—è /photo"""
    if has_files:
        buttons = [[
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]]
    else:
        if step_name in MANDATORY_STEPS:
            # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –Ω–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å
            buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        else:
            if allow_skip:
                buttons = [[
                    InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
                ]]
            else:
                buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def add_kb(has_files: bool):
    """–ö–Ω–æ–ø–∫–∏ –¥–ª—è /addphoto:
       - –ø–æ–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç: —Ç–æ–ª—å–∫–æ –û—Ç–º–µ–Ω–∞
       - –∫–æ–≥–¥–∞ —Ñ–∞–π–ª—ã –µ—Å—Ç—å: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å / –û—Ç–º–µ–Ω–∞
    """
    if has_files:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="add_save"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="add_cancel")
        ]])
    else:
        return InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="add_cancel")
        ]])

def confirm_kb(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_confirm_yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{prefix}_confirm_no"),
    ]])

# ========== –•–ï–õ–ü–ï–†–´ ==========
def is_from_work_topic(msg: Message) -> bool:
    return (msg.chat and msg.chat.id == WORK_CHAT_ID and getattr(msg, "is_topic_message", False))

async def safe_call(coro, pause=0.25):
    try:
        res = await coro
        await asyncio.sleep(pause)
        return res
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        return await coro

def check_object_excel(object_id):
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return True, str(row[1])
        return False, None
    except Exception as e:
        return None, str(e)

def get_object_info(object_id):
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return {
                    "id": str(row[0]).strip(),
                    "consumer": str(row[1]) if len(row) > 1 else "–ù/–î",
                    "object": str(row[2]) if len(row) > 2 else "–ù/–î",
                    "address": str(row[3]) if len(row) > 3 else "–ù/–î",
                }
        return None
    except:
        return None

def combine_all_files(steps: list) -> list:
    allf = []
    for s in steps:
        allf.extend(s.get("files", []))
    return allf

# ========== –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º –∫–æ—Ç–µ–ª—å–Ω—ã—Ö.\n\n"
        "üì∏ /photo ‚Äî –ø–æ—à–∞–≥–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
        "‚ûï /addphoto ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ –æ–±—ä–µ–∫—Ç—É\n"
        "‚ÑπÔ∏è /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ(–∞—Ö)\n",
        reply_markup=main_kb()
    )

@router.message(Command("photo"))
async def cmd_photo(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(Upload.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:", reply_markup=main_kb())

@router.message(Command("addphoto"))
async def cmd_addphoto(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(AddPhoto.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:", reply_markup=main_kb())

@router.message(Command("download"))
async def cmd_download(m: Message, state: FSMContext):
    await state.set_state(Download.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:", reply_markup=main_kb())

@router.message(Command("info"))
async def cmd_info(m: Message, state: FSMContext):
    await state.set_state(Info.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –æ–±—ä–µ–∫—Ç–∞: –Ω–∞–ø—Ä–∏–º–µ—Ä `7` –∏–ª–∏ `1, 4, 6, 199, 19`", parse_mode="Markdown")

@router.message(Command("result"))
async def cmd_result(m: Message):
    if not SESSION_COUNTER:
        await m.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏.", reply_markup=main_kb())
        return
    lines = ["‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Ç–µ–∫—É—â–∞—è —Å–µ—Å—Å–∏—è):"]
    for oid, cnt in SESSION_COUNTER.items():
        lines.append(f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {cnt} —Ñ–∞–π–ª(–æ–≤)")
    await m.answer("\n".join(lines), reply_markup=main_kb())

# ========== –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ö–¢–ê + –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ==========
@router.message(Upload.waiting_object)
async def check_upload_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(obj)
    if ok:
        await state.update_data(
            object=obj,
            object_name=name,
            step=0,
            steps=[{"name": s, "files": []} for s in UPLOAD_STEPS],
            media_buffers={},   # {group_id: {"files": [], "task": asyncio.Task}}
            last_msg=None
        )
        await state.set_state(Upload.confirming)
        await m.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n\nüÜî {obj}\nüè∑Ô∏è {name}", reply_markup=confirm_kb("photo"))
    else:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

@router.message(AddPhoto.waiting_object)
async def check_add_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(obj)
    if ok:
        await state.update_data(
            object=obj,
            object_name=name,
            files=[],
            media_buffers={},
            last_msg=None
        )
        await state.set_state(AddPhoto.confirming)
        await m.answer(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤):\n\nüÜî {obj}\nüè∑Ô∏è {name}", reply_markup=confirm_kb("add"))
    else:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /photo =====
@router.callback_query(F.data == "photo_confirm_yes")
async def photo_confirm_yes(c: CallbackQuery, state: FSMContext):
    await state.set_state(Upload.uploading)
    data = await state.get_data()
    step0 = data["steps"][0]["name"]
    try:
        await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step0}", reply_markup=step_kb(step0, has_files=False))
        await state.update_data(last_msg=c.message.message_id)
    except:
        msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {step0}", reply_markup=step_kb(step0, has_files=False))
        await state.update_data(last_msg=msg.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data == "photo_confirm_no")
async def photo_confirm_no(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except:
        await c.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–∞")

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /addphoto =====
@router.callback_query(F.data == "add_confirm_yes")
async def add_confirm_yes(c: CallbackQuery, state: FSMContext):
    await state.set_state(AddPhoto.uploading)
    # –ø–æ–∫–∞ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ –û—Ç–º–µ–Ω–∞
    text = "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ ¬´–°–æ—Ö—Ä–∞–Ω–∏—Ç—å¬ª."
    try:
        await c.message.edit_text(text, reply_markup=add_kb(has_files=False))
        await state.update_data(last_msg=c.message.message_id)
    except:
        msg = await c.message.answer(text, reply_markup=add_kb(has_files=False))
        await state.update_data(last_msg=msg.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")

@router.callback_query(F.data == "add_confirm_no")
async def add_confirm_no(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    except:
        await c.message.answer("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–∞")

# ===== –û–±—â–∞—è —É—Ç–∏–ª–∏—Ç–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞–ª—å–±–æ–º–æ–≤ =====
async def schedule_album_finalize(state: FSMContext, group_id: str, mode: str):
    """
    mode: "photo" –¥–ª—è Upload.uploading, "add" –¥–ª—è AddPhoto.uploading
    –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ, –∑–∞—Ç–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É.
    """
    await asyncio.sleep(1.4)
    data = await state.get_data()
    buffers = data.get("media_buffers", {})
    buf = buffers.get(group_id)
    if not buf:
        return

    files = buf.get("files", [])
    # –æ—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å—å –∏ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞—Å–∫
    try:
        if buf.get("task"):
            buf["task"].cancel()
    except:
        pass
    buffers.pop(group_id, None)
    await state.update_data(media_buffers=buffers)

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º –∫ —Ç–µ–∫—É—â–µ–º—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    last_msg = data.get("last_msg")
    try:
        if last_msg:
            await bot.delete_message(chat_id=data.get("chat_id"), message_id=last_msg)
    except:
        pass

    if mode == "photo":
        step_i = data["step"]
        steps = data["steps"]
        steps[step_i]["files"].extend(files)
        await state.update_data(steps=steps)
        msg = await bot.send_message(chat_id=data.get("chat_id"), text="–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=step_kb(steps[step_i]["name"], has_files=True))
        await state.update_data(last_msg=msg.message_id)
    else:
        add_files = data.get("files", [])
        add_files.extend(files)
        await state.update_data(files=add_files)
        msg = await bot.send_message(chat_id=data.get("chat_id"), text="–ì–æ—Ç–æ–≤–æ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é", reply_markup=add_kb(has_files=True))
        await state.update_data(last_msg=msg.message_id)

def capture_file_from_message(m: Message):
    if m.photo:
        return {"type": "photo", "file_id": m.photo[-1].file_id}
    if m.video:
        return {"type": "video", "file_id": m.video.file_id}
    if m.document:
        return {"type": "document", "file_id": m.document.file_id}
    return None

# ========== –ü–†–ò–Å–ú –§–ê–ô–õ–û–í ==========
@router.message(Upload.uploading, F.photo | F.video | F.document)
async def handle_upload(m: Message, state: FSMContext):
    data = await state.get_data()
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø—Ä–∞–≤–æ–∫/—É–¥–∞–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
    if not data.get("chat_id"):
        await state.update_data(chat_id=m.chat.id)

    file_info = capture_file_from_message(m)
    if not file_info:
        return

    if m.media_group_id:
        buffers = data.get("media_buffers", {})
        buf = buffers.get(m.media_group_id, {"files": [], "task": None})
        buf["files"].append(file_info)
        # –ø–ª–∞–Ω–∏—Ä—É–µ–º –µ–¥–∏–Ω–∏—á–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–ª—å–±–æ–º–∞
        if buf["task"] is None:
            buf["task"] = asyncio.create_task(schedule_album_finalize(state, m.media_group_id, mode="photo"))
        buffers[m.media_group_id] = buf
        await state.update_data(media_buffers=buffers)
    else:
        # –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–∏–Ω –Ω–∞–±–æ—Ä –∫–Ω–æ–ø–æ–∫
        step_i = data["step"]
        steps = data["steps"]
        steps[step_i]["files"].append(file_info)

        # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, –µ—Å–ª–∏ –±—ã–ª–æ
        if data.get("last_msg"):
            try:
                await bot.delete_message(m.chat.id, data["last_msg"])
            except:
                pass

        msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ", reply_markup=step_kb(steps[step_i]["name"], has_files=True))
        await state.update_data(steps=steps, last_msg=msg.message_id, chat_id=m.chat.id)

@router.message(AddPhoto.uploading, F.photo | F.video | F.document)
async def handle_add(m: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("chat_id"):
        await state.update_data(chat_id=m.chat.id)

    file_info = capture_file_from_message(m)
    if not file_info:
        return

    if m.media_group_id:
        buffers = data.get("media_buffers", {})
        buf = buffers.get(m.media_group_id, {"files": [], "task": None})
        buf["files"].append(file_info)
        if buf["task"] is None:
            buf["task"] = asyncio.create_task(schedule_album_finalize(state, m.media_group_id, mode="add"))
        buffers[m.media_group_id] = buf
        await state.update_data(media_buffers=buffers)
    else:
        files = data.get("files", [])
        files.append(file_info)
        # —É–±—Ä–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        if data.get("last_msg"):
            try:
                await bot.delete_message(m.chat.id, data["last_msg"])
            except:
                pass
        msg = await m.answer("–ì–æ—Ç–æ–≤–æ –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—é", reply_markup=add_kb(has_files=True))
        await state.update_data(files=files, last_msg=msg.message_id, chat_id=m.chat.id)

# ========== CALLBACKS ==========
@router.callback_query(F.data == "save")
async def step_save(c: CallbackQuery, state: FSMContext):
    # –í–ê–ñ–ù–û: –∑–¥–µ—Å—å –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤. –ü—Ä–æ—Å—Ç–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º —à–∞–≥ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –¥–∞–ª—å—à–µ.
    data = await state.get_data()
    step_i = data["step"] + 1
    steps = data["steps"]
    await state.update_data(step=step_i)

    if step_i < len(steps):
        next_name = steps[step_i]["name"]
        try:
            await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name, has_files=False))
            await state.update_data(last_msg=c.message.message_id)
        except:
            msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name, has_files=False))
            await state.update_data(last_msg=msg.message_id)
    else:
        # –≤—Å–µ —à–∞–≥–∏ –∑–∞–∫–æ–Ω—á–µ–Ω—ã: —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–æ–π —à–∞–ø–∫–æ–π + –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
        obj = data["object"]
        obj_name = data.get("object_name") or ""
        author = c.from_user.full_name or c.from_user.username or str(c.from_user.id)
        all_files = combine_all_files(steps)

        # —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –ø–æ —à–∞–≥–∞–º
        for s in steps:
            if s["files"]:
                save_files(obj, s["name"], s["files"], author)

        # –æ–±–Ω–æ–≤–∏—Ç—å —Å—á—ë—Ç—á–∏–∫ —Å–µ—Å—Å–∏–∏
        SESSION_COUNTER[obj] = SESSION_COUNTER.get(obj, 0) + len(all_files)

        # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤
        if all_files:
            await post_archive_single_group(obj, obj_name, all_files, author)

        try:
            await c.message.edit_text(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.", reply_markup=None)
        except:
            await c.message.answer(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.")
        await state.clear()

    await c.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

@router.callback_query(F.data == "skip")
async def step_skip(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    step_i = data["step"] + 1
    steps = data["steps"]
    await state.update_data(step=step_i)

    if step_i < len(steps):
        next_name = steps[step_i]["name"]
        try:
            await c.message.edit_text(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name, has_files=False))
            await state.update_data(last_msg=c.message.message_id)
        except:
            msg = await c.message.answer(f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {next_name}", reply_markup=step_kb(next_name, has_files=False))
            await state.update_data(last_msg=msg.message_id)
        await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ")
    else:
        try:
            await c.message.edit_text("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", reply_markup=None)
        except:
            await c.message.answer("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        await state.clear()
        await c.answer("–ì–æ—Ç–æ–≤–æ")

@router.callback_query(F.data == "cancel")
async def step_cancel(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)
    except:
        await c.message.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ==== addphoto callbacks ====
@router.callback_query(F.data == "add_save")
async def add_save(c: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    obj = data["object"]
    obj_name = data.get("object_name") or ""
    files = data.get("files", [])
    author = c.from_user.full_name or c.from_user.username or str(c.from_user.id)

    if files:
        # –ø–æ–ª–æ–∂–∏–º –≤ –ë–î –∫–∞–∫ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
        save_files(obj, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (addphoto)", files, author)
        SESSION_COUNTER[obj] = SESSION_COUNTER.get(obj, 0) + len(files)
        await post_archive_single_group(obj, obj_name, files, author)

    try:
        await c.message.edit_text(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.", reply_markup=None)
    except:
        await c.message.answer(f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}.")
    await state.clear()
    await c.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

@router.callback_query(F.data == "add_cancel")
async def add_cancel(c: CallbackQuery, state: FSMContext):
    await state.clear()
    try:
        await c.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    except:
        await c.message.answer("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ========== DOWNLOAD ==========
@router.message(Download.waiting_object)
async def download_files(m: Message, state: FSMContext):
    obj = m.text.strip()
    data = get_files(obj)
    if not data:
        await m.answer(f"‚ùå –§–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    await m.answer(f"üìÇ –ù–∞–π–¥–µ–Ω–æ —à–∞–≥–æ–≤: {len(data)}. –û—Ç–ø—Ä–∞–≤–ª—è—é...")
    for step, files in data.items():
        await safe_call(bot.send_message(m.chat.id, f"üìÅ {step}"))
        media_batch = []
        for f in files:
            if f["type"] == "photo":
                media_batch.append(InputMediaPhoto(media=f["file_id"]))
            elif f["type"] == "video":
                media_batch.append(InputMediaVideo(media=f["file_id"]))
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞—Ç—á–∞–º–∏ –ø–æ 10
        for i in range(0, len(media_batch), 10):
            await safe_call(bot.send_media_group(m.chat.id, media_batch[i:i+10]))
        # –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
        docs = [f for f in files if f["type"] == "document"]
        for d in docs:
            await safe_call(bot.send_document(m.chat.id, d["file_id"]))
    await m.answer(f"‚úÖ –§–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É {obj} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.clear()

# ========== INFO ==========
@router.message(Info.waiting_object)
async def info_object(m: Message, state: FSMContext):
    raw = m.text.strip()
    # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ "1, 4, 6, 199, 19"
    parts = [p.strip() for p in raw.replace(";", ",").split(",") if p.strip()]
    if not parts:
        await m.answer("‚ùå –ù–µ –ø–æ–Ω—è–ª –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–∏–º–µ—Ä: `7` –∏–ª–∏ `1, 4, 6, 199, 19`", parse_mode="Markdown")
        await state.clear()
        return

    replies = []
    for obj in parts:
        info = get_object_info(obj)
        if not info:
            replies.append(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ objects.xlsx")
        else:
            replies.append(
                "üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ {id}:\n\n"
                "üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {consumer}\n"
                "üìç –û–±—ä–µ–∫—Ç: {object}\n"
                "üó∫ –ê–¥—Ä–µ—Å: {address}".format(**info)
            )
    await m.answer("\n\n".join(replies))
    await state.clear()

# ========== –û–¢–ü–†–ê–í–ö–ê –í –ê–†–•–ò–í ==========
async def post_archive_single_group(object_id: str, object_name: str, files: list, author: str):
    """–û–¥–Ω–∞ —à–∞–ø–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç + –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø–æ 10 (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ). –î–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ."""
    try:
        title = object_name or ""
        header = (
            f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\n"
            f"üè∑Ô∏è {title}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author}\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
            f"------------------------------------"
        )
        await safe_call(bot.send_message(ARCHIVE_CHAT_ID, header))

        # —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –±–∞—Ç—á–∞–º–∏ –ø–æ 10
        media = []
        docs = []
        for f in files:
            if f["type"] == "photo":
                media.append(InputMediaPhoto(media=f["file_id"]))
            elif f["type"] == "video":
                media.append(InputMediaVideo(media=f["file_id"]))
            elif f["type"] == "document":
                docs.append(f["file_id"])

        for i in range(0, len(media), 10):
            await safe_call(bot.send_media_group(ARCHIVE_CHAT_ID, media[i:i+10]))

        for file_id in docs:
            await safe_call(bot.send_document(ARCHIVE_CHAT_ID, file_id))

    except Exception as e:
        print(f"[archive_single_group] {e}")

# ========== WEBHOOK ==========
async def on_startup():
    init_db()
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (—Å–µ—Å—Å–∏—è)"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
    ])
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)

async def handle_webhook(request):
    data = await request.json()
    from aiogram.types import Update
    update = Update(**data)
    asyncio.create_task(dp.feed_update(bot, update))
    return web.Response(text="OK")

async def health(request):
    return web.Response(text="ü§ñ OK")

def main():
    dp.include_router(router)
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health)
    app.on_startup.append(lambda a: asyncio.create_task(on_startup()))
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
