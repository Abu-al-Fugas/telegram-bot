import os
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaDocument,
    BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
WEBHOOK_URL = "https://telegram-bot-b6pn.onrender.com"
PORT = int(os.environ.get("PORT", 10000))

# ========== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ==========
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø FSM ==========
class UploadStates(StatesGroup):
    waiting_object_id = State()
    uploading_steps = State()

class AddPhotoStates(StatesGroup):
    waiting_object_id = State()
    uploading_files = State()

class DownloadStates(StatesGroup):
    waiting_object_id = State()

class InfoStates(StatesGroup):
    waiting_object_id = State()

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï ==========
objects_data = {}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def get_main_keyboard():
    """Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/start"), KeyboardButton(text="/photo")],
            [KeyboardButton(text="/addphoto"), KeyboardButton(text="/download")],
            [KeyboardButton(text="/result"), KeyboardButton(text="/info")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

def get_upload_keyboard(step_name, has_files=False):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —à–∞–≥–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏"""
    buttons = []
    
    if has_files:
        # –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ ‚úÖ –∏ ‚ùå
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
        ])
    else:
        # –î–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        row = [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok")]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥." —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤
        if step_name not in MANDATORY_STEPS:
            row.append(InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
        
        row.append(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
        buttons.append(row)
    
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_addphoto_keyboard():
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
        ]
    ])
    return keyboard

# ========== –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äì –∑–∞–ø—É—Å–∫/–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
        "/info ‚Äì –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ objects.xlsx"
    )
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("photo"))
async def cmd_photo(message: Message, state: FSMContext):
    await state.set_state(UploadStates.waiting_object_id)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("addphoto"))
async def cmd_addphoto(message: Message, state: FSMContext):
    await state.set_state(AddPhotoStates.waiting_object_id)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("download"))
async def cmd_download(message: Message, state: FSMContext):
    await state.set_state(DownloadStates.waiting_object_id)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("result"))
async def cmd_result(message: Message):
    if not objects_data:
        await message.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", reply_markup=get_main_keyboard())
        return
    
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    
    await message.answer(text, reply_markup=get_main_keyboard())

@router.message(Command("info"))
async def cmd_info(message: Message, state: FSMContext):
    await state.set_state(InfoStates.waiting_object_id)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –ù–û–ú–ï–†–ê –û–ë–™–ï–ö–¢–ê ==========
@router.message(UploadStates.waiting_object_id)
async def process_upload_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    
    steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
    
    await state.update_data(
        object_id=object_id,
        steps=steps,
        step_index=0,
        last_message_id=None
    )
    await state.set_state(UploadStates.uploading_steps)
    
    await send_upload_step(message, state)

@router.message(AddPhotoStates.waiting_object_id)
async def process_addphoto_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    
    await state.update_data(
        object_id=object_id,
        files=[],
        last_message_id=None
    )
    await state.set_state(AddPhotoStates.uploading_files)
    
    msg = await message.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}.\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.",
        reply_markup=get_addphoto_keyboard()
    )
    await state.update_data(last_message_id=msg.message_id)

@router.message(DownloadStates.waiting_object_id)
async def process_download_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    
    if object_id not in objects_data:
        await message.answer(
            f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.",
            reply_markup=get_main_keyboard()
        )
        await state.clear()
        return
    
    await message.answer(f"üìÇ –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id}...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
    data = objects_data[object_id]
    for step in data["steps"]:
        if not step["files"]:
            continue
        
        await message.answer(f"üìÅ {step['name']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
        for i in range(0, len(step["files"]), 10):
            batch = step["files"][i:i+10]
            media = []
            
            for file_info in batch:
                if file_info["type"] == "photo":
                    media.append(InputMediaPhoto(media=file_info["file_id"]))
                elif file_info["type"] == "video":
                    media.append(InputMediaVideo(media=file_info["file_id"]))
                elif file_info["type"] == "document":
                    media.append(InputMediaDocument(media=file_info["file_id"]))
            
            if media:
                await bot.send_media_group(message.chat.id, media)
    
    await message.answer(
        f"‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@router.message(InfoStates.waiting_object_id)
async def process_info_object_id(message: Message, state: FSMContext):
    object_id = message.text.strip()
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª objects.xlsx
        workbook = openpyxl.load_workbook("objects.xlsx")
        sheet = workbook.active
        
        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –≤ —Ñ–∞–π–ª–µ
        found = False
        info_text = f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ {object_id}:\n\n"
        
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == object_id:
                found = True
                # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É: –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è, –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞, –∞–¥—Ä–µ—Å
                info_text += f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {row[1] if len(row) > 1 else '–ù/–î'}\n"
                info_text += f"üìç –û–±—ä–µ–∫—Ç: {row[2] if len(row) > 2 else '–ù/–î'}\n"
                info_text += f"üó∫ –ê–¥—Ä–µ—Å: {row[3] if len(row) > 3 else '–ù/–î'}\n"
                break
        
        if found:
            await message.answer(info_text, reply_markup=get_main_keyboard())
        else:
            await message.answer(
                f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx",
                reply_markup=get_main_keyboard()
            )
        
    except FileNotFoundError:
        await message.answer(
            "‚ùå –§–∞–π–ª objects.xlsx –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}",
            reply_markup=get_main_keyboard()
        )
    
    await state.clear()

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@router.message(UploadStates.uploading_steps, F.photo | F.video | F.document)
async def handle_upload_files(message: Message, state: FSMContext):
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}
    
    current_step["files"].append(file_info)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞)
    msg = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_upload_keyboard(current_step["name"], has_files=True)
    )
    
    await state.update_data(steps=steps, last_message_id=msg.message_id)

@router.message(AddPhotoStates.uploading_files, F.photo | F.video | F.document)
async def handle_addphoto_files(message: Message, state: FSMContext):
    data = await state.get_data()
    files = data["files"]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}
    
    files.append(file_info)
    await state.update_data(files=files)

# ========== CALLBACKS ==========
@router.callback_query(F.data == "upload_ok")
async def callback_upload_ok(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    await advance_step(callback.message, state)

@router.callback_query(F.data == "upload_next")
async def callback_upload_next(callback: CallbackQuery, state: FSMContext):
    await callback.answer("‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    await advance_step(callback.message, state, skip=True)

@router.callback_query(F.data == "upload_cancel")
async def callback_upload_cancel(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data.get("object_id", "")
    
    await state.clear()
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} –æ—Ç–º–µ–Ω–µ–Ω–∞.",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

@router.callback_query(F.data == "addphoto_done")
async def callback_addphoto_done(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    object_id = data["object_id"]
    files = data["files"]
    
    if not files:
        await callback.answer("‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
    if object_id not in objects_data:
        objects_data[object_id] = {"steps": []}
    
    await save_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": files}], append=True)
    
    await state.clear()
    
    try:
        await callback.message.delete()
    except:
        pass
    
    await callback.message.answer(
        f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã ({len(files)} —à—Ç.).",
        reply_markup=get_main_keyboard()
    )
    await callback.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def send_upload_step(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —à–∞–≥–æ–º –∑–∞–≥—Ä—É–∑–∫–∏"""
    data = await state.get_data()
    step_index = data["step_index"]
    steps = data["steps"]
    current_step = steps[step_index]
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if data.get("last_message_id"):
        try:
            await bot.delete_message(message.chat.id, data["last_message_id"])
        except:
            pass
    
    msg = await message.answer(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ {current_step['name']}",
        reply_markup=get_upload_keyboard(current_step["name"], has_files=False)
    )
    
    await state.update_data(last_message_id=msg.message_id)

async def advance_step(message: Message, state: FSMContext, skip=False):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
    data = await state.get_data()
    step_index = data["step_index"] + 1
    steps = data["steps"]
    object_id = data["object_id"]
    
    if step_index >= len(steps):
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
        await save_to_archive(object_id, steps)
        objects_data[object_id] = {"steps": steps}
        
        total_files = sum(len(s["files"]) for s in steps)
        
        try:
            await message.delete()
        except:
            pass
        
        await message.answer(
            f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}\n"
            f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {total_files}",
            reply_markup=get_main_keyboard()
        )
        
        await state.clear()
    else:
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
        await state.update_data(step_index=step_index)
        await send_upload_step(message, state)

async def save_to_archive(object_id: str, steps: list, append: bool = False):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —á–∞—Ç"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        await bot.send_message(ARCHIVE_CHAT_ID, info_text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ —à–∞–≥–∞–º
        for step in steps:
            files = step["files"]
            if not files:
                continue
            
            await bot.send_message(ARCHIVE_CHAT_ID, f"üìÅ {step['name']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≥—Ä—É–ø–ø–∞–º–∏ –ø–æ 10
            for i in range(0, len(files), 10):
                batch = files[i:i+10]
                media = []
                
                for file_info in batch:
                    if file_info["type"] == "photo":
                        media.append(InputMediaPhoto(media=file_info["file_id"]))
                    elif file_info["type"] == "video":
                        media.append(InputMediaVideo(media=file_info["file_id"]))
                    elif file_info["type"] == "document":
                        media.append(InputMediaDocument(media=file_info["file_id"]))
                
                if media:
                    await bot.send_media_group(ARCHIVE_CHAT_ID, media)
        
        if append and object_id in objects_data:
            objects_data[object_id]["steps"].extend(steps)
    
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== WEBHOOK ==========
async def on_startup():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
    commands = [
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
    ]
    await bot.set_my_commands(commands)
    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å webhook:", webhook_url)

async def on_shutdown():
    """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ"""
    await bot.session.close()

async def handle_webhook(request):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    update = await request.json()
    from aiogram.types import Update
    telegram_update = Update(**update)
    await dp.feed_update(bot, telegram_update)
    return web.Response(text="OK")

async def health_check(request):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    return web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç")

# ========== –ó–ê–ü–£–°–ö ==========
def main():
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä
    dp.include_router(router)
    
    # –°–æ–∑–¥–∞—ë–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health_check)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º startup
    app.on_startup.append(lambda app: asyncio.create_task(on_startup()))
    app.on_shutdown.append(lambda app: asyncio.create_task(on_shutdown()))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
