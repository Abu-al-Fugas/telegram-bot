import os
import asyncio
from datetime import datetime
from aiohttp import web
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, InputMediaVideo, InputMediaDocument

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229"))
BOT_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"  # —Ç–≤–æ–π webhook

bot = Bot(token=TOKEN)
dp = Dispatcher()
app = web.Application()

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
user_state = {}
objects_data = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== –•–ï–õ–ü–ï–†–´ ==========
def make_key(chat_id, thread_id, user_id):
    return (chat_id, thread_id, user_id)

def reply_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton("/start"),
        KeyboardButton("/photo"),
        KeyboardButton("/addphoto"),
        KeyboardButton("/download"),
        KeyboardButton("/result"),
        KeyboardButton("/info")
    )
    return kb

def upload_keyboard(step_name):
    kb = InlineKeyboardMarkup(row_width=2)
    buttons = []
    if step_name in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="upload_ok"))
    else:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥.", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel"))
    kb.add(*buttons)
    return kb

async def send_message(chat_id, text, reply_markup=None):
    try:
        return await bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

# ========== –ö–û–ú–ê–ù–î–´ ==========
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤–Ω–∏–∑—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.\n"
        "–î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /photo –∏–ª–∏ /addphoto."
    )
    await message.answer(text, reply_markup=reply_keyboard())

@dp.message(Command("photo"))
async def cmd_photo(message: types.Message):
    key = make_key(message.chat.id, 0, message.from_user.id)
    user_state[key] = {"command": "await_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:")

@dp.message(Command("addphoto"))
async def cmd_addphoto(message: types.Message):
    key = make_key(message.chat.id, 0, message.from_user.id)
    user_state[key] = {"command": "await_addphoto_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:")

@dp.message(Command("download"))
async def cmd_download(message: types.Message):
    key = make_key(message.chat.id, 0, message.from_user.id)
    user_state[key] = {"command": "await_download_object"}
    await send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:")

@dp.message(Command("result"))
async def cmd_result(message: types.Message):
    if not objects_data:
        await send_message(message.chat.id, "üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.")
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    await send_message(message.chat.id, text)

@dp.message(Command("info"))
async def cmd_info(message: types.Message):
    await send_message(message.chat.id, "‚ÑπÔ∏è –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º —Å–º. —Ñ–∞–π–ª objects.xlsx: https://github.com/Abu-al-Fugas/telegram-bot/blob/main/objects.xlsx")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@dp.message()
async def handle_text(message: types.Message):
    key = make_key(message.chat.id, 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    # –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    if state["command"] == "await_object":
        object_id = message.text.strip()
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {
            "command": "upload_steps",
            "object_id": object_id,
            "steps": steps,
            "step_index": 0,
            "chat_id": message.chat.id
        }
        await send_upload_step(key)

    elif state["command"] == "await_addphoto_object":
        object_id = message.text.strip()
        user_state[key] = {
            "command": "add_photos",
            "object_id": object_id,
            "files": [],
            "chat_id": message.chat.id
        }
        await send_message(message.chat.id, f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}.", reply_markup=upload_keyboard("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"))

    elif state["command"] == "await_download_object":
        object_id = message.text.strip()
        if object_id not in objects_data:
            await send_message(message.chat.id, f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            user_state.pop(key, None)
            return
        for step in objects_data[object_id]["steps"]:
            media = []
            for f in step["files"][:10]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–º –¥–æ 10 —Ñ–∞–π–ª–æ–≤ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                await bot.send_media_group(message.chat.id, media)
        user_state.pop(key, None)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@dp.message()
async def handle_files(message: types.Message):
    key = make_key(message.chat.id, 0, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    file_info = {}
    if message.photo:
        file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
    elif message.document:
        file_info = {"type": "document", "file_id": message.document.file_id}
    elif message.video:
        file_info = {"type": "video", "file_id": message.video.file_id}

    if state["command"] == "upload_steps":
        step = state["steps"][state["step_index"]]
        step["files"].append(file_info)
        await send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=upload_keyboard(step["name"]))
    elif state["command"] == "add_photos":
        state["files"].append(file_info)
        await send_message(message.chat.id, "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω. –ù–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∞", reply_markup=upload_keyboard("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"))

# ========== CALLBACKS ==========
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    key = make_key(callback.message.chat.id, 0, callback.from_user.id)
    state = user_state.get(key)
    if not state:
        await callback.answer("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    if callback.data == "upload_ok" or callback.data == "upload_next":
        await advance_step(key)
        await callback.answer("‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif callback.data == "upload_cancel":
        obj = state.get("object_id", "")
        user_state.pop(key, None)
        await callback.message.delete()
        await send_message(callback.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")

# ========== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==========
async def send_upload_step(key):
    state = user_state[key]
    step = state["steps"][state["step_index"]]
    await send_message(state["chat_id"], f"üì∏ –®–∞–≥: {step['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=upload_keyboard(step["name"]))

async def advance_step(key):
    state = user_state[key]
    state["step_index"] += 1
    if state["step_index"] >= len(state["steps"]):
        object_id = state["object_id"]
        all_steps = state["steps"]
        save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        await send_message(state["chat_id"], f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}")
    else:
        await send_upload_step(key)

# ========== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ê–†–•–ò–í ==========
def save_to_archive(object_id, steps):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        asyncio.create_task(bot.send_message(ARCHIVE_CHAT_ID, info_text))
        for s in steps:
            media = []
            for f in s["files"][:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                asyncio.create_task(bot.send_media_group(ARCHIVE_CHAT_ID, media))
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== WEBHOOK ==========
async def handle_webhook(request: web.Request):
    data = await request.json()
    update = types.Update(**data)
    await dp.feed_update(bot, update)
    return web.Response(text="OK")

app.router.add_post(f"/{TOKEN}", handle_webhook)
app.router.add_get("/", lambda r: web.Response(text="ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç"))

async def on_startup(app):
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(BOT_URL)

async def on_shutdown(app):
    await bot.session.close()

app.on_startup.append(on_startup)
app.on_shutdown.append(on_shutdown)

# ========== RUN ==========
if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
