# bot.py
import os
import asyncio
from datetime import datetime
import openpyxl
import sqlite3
from contextlib import closing
import aiohttp
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from aiohttp import web
import json

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.environ.get("WEBHOOK_URL", "https://telegram-bot-b6pn.onrender.com")
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = "files.db"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# üëë –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω(—ã)
ADMIN_IDS = {7277619113}  # Mr. X

# ========== –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø –¢–ï–ú (WORK ‚Üí ARCHIVE) ==========
# –§–æ—Ä–º–∞—Ç:
# TOPIC_MAP[work_chat_id][work_thread_id] = {"chat_id": archive_chat_id, "thread_id": archive_thread_id}
# –í–ù–ò–ú–ê–ù–ò–ï: –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ JSON –∫–ª—é—á–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —Å—Ç—Ä–æ–∫–∞–º–∏ ‚Äî –Ω–∏–∂–µ –≤ –∫–æ–¥–µ –µ—Å—Ç—å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞.
TOPIC_MAP = {
    # ==== –¢–ï–ö–£–©–ò–ï –ñ–ò–í–´–ï –ú–ê–†–®–†–£–¢–´ ====
    -1003281117256: {  # –†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ A (dagestan.xlsx)
        3: {"chat_id": -1003250982118, "thread_id": 3},
        # ----- 8 –∑–∞–≥–ª—É—à–µ–∫ —Ç–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ -----
        # 101: {"chat_id": -1003250982118, "thread_id": 401},
        # 102: {"chat_id": -1003250982118, "thread_id": 402},
        # 103: {"chat_id": -1003250982118, "thread_id": 403},
        # 104: {"chat_id": -1003250982118, "thread_id": 404},
        # 105: {"chat_id": -1003250982118, "thread_id": 405},
        # 106: {"chat_id": -1003250982118, "thread_id": 406},
        # 107: {"chat_id": -1003250982118, "thread_id": 407},
        # 108: {"chat_id": -1003250982118, "thread_id": 408},
    },
    -1003237477689: {  # –†–∞–±–æ—á–∞—è –≥—Ä—É–ø–ø–∞ B (nazran.xlsx)
        15: {"chat_id": -1003252316518, "thread_id": 6},
        # ----- 8 –∑–∞–≥–ª—É—à–µ–∫ —Ç–µ–º –Ω–∞ –±—É–¥—É—â–µ–µ -----
        # 201: {"chat_id": -1003252316518, "thread_id": 501},
        # 202: {"chat_id": -1003252316518, "thread_id": 501},
        # 203: {"chat_id": -1003252316518, "thread_id": 502},
        # 204: {"chat_id": -1003252316518, "thread_id": 502},
        # 205: {"chat_id": -1003252316518, "thread_id": 503},
        # 206: {"chat_id": -1003252316518, "thread_id": 503},
        # 207: {"chat_id": -1003252316518, "thread_id": 504},
        # 208: {"chat_id": -1003252316518, "thread_id": 504},
    },

    # ====== –ó–ê–ì–õ–£–®–ö–ò: 3 –±—É–¥—É—â–∏–µ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã (–ø–æ 10 —Ç–µ–º –∫–∞–∂–¥–∞—è) ======
    # –ü—Ä–∏–º–µ—Ä: –∑–∞–º–µ–Ω–∏ CHAT_ID –∏ THREAD_ID –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ, –∫–æ–≥–¥–∞ —Å–æ–∑–¥–∞—à—å.
    -1004000000001: {
        1: {"chat_id": -1005000000001, "thread_id": 1},
        2: {"chat_id": -1005000000001, "thread_id": 2},
        3: {"chat_id": -1005000000001, "thread_id": 3},
        4: {"chat_id": -1005000000001, "thread_id": 4},
        5: {"chat_id": -1005000000001, "thread_id": 5},
        6: {"chat_id": -1005000000001, "thread_id": 6},
        7: {"chat_id": -1005000000001, "thread_id": 7},
        8: {"chat_id": -1005000000001, "thread_id": 8},
        9: {"chat_id": -1005000000001, "thread_id": 9},
        10: {"chat_id": -1005000000001, "thread_id": 10},
    },
    -1004000000002: {
        1: {"chat_id": -1005000000002, "thread_id": 1},
        2: {"chat_id": -1005000000002, "thread_id": 2},
        3: {"chat_id": -1005000000002, "thread_id": 3},
        4: {"chat_id": -1005000000002, "thread_id": 4},
        5: {"chat_id": -1005000000002, "thread_id": 5},
        6: {"chat_id": -1005000000002, "thread_id": 6},
        7: {"chat_id": -1005000000002, "thread_id": 7},
        8: {"chat_id": -1005000000002, "thread_id": 8},
        9: {"chat_id": -1005000000002, "thread_id": 9},
        10: {"chat_id": -1005000000002, "thread_id": 10},
    },
    -1004000000003: {
        1: {"chat_id": -1005000000003, "thread_id": 1},
        2: {"chat_id": -1005000000003, "thread_id": 2},
        3: {"chat_id": -1005000000003, "thread_id": 3},
        4: {"chat_id": -1005000000003, "thread_id": 4},
        5: {"chat_id": -1005000000003, "thread_id": 5},
        6: {"chat_id": -1005000000003, "thread_id": 6},
        7: {"chat_id": -1005000000003, "thread_id": 7},
        8: {"chat_id": -1005000000003, "thread_id": 8},
        9: {"chat_id": -1005000000003, "thread_id": 9},
        10: {"chat_id": -1005000000003, "thread_id": 10},
    },
}

# ========== –ü–†–ò–í–Ø–ó–ö–ê EXCEL –ö –†–ê–ë–û–ß–ò–ú –ì–†–£–ü–ü–ê–ú ==========
# –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤ —Å–ª–æ–≤–∞—Ä–µ ‚Äî –±–æ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏—Ç, —á—Ç–æ –∫ –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç.
EXCEL_MAP = {
    -1003281117256: "dagestan.xlsx",
    -1003237477689: "nazran.xlsx",
    # –ë—É–¥—É—â–∏–µ —Ä–∞–±–æ—á–∏–µ –≥—Ä—É–ø–ø—ã ‚Äî —Å—Ä–∞–∑—É —Å —Ñ–∞–π–ª–∞–º–∏-–∑–∞–≥–ª—É—à–∫–∞–º–∏:
    -1004000000001: "bryunsk.xlsx",
    -1004000000002: "orel.xlsx",
    -1004000000003: "objects.xlsx",
}

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS files(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            object_id TEXT, step TEXT, kind TEXT, file_id TEXT,
            author TEXT, created_at TEXT
        )""")
        conn.execute("""CREATE TABLE IF NOT EXISTS completed(
            object_id TEXT PRIMARY KEY,
            author TEXT,
            completed_at TEXT
        )""")
        conn.execute("""CREATE TABLE IF NOT EXISTS settings(
            key TEXT PRIMARY KEY,
            value TEXT
        )""")
        conn.commit()

def db_set(key, value):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("INSERT OR REPLACE INTO settings (key, value) VALUES (?, ?)", (key, value))
        conn.commit()

def db_get(key):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT value FROM settings WHERE key=?", (key,))
        r = cur.fetchone()
        return r[0] if r else None

def save_files(object_id, step, files, author):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, author, created_at) VALUES (?,?,?,?,?,?)",
            [(object_id, step, f["type"], f["file_id"], author, datetime.now().isoformat()) for f in files]
        )
        conn.commit()

def get_files(object_id):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT step, kind, file_id FROM files WHERE object_id=? ORDER BY id", (object_id,))
        data = {}
        for step, kind, file_id in cur.fetchall():
            data.setdefault(step, []).append({"type": kind, "file_id": file_id})
        return data

def delete_files_by_object(object_id):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("DELETE FROM files WHERE object_id=?", (object_id,))
        conn.commit()

def mark_completed(object_id: str, author: str):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute(
            "INSERT OR REPLACE INTO completed(object_id, author, completed_at) VALUES (?,?,?)",
            (object_id, author, datetime.now().isoformat())
        )
        conn.commit()

def list_completed():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT object_id, author, completed_at FROM completed ORDER BY object_id")
        return cur.fetchall()

# ========== –ó–ê–ì–†–£–ó–ö–ê/–°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö ==========
def load_settings():
    global TOPIC_MAP, EXCEL_MAP
    try:
        val1 = db_get("TOPIC_MAP")
        val2 = db_get("EXCEL_MAP")
        if val1:
            TOPIC_MAP = json.loads(val1)
        if val2:
            EXCEL_MAP = json.loads(val2)
        print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (TOPIC_MAP/EXCEL_MAP) –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ –ë–î.")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

def save_settings():
    # –í—Å–µ–≥–¥–∞ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º —Å –∫–ª—é—á–∞–º–∏-—Å—Ç—Ä–æ–∫–∞–º–∏ (–¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è)
    def stringify_keys(d):
        if isinstance(d, dict):
            return {str(k): stringify_keys(v) for k, v in d.items()}
        elif isinstance(d, list):
            return [stringify_keys(x) for x in d]
        else:
            return d

    db_set("TOPIC_MAP", json.dumps(stringify_keys(TOPIC_MAP), ensure_ascii=False))
    db_set("EXCEL_MAP", json.dumps(stringify_keys(EXCEL_MAP), ensure_ascii=False))

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class Upload(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class AddPhoto(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class Info(StatesGroup):
    waiting_object = State()

class AdminState(StatesGroup):
    waiting_command = State()
    waiting_route = State()
    waiting_route_del = State()
    waiting_excel = State()
    waiting_excel_del = State()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "üì∏ –û–±—â–∏–π –≤–∏–¥ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ –¥–æ –∏ –ø–æ—Å–ª–µ —Å—á—ë—Ç—á–∏–∫–∞",
    "üßæ –°—Ç–∞—Ä—ã–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω (–∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "üîí –§–æ—Ç–æ –ø–ª–æ–º–±—ã –Ω–∞ —Ñ–æ–Ω–µ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ —Å—á—ë—Ç—á–∏–∫–∞",
    "‚û°Ô∏è –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å—á—ë—Ç—á–∏–∫–µ",
    "üß± –ì–∞–∑–æ–ø—Ä–æ–≤–æ–¥ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∞–∂–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "üÜï –ù–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω (–∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "‚û°Ô∏è –°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "üé• –í–∏–¥–µ–æ –≥–µ—Ä–º–µ—Ç–∏—á–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
    "üî• –®–∏–ª—å–¥–∏–∫ –∫–æ—Ç–ª–∞ (–º–æ–¥–µ–ª—å –∏ –º–æ—â–Ω–æ—Å—Ç—å)",
    "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ"
]
MANDATORY_STEPS = set(UPLOAD_STEPS[:-1])  # –≤—Å–µ –∫—Ä–æ–º–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ"

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def admin_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ä—à—Ä—É—Ç—ã", callback_data="admin_routes")],
        [InlineKeyboardButton(text="üß≠ –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="admin_add_route")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç", callback_data="admin_del_route")],
        [InlineKeyboardButton(text="üìò –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å Excel", callback_data="admin_excel")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å Excel", callback_data="admin_add_excel")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å Excel", callback_data="admin_del_excel")],
    ])

def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/photo"), KeyboardButton(text="/addphoto"), KeyboardButton(text="/info")]],
        resize_keyboard=True
    )

def step_kb(step_name, has_files=False, user_id: int | None = None):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —à–∞–≥–æ–≤ —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ user_id"""
    cancel_cb = f"cancel_{user_id}" if user_id else "cancel"
    if has_files:
        buttons = [[
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data=f"save_{user_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_cb)
        ]]
    else:
        if step_name in MANDATORY_STEPS:
            buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_cb)]]
        else:
            buttons = [[
                InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skip_{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_cb)
            ]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def confirm_kb(prefix: str, user_id: int):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ user_id"""
    return InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_confirm_yes_{user_id}"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{prefix}_confirm_no_{user_id}")
    ]])

# ========== –•–ï–õ–ü–ï–†–´ ==========
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

def get_excel_filename_for_chat(chat_id: int) -> str | None:
    # –£—á–∏—Ç—ã–≤–∞–µ–º, —á—Ç–æ –∫–ª—é—á–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ –≤ JSON
    return (EXCEL_MAP.get(chat_id)
            or EXCEL_MAP.get(str(chat_id)))

def mapping_lookup(work_chat_id: int | str, work_thread_id: int | str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {"chat_id": ..., "thread_id": ...} –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞,
    —É—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ –∫–ª—é—á–∏ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–µ—Ä–∏–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —Å—Ç—Ä–æ–∫–∏.
    """
    # –ø—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø
    sub = TOPIC_MAP.get(work_chat_id) or TOPIC_MAP.get(str(work_chat_id))
    if not sub:
        return None
    m = sub.get(work_thread_id) or sub.get(str(work_thread_id))
    return m

def check_object_excel(chat_id: int, object_id: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ Excel, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫ –≥—Ä—É–ø–ø–µ chat_id"""
    filename = get_excel_filename_for_chat(chat_id)
    if not filename:
        return None, "‚ö†Ô∏è –ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    try:
        wb = openpyxl.load_workbook(filename, read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return True, str(row[1])
        return False, None
    except Exception as e:
        return None, f"{filename}: {e}"

def get_object_info(chat_id: int, object_id: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–±—ä–µ–∫—Ç–µ –∏–∑ Excel, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –∫ –≥—Ä—É–ø–ø–µ chat_id"""
    filename = get_excel_filename_for_chat(chat_id)
    if not filename:
        return {"error": "‚ö†Ô∏è –ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."}
    try:
        wb = openpyxl.load_workbook(filename, read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return {
                    "id": str(row[0]).strip(),
                    "consumer": str(row[1]) if len(row) > 1 else "–ù/–î",
                    "object": str(row[2]) if len(row) > 2 else "–ù/–î",
                    "address": str(row[3]) if len(row) > 3 else "–ù/–î",
                }
        return None
    except Exception as e:
        return {"error": f"{filename}: {e}"}

async def safe_call(coro, pause=0.25):
    try:
        res = await coro
        await asyncio.sleep(pause)
        return res
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        return await coro

# ========== KEEPALIVE ==========
async def keepalive():
    while True:
        try:
            async with aiohttp.ClientSession() as s:
                await s.get(WEBHOOK_URL)
        except:
            pass
        await asyncio.sleep(240)  # 4 –º–∏–Ω—É—Ç—ã

# ========== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==========
@router.message(Command("admin"))
async def admin_panel(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    await m.answer("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=admin_kb())
    await state.set_state(AdminState.waiting_command)

@router.callback_query(F.data == "admin_routes")
async def show_routes(c: CallbackQuery):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    text = "üìã <b>–ú–∞—Ä—à—Ä—É—Ç—ã WORK ‚Üí ARCHIVE</b>\n\n"
    for work_chat, threads in (TOPIC_MAP.items() if isinstance(TOPIC_MAP, dict) else []):
        text += f"<b>{work_chat}</b>:\n"
        if isinstance(threads, dict) and threads:
            for t_id, dest in threads.items():
                try:
                    dst = f"{dest['chat_id']}_{dest['thread_id']}"
                except:
                    dst = str(dest)
                text += f"  üß© {t_id} ‚Üí {dst}\n"
        else:
            text += "  (–ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ–º)\n"
        text += "\n"
    await c.message.edit_text(text or "‚Äî", parse_mode="HTML", reply_markup=admin_kb())
    await c.answer()

@router.callback_query(F.data == "admin_add_route")
async def add_route_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.edit_text(
        "üß≠ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç–∞ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n\n"
        "<code>work_chat_id work_thread_id archive_chat_id archive_thread_id</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>-1003281117256 101 -1003250982118 401</code>",
        parse_mode="HTML"
    )
    await state.set_state(AdminState.waiting_route)
    await c.answer()

@router.message(AdminState.waiting_route)
async def add_route_process(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        wc, wt, ac, at = m.text.strip().split()
        # —Ö—Ä–∞–Ω–∏–º –∫–ª—é—á–∏ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ ‚Äî —Ç–∞–∫ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –¥–ª—è JSON
        wc_s, wt_s = str(int(wc)), str(int(wt))
        ac_i, at_i = int(ac), int(at)
        TOPIC_MAP.setdefault(wc_s, {})[wt_s] = {"chat_id": ac_i, "thread_id": at_i}
        save_settings()
        await m.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –º–∞—Ä—à—Ä—É—Ç:\n{wc_s}_{wt_s} ‚Üí {ac_i}_{at_i}", reply_markup=admin_kb())
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb())
    await state.clear()

@router.callback_query(F.data == "admin_del_route")
async def del_route_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.edit_text(
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n\n"
        "<code>work_chat_id work_thread_id</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>-1003281117256 101</code>",
        parse_mode="HTML"
    )
    await state.set_state(AdminState.waiting_route_del)
    await c.answer()

@router.message(AdminState.waiting_route_del)
async def del_route_process(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        wc, wt = m.text.strip().split()
        wc_s, wt_s = str(int(wc)), str(int(wt))
        threads = TOPIC_MAP.get(wc_s)
        if not threads or wt_s not in threads:
            await m.answer("‚ùå –¢–∞–∫–æ–π –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=admin_kb())
        else:
            threads.pop(wt_s, None)
            if not threads:
                TOPIC_MAP.pop(wc_s, None)
            save_settings()
            await m.answer(f"‚úÖ –£–¥–∞–ª—ë–Ω –º–∞—Ä—à—Ä—É—Ç: {wc_s}_{wt_s}", reply_markup=admin_kb())
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb())
    await state.clear()

@router.callback_query(F.data == "admin_excel")
async def show_excel(c: CallbackQuery):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    text = "üìò <b>–ü—Ä–∏–≤—è–∑–∫–∏ Excel:</b>\n\n"
    for k, v in (EXCEL_MAP.items() if isinstance(EXCEL_MAP, dict) else []):
        text += f"{k} ‚Üí <code>{v}</code>\n"
    await c.message.edit_text(text or "‚Äî", parse_mode="HTML", reply_markup=admin_kb())
    await c.answer()

@router.callback_query(F.data == "admin_add_excel")
async def add_excel_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.edit_text(
        "üìé –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/–∑–∞–º–µ–Ω–∞ Excel:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n\n"
        "<code>chat_id filename.xlsx</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>-1003281117256 dagestan.xlsx</code>",
        parse_mode="HTML"
    )
    await state.set_state(AdminState.waiting_excel)
    await c.answer()

@router.message(AdminState.waiting_excel)
async def add_excel_process(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        chat_id_s, file = m.text.strip().split()
        chat_id_s = str(int(chat_id_s))
        EXCEL_MAP[chat_id_s] = file
        save_settings()
        await m.answer(f"‚úÖ –ü—Ä–∏–≤—è–∑–∞–Ω Excel: {chat_id_s} ‚Üí {file}", reply_markup=admin_kb())
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb())
    await state.clear()

@router.callback_query(F.data == "admin_del_excel")
async def del_excel_start(c: CallbackQuery, state: FSMContext):
    if not is_admin(c.from_user.id):
        await c.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await c.message.edit_text(
        "üóë –£–¥–∞–ª–µ–Ω–∏–µ Excel-–ø—Ä–∏–≤—è–∑–∫–∏:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π:\n\n"
        "<code>chat_id</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n<code>-1003281117256</code>",
        parse_mode="HTML"
    )
    await state.set_state(AdminState.waiting_excel_del)
    await c.answer()

@router.message(AdminState.waiting_excel_del)
async def del_excel_process(m: Message, state: FSMContext):
    if not is_admin(m.from_user.id):
        await m.answer("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    try:
        chat_id_s = str(int(m.text.strip()))
        if chat_id_s in EXCEL_MAP:
            EXCEL_MAP.pop(chat_id_s, None)
        elif int(chat_id_s) in EXCEL_MAP:
            EXCEL_MAP.pop(int(chat_id_s), None)
        else:
            await m.answer("‚ùå –ü—Ä–∏–≤—è–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=admin_kb())
            await state.clear()
            return
        save_settings()
        await m.answer(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø—Ä–∏–≤—è–∑–∫–∞ Excel –¥–ª—è {chat_id_s}", reply_markup=admin_kb())
    except Exception as e:
        await m.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}", reply_markup=admin_kb())
    await state.clear()

# ========== –ö–û–ú–ê–ù–î–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ==========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º —Å—á—ë—Ç—á–∏–∫–æ–≤ –≥–∞–∑–∞.\n\n"
        "üì∏ /photo ‚Äî –Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n"
        "üìé /addphoto ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ\n"
        "‚ÑπÔ∏è /info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç–∞–º\n"
        "‚öôÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–µ–º–∞—Ö —Ñ–æ—Ä—É–º–æ–≤ (—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—ã).",
        reply_markup=main_kb()
    )

@router.message(Command("photo"))
async def cmd_photo(m: Message, state: FSMContext):
    if not get_excel_filename_for_chat(m.chat.id):
        await m.answer("‚ö†Ô∏è –ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await state.set_state(Upload.waiting_object)
    await state.update_data(
        owner_id=m.from_user.id,
        work_chat_id=m.chat.id,
        work_thread_id=getattr(m, "message_thread_id", None),
    )
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("addphoto"))
async def cmd_addphoto(m: Message, state: FSMContext):
    if not get_excel_filename_for_chat(m.chat.id):
        await m.answer("‚ö†Ô∏è –ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await state.set_state(AddPhoto.waiting_object)
    await state.update_data(
        owner_id=m.from_user.id,
        work_chat_id=m.chat.id,
        work_thread_id=getattr(m, "message_thread_id", None),
    )
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ (–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤):")

@router.message(Command("info"))
async def cmd_info(m: Message, state: FSMContext):
    if not get_excel_filename_for_chat(m.chat.id):
        await m.answer("‚ö†Ô∏è –ö —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω Excel-–¥–æ–∫—É–º–µ–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    await state.set_state(Info.waiting_object)
    await state.update_data(
        owner_id=m.from_user.id,
        work_chat_id=m.chat.id,
        work_thread_id=getattr(m, "message_thread_id", None),
    )
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

@router.message(Command("result"))
async def cmd_result(m: Message):
    rows = list_completed()
    if not rows:
        await m.answer("üìã –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (—á–µ—Ä–µ–∑ /photo).", reply_markup=main_kb())
        return
    lines = ["‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã (—Å—Ü–µ–Ω–∞—Ä–∏–π /photo):"]
    for oid, author, ts in rows:
        try:
            ts_h = datetime.fromisoformat(ts).strftime("%d.%m.%Y %H:%M")
        except:
            ts_h = ts
        lines.append(f"‚Ä¢ #{oid} ‚Äî {author} ({ts_h})")
    await m.answer("\n".join(lines), reply_markup=main_kb())

# ========== –ü–†–û–í–ï–†–ö–ê –û–ë–™–ï–ö–¢–ê + –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï ==========
@router.message(Upload.waiting_object)
async def check_upload_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(m.chat.id, obj)
    if ok:
        await state.update_data(
            object=obj,
            object_name=name,
            step=0,
            steps=[{"name": s, "files": []} for s in UPLOAD_STEPS],
            owner_id=m.from_user.id,
            work_chat_id=m.chat.id,
            work_thread_id=getattr(m, "message_thread_id", None),
        )
        await state.set_state(Upload.confirming)
        await m.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç:\n\nüÜî {obj}\nüè∑Ô∏è {name}",
            reply_markup=confirm_kb("photo", m.from_user.id)
        )
    elif ok is False:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
    else:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        await state.clear()

@router.message(AddPhoto.waiting_object)
async def check_add_object(m: Message, state: FSMContext):
    obj = m.text.strip()
    ok, name = check_object_excel(m.chat.id, obj)
    if ok:
        await state.update_data(
            object=obj,
            object_name=name,
            files=[],
            owner_id=m.from_user.id,
            work_chat_id=m.chat.id,
            work_thread_id=getattr(m, "message_thread_id", None),
        )
        await state.set_state(AddPhoto.confirming)
        await m.answer(
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±—ä–µ–∫—Ç (–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤):\n\nüÜî {obj}\nüè∑Ô∏è {name}",
            reply_markup=confirm_kb("add", m.from_user.id)
        )
    elif ok is False:
        await m.answer(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
    else:
        await m.answer(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {name or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")
        await state.clear()

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /photo =====
@router.callback_query(F.data.startswith("photo_confirm_yes_"))
async def photo_confirm_yes(c: CallbackQuery, state: FSMContext):
    user_id = int(c.data.split("_")[-1])
    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    await state.set_state(Upload.uploading)
    data = await state.get_data()
    step0 = data["steps"][0]["name"]
    owner_id = data.get("owner_id")
    await c.message.edit_text(step0, reply_markup=step_kb(step0, user_id=owner_id))
    await state.update_data(last_msg=c.message.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ")

# ===== –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: /addphoto =====
@router.callback_query(F.data.startswith("add_confirm_yes_"))
async def add_confirm_yes(c: CallbackQuery, state: FSMContext):
    user_id = int(c.data.split("_")[-1])
    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    data = await state.get_data()
    obj = data["object"]
    owner_id = data.get("owner_id")
    await state.set_state(AddPhoto.uploading)
    await c.message.edit_text(
        f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ ‚Ññ{obj}.",
        reply_markup=step_kb('', False, user_id=owner_id)
    )
    await state.update_data(last_msg=c.message.message_id)
    await c.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ ‚úÖ")

# ====== –û–¢–ú–ï–ù–ê (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è) ======
@router.callback_query(F.data.startswith("cancel_"))
async def cancel_anywhere(c: CallbackQuery, state: FSMContext):
    try:
        user_id = int(c.data.split("_")[1])
    except:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    await state.clear()
    try:
        await c.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    except:
        pass
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ")

# ====== –û–¢–ú–ï–ù–ê –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è /photo ======
@router.callback_query(F.data.startswith("photo_confirm_no_"))
async def cancel_confirm_photo(c: CallbackQuery, state: FSMContext):
    try:
        user_id = int(c.data.split("_")[-1])
    except:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    await state.clear()
    try:
        await c.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    except:
        pass
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ")

# ====== –û–¢–ú–ï–ù–ê –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è /addphoto ======
@router.callback_query(F.data.startswith("add_confirm_no_"))
async def cancel_confirm_add(c: CallbackQuery, state: FSMContext):
    try:
        user_id = int(c.data.split("_")[-1])
    except:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    await state.clear()
    try:
        await c.message.edit_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=None)
    except:
        pass
    await c.answer("–û—Ç–º–µ–Ω–µ–Ω–æ ‚úÖ")

# ========== –ü–†–ò–Å–ú –§–ê–ô–õ–û–í ==========
async def _finalize_media_group_for_photo(m: Message, state: FSMContext, group_id: str):
    await asyncio.sleep(3.2)  # –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∞–ª—å–±–æ–º–∞
    data = await state.get_data()
    step_i = data["step"]
    steps = data["steps"]
    cur = steps[step_i]

    media_groups = data.get("media_groups", {})
    finalizing = set(data.get("finalizing_groups", []))

    if group_id not in finalizing:
        return

    group = media_groups.pop(group_id, [])
    finalizing.discard(group_id)

    if group:
        cur["files"].extend(group)

    last_msg_id = data.get("last_msg")
    if last_msg_id:
        try:
            await m.bot.delete_message(chat_id=m.chat.id, message_id=last_msg_id)
        except:
            pass
    owner_id = data.get("owner_id")
    msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=step_kb(cur["name"], has_files=True, user_id=owner_id))
    await state.update_data(
        steps=steps,
        last_msg=msg.message_id,
        media_groups=media_groups,
        finalizing_groups=list(finalizing)
    )

@router.message(Upload.uploading, F.photo | F.video | F.document)
async def handle_upload(m: Message, state: FSMContext):
    data = await state.get_data()
    step_i = data["step"]
    steps = data["steps"]
    cur = steps[step_i]

    if m.photo:
        file_info = {"type": "photo", "file_id": m.photo[-1].file_id}
    elif m.video:
        file_info = {"type": "video", "file_id": m.video.file_id}
    elif m.document:
        file_info = {"type": "document", "file_id": m.document.file_id}
    else:
        return

    if m.media_group_id:
        media_groups = data.get("media_groups", {})
        finalizing = set(data.get("finalizing_groups", []))
        gid = m.media_group_id

        media_groups.setdefault(gid, []).append(file_info)

        start_finalize = False
        if gid not in finalizing:
            finalizing.add(gid)
            start_finalize = True

        await state.update_data(media_groups=media_groups, finalizing_groups=list(finalizing))

        if start_finalize:
            asyncio.create_task(_finalize_media_group_for_photo(m, state, gid))
        return
    else:
        cur["files"].append(file_info)
        last_msg_id = data.get("last_msg")
        if last_msg_id:
            try:
                await m.bot.delete_message(chat_id=m.chat.id, message_id=last_msg_id)
            except:
                pass
        owner_id = data.get("owner_id")
        msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=step_kb(cur["name"], has_files=True, user_id=owner_id))
        await state.update_data(steps=steps, last_msg=msg.message_id)

async def _finalize_media_group_for_add(m: Message, state: FSMContext, group_id: str):
    await asyncio.sleep(3.2)
    data = await state.get_data()
    files = data.get("files", [])
    media_groups = data.get("media_groups", {})
    finalizing = set(data.get("finalizing_groups", []))

    if group_id not in finalizing:
        return

    group = media_groups.pop(group_id, [])
    finalizing.discard(group_id)

    if group:
        files.extend(group)

    last_msg_id = data.get("last_msg")
    if last_msg_id:
        try:
            await m.bot.delete_message(chat_id=m.chat.id, message_id=last_msg_id)
        except:
            pass
    owner_id = data.get("owner_id")
    msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=step_kb('', has_files=True, user_id=owner_id))
    await state.update_data(files=files, last_msg=msg.message_id, media_groups=media_groups, finalizing_groups=list(finalizing))

@router.message(AddPhoto.uploading, F.photo | F.video | F.document)
async def handle_addphoto_upload(m: Message, state: FSMContext):
    data = await state.get_data()
    files = data.get("files", [])

    if m.photo:
        file_info = {"type": "photo", "file_id": m.photo[-1].file_id}
    elif m.video:
        file_info = {"type": "video", "file_id": m.video.file_id}
    elif m.document:
        file_info = {"type": "document", "file_id": m.document.file_id}
    else:
        return

    if m.media_group_id:
        media_groups = data.get("media_groups", {})
        finalizing = set(data.get("finalizing_groups", []))
        gid = m.media_group_id

        media_groups.setdefault(gid, []).append(file_info)

        start_finalize = False
        if gid not in finalizing:
            finalizing.add(gid)
            start_finalize = True

        await state.update_data(media_groups=media_groups, finalizing_groups=list(finalizing))

        if start_finalize:
            asyncio.create_task(_finalize_media_group_for_add(m, state, gid))
        return
    else:
        files.append(file_info)
        last_msg_id = data.get("last_msg")
        if last_msg_id:
            try:
                await m.bot.delete_message(chat_id=m.chat.id, message_id=last_msg_id)
            except:
                pass
        owner_id = data.get("owner_id")
        msg = await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ", reply_markup=step_kb('', has_files=True, user_id=owner_id))
        await state.update_data(files=files, last_msg=msg.message_id)

# ========== CALLBACKS ==========
@router.callback_query(F.data.startswith("save_"))
async def step_save(c: CallbackQuery, state: FSMContext):
    user_id = int(c.data.split("_")[-1])
    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    current_state = await state.get_state()
    data = await state.get_data()
    author = c.from_user.full_name or c.from_user.username or str(c.from_user.id)
    owner_id = data.get("owner_id")

    # === /addphoto ===
    if current_state == AddPhoto.uploading.state:
        obj = data["object"]
        obj_name = data.get("object_name") or ""
        files = data.get("files", [])
        if files:
            save_files(obj, "üìé –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ", files, author)
            all_steps = get_files(obj)
            all_files_flat = [f for ff in all_steps.values() for f in ff]
            if all_files_flat:
                await post_archive_single_group(obj, obj_name, all_files_flat, author, data)
                delete_files_by_object(obj)
        await state.clear()
        try:
            await c.message.edit_text(f"‚úÖ –§–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É {obj} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        except:
            pass
        await c.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
        return

    # === /photo ===
    obj = data["object"]
    obj_name = data.get("object_name") or ""
    step_i = data["step"]
    steps = data["steps"]
    cur = steps[step_i]
    if cur["files"]:
        save_files(obj, cur["name"], cur["files"], author)
    step_i += 1
    await state.update_data(step=step_i, steps=steps)

    if step_i < len(steps):
        next_name = steps[step_i]["name"]
        try:
            await c.message.edit_text(next_name, reply_markup=step_kb(next_name, user_id=owner_id))
        except:
            pass
        await state.update_data(last_msg=c.message.message_id)
        await c.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
    else:
        all_steps = get_files(obj)
        all_files_flat = [f for ff in all_steps.values() for f in ff]
        if all_files_flat:
            await post_archive_single_group(obj, obj_name, all_files_flat, author, data)
            delete_files_by_object(obj)
        mark_completed(obj, author)
        try:
            await c.message.edit_text(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}. –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        except:
            pass
        await state.clear()
        await c.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")

@router.callback_query(F.data.startswith("skip_"))
async def step_skip(c: CallbackQuery, state: FSMContext):
    user_id = int(c.data.split("_")[-1])
    if c.from_user.id != user_id:
        await c.answer("–≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –Ω–µ –¥–ª—è –≤–∞—Å üòÖ", show_alert=True)
        return

    data = await state.get_data()
    obj = data["object"]
    obj_name = data.get("object_name") or ""
    author = c.from_user.full_name or c.from_user.username or str(c.from_user.id)
    step_i = data["step"] + 1
    steps = data["steps"]
    await state.update_data(step=step_i)

    if step_i >= len(steps):
        all_steps = get_files(obj)
        all_files_flat = [f for ff in all_steps.values() for f in ff]
        if all_files_flat:
            await post_archive_single_group(obj, obj_name, all_files_flat, author, data)
            delete_files_by_object(obj)
        mark_completed(obj, author)
        try:
            await c.message.edit_text(f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj}. –§–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤.")
        except:
            pass
        await state.clear()
        await c.answer("–ì–æ—Ç–æ–≤–æ ‚úÖ")
        return

    next_name = steps[step_i]["name"]
    owner_id = data.get("owner_id")
    try:
        await c.message.edit_text(next_name, reply_markup=step_kb(next_name, user_id=owner_id))
    except:
        pass
    await state.update_data(last_msg=c.message.message_id)
    await c.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ ‚è≠Ô∏è")

# ========== INFO ==========
@router.message(Info.waiting_object)
async def info_object(m: Message, state: FSMContext):
    objs = [x.strip() for x in m.text.split(",") if x.strip()]
    responses = []
    for obj in objs:
        info = get_object_info(m.chat.id, obj)
        if not info:
            responses.append(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Excel, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–º –∫ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
        elif "error" in info:
            responses.append(info["error"])
        else:
            responses.append(
                f"üìã –û–±—ä–µ–∫—Ç {info['id']}:\n"
                f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {info['consumer']}\n"
                f"üìç –û–±—ä–µ–∫—Ç: {info['object']}\n"
                f"üó∫ –ê–¥—Ä–µ—Å: {info['address']}\n"
            )
    await m.answer("\n\n".join(responses))
    await state.clear()

# ========== –û–¢–ü–†–ê–í–ö–ê –í –ê–†–•–ò–í –° –£–ß–Å–¢–û–ú –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò ==========
async def post_archive_single_group(object_id: str, object_name: str, files: list, author: str, state_data: dict):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞, –º–µ–¥–∏–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∞—Ä—Ö–∏–≤–Ω—É—é –≥—Ä—É–ø–ø—É –∏ —Ç–µ–º—É.
    –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –ø–æ TOPIC_MAP[work_chat_id][work_thread_id] (–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª—é—á–µ–π –µ—Å—Ç—å).
    """
    try:
        work_chat_id = state_data.get("work_chat_id")
        work_thread_id = state_data.get("work_thread_id")

        mapping = mapping_lookup(work_chat_id, work_thread_id)
        if not mapping or not mapping.get("chat_id") or not mapping.get("thread_id"):
            # –°–æ–æ–±—â–∏–º –ø—Ä—è–º–æ –≤ —Ä–∞–±–æ—á—É—é —Ç–µ–º—É, —á—Ç–æ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω
            try:
                await safe_call(bot.send_message(
                    chat_id=work_chat_id,
                    text=(
                        "‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∞—Ä—Ö–∏–≤–Ω–∞—è —Ç–µ–º–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.\n\n"
                        f"–ò—Å—Ç–æ—á–Ω–∏–∫: chat_id={work_chat_id}, thread_id={work_thread_id}\n"
                        f"–û–±—ä–µ–∫—Ç #{object_id} ¬´{object_name or ''}¬ª.\n"
                        f"–î–æ–±–∞–≤—å—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ TOPIC_MAP –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ."
                    ),
                    message_thread_id=work_thread_id
                ))
            except Exception as ee:
                print(f"[archive warn] cannot notify source chat: {ee}")
            return

        archive_chat_id = mapping["chat_id"]
        archive_thread_id = mapping["thread_id"]

        title = object_name or ""
        header = (
            f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\n"
            f"üè∑Ô∏è {title}\n"
            f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {author}\n"
            f"üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        await safe_call(bot.send_message(
            archive_chat_id,
            header,
            message_thread_id=archive_thread_id
        ))

        # –ú–µ–¥–∏–∞ –∞–ª—å–±–æ–º–∞–º–∏ –ø–æ 10
        batch = []
        for f in files:
            if f["type"] == "photo":
                batch.append(InputMediaPhoto(media=f["file_id"]))
            elif f["type"] == "video":
                batch.append(InputMediaVideo(media=f["file_id"]))
            elif f["type"] == "document":
                pass
            if len(batch) == 10:
                await safe_call(bot.send_media_group(
                    archive_chat_id, batch, message_thread_id=archive_thread_id
                ))
                batch = []
        if batch:
            await safe_call(bot.send_media_group(
                archive_chat_id, batch, message_thread_id=archive_thread_id
            ))

        # –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É
        for d in [x for x in files if x["type"] == "document"]:
            await safe_call(bot.send_document(
                archive_chat_id, d["file_id"], message_thread_id=archive_thread_id
            ))
    except Exception as e:
        print(f"[archive_single_group] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ –∞—Ä—Ö–∏–≤: {e}")

# ========== WEBHOOK / APP ==========
async def on_startup():
    init_db()
    load_settings()
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="result", description="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"),
    ])
    asyncio.create_task(keepalive())
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)
    print("üí° KEEPALIVE –∞–∫—Ç–∏–≤–µ–Ω –∫–∞–∂–¥—ã–µ 4 –º–∏–Ω—É—Ç—ã. –û—Å—Ç–∞–≤—å—Ç–µ –≤–Ω–µ—à–Ω–∏–π –ø–∏–Ω–≥ 5 –º–∏–Ω—É—Ç.")

async def handle_webhook(request):
    data = await request.json()
    from aiogram.types import Update
    update = Update(**data)
    asyncio.create_task(dp.feed_update(bot, update))
    return web.Response(text="OK")

async def health(request):
    return web.Response(text="ü§ñ OK")

def main():
    dp.include_router(router)
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health)
    app.on_startup.append(lambda a: asyncio.create_task(on_startup()))
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
