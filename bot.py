# bot.py
import os
import asyncio
from datetime import datetime
import openpyxl
import sqlite3
from contextlib import closing
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramRetryAfter
from aiohttp import web

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
WORK_CHAT_ID = int(os.environ.get("WORK_CHAT_ID", "0"))
ARCHIVE_CHAT_ID = int(os.environ.get("ARCHIVE_CHAT_ID", "0"))
WEBHOOK_URL = "https://telegram-bot-b6pn.onrender.com"
PORT = int(os.environ.get("PORT", 10000))
DB_PATH = "files.db"

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# ========== –ë–ê–ó–ê –î–ê–ù–ù–´–• ==========
def init_db():
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.execute("""CREATE TABLE IF NOT EXISTS files(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            object_id TEXT, step TEXT, kind TEXT, file_id TEXT,
            author TEXT, created_at TEXT
        )""")
        conn.commit()

def save_files(object_id, step, files, author):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        conn.executemany(
            "INSERT INTO files(object_id, step, kind, file_id, author, created_at) VALUES (?,?,?,?,?,?)",
            [(object_id, step, f["type"], f["file_id"], author, datetime.now().isoformat()) for f in files]
        )
        conn.commit()

def get_files(object_id):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT step, kind, file_id FROM files WHERE object_id=? ORDER BY id", (object_id,))
        data = {}
        for step, kind, file_id in cur.fetchall():
            data.setdefault(step, []).append({"type": kind, "file_id": file_id})
        return data

# ========== –°–û–°–¢–û–Ø–ù–ò–Ø ==========
class Upload(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class AddPhoto(StatesGroup):
    waiting_object = State()
    confirming = State()
    uploading = State()

class Download(StatesGroup):
    waiting_object = State()

class Info(StatesGroup):
    waiting_object = State()

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
UPLOAD_STEPS = [
    "–û–±—â–∏–π –≤–∏–¥ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ –¥–æ –∏ –ø–æ—Å–ª–µ —Å—á—ë—Ç—á–∏–∫–∞",
    "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
    "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ (–Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "–ü–ª–æ–º–±—ã –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "–°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å—á—ë—Ç—á–∏–∫–µ",
    "–ì–∞–∑–æ–ø—Ä–æ–≤–æ–¥ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∞–∂–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "–ù–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
    "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ (–Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "–°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å—á—ë—Ç—á–∏–∫–µ",
    "–®–∏–ª—å–¥–∏–∫ –∫–æ—Ç–ª–∞ (–º–æ–¥–µ–ª—å –∏ –º–æ—â–Ω–æ—Å—Ç—å)",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ"
]

MANDATORY_STEPS = {
    "–û–±—â–∏–π –≤–∏–¥ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ –¥–æ –∏ –ø–æ—Å–ª–µ —Å—á—ë—Ç—á–∏–∫–∞",
    "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
    "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ (–Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "–ü–ª–æ–º–±—ã –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "–°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞ –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å—á—ë—Ç—á–∏–∫–µ",
    "–ì–∞–∑–æ–ø—Ä–æ–≤–æ–¥ –ø–æ—Å–ª–µ –º–æ–Ω—Ç–∞–∂–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞",
    "–ù–æ–≤—ã–π —Å—á—ë—Ç—á–∏–∫ ‚Äî –æ–±—â–∏–π –∏ –∫—Ä—É–ø–Ω—ã–π –ø–ª–∞–Ω",
    "–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ (–Ω–æ–º–µ—Ä, –≥–æ–¥, –ø–æ–∫–∞–∑–∞–Ω–∏—è)",
    "–°—Ç—Ä–µ–ª–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å—á—ë—Ç—á–∏–∫–µ",
    "–®–∏–ª—å–¥–∏–∫ –∫–æ—Ç–ª–∞ (–º–æ–¥–µ–ª—å –∏ –º–æ—â–Ω–æ—Å—Ç—å)"
}

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_kb():
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="/photo"), KeyboardButton(text="/addphoto")]],
        resize_keyboard=True
    )

def step_kb(step_name, has_files=False):
    if has_files:
        buttons = [[
            InlineKeyboardButton(text="üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
        ]]
    else:
        if step_name in MANDATORY_STEPS:
            buttons = [[InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")]]
        else:
            buttons = [[
                InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")
            ]]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def confirm_kb(prefix: str):
    return InlineKeyboardMarkup(inline_keyboard=[[ 
        InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=f"{prefix}_confirm_yes"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"{prefix}_confirm_no"),
    ]])

# ========== –•–ï–õ–ü–ï–†–´ ==========
def is_from_work_topic(msg: Message) -> bool:
    return (msg.chat and msg.chat.id == WORK_CHAT_ID and getattr(msg, "is_topic_message", False))

async def safe_call(coro, pause=0.25):
    try:
        res = await coro
        await asyncio.sleep(pause)
        return res
    except TelegramRetryAfter as e:
        await asyncio.sleep(e.retry_after + 1)
        return await coro

def check_object_excel(object_id):
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return True, str(row[1])
        return False, None
    except Exception as e:
        return None, str(e)

def get_object_info(object_id):
    try:
        wb = openpyxl.load_workbook("objects.xlsx", read_only=True, data_only=True)
        sh = wb.active
        for row in sh.iter_rows(min_row=2, values_only=True):
            if str(row[0]).strip() == str(object_id):
                return {
                    "id": str(row[0]).strip(),
                    "consumer": str(row[1]) if len(row) > 1 else "–ù/–î",
                    "object": str(row[2]) if len(row) > 2 else "–ù/–î",
                    "address": str(row[3]) if len(row) > 3 else "–ù/–î",
                }
        return None
    except:
        return None

# ========== –ö–û–ú–ê–ù–î–´ ==========
@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º —Å—á—ë—Ç—á–∏–∫–æ–≤ –≥–∞–∑–∞.\n\n"
        "üì∏ –ò—Å–ø–æ–ª—å–∑—É–π /photo –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ /addphoto –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤.\n"
        "‚öôÔ∏è –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.",
        reply_markup=main_kb()
    )

@router.message(Command("photo"))
async def cmd_photo(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(Upload.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("addphoto"))
async def cmd_addphoto(m: Message, state: FSMContext):
    if not is_from_work_topic(m):
        await m.answer("üìç –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–π –≥—Ä—É–ø–ø–µ/—Ç–µ–º–µ.")
        return
    await state.set_state(AddPhoto.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("download"))
async def cmd_download(m: Message, state: FSMContext):
    await state.set_state(Download.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:")

@router.message(Command("info"))
async def cmd_info(m: Message, state: FSMContext):
    await state.set_state(Info.waiting_object)
    await m.answer("üìù –í–≤–µ–¥–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")

@router.message(Info.waiting_object)
async def info_object(m: Message, state: FSMContext):
    objs = [x.strip() for x in m.text.split(",") if x.strip()]
    responses = []
    for obj in objs:
        info = get_object_info(obj)
        if not info:
            responses.append(f"‚ùå –û–±—ä–µ–∫—Ç {obj} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ objects.xlsx")
        else:
            responses.append(
                f"üìã –û–±—ä–µ–∫—Ç {info['id']}:\n"
                f"üè¢ –ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—å: {info['consumer']}\n"
                f"üìç –û–±—ä–µ–∫—Ç: {info['object']}\n"
                f"üó∫ –ê–¥—Ä–µ—Å: {info['address']}\n"
            )
    await m.answer("\n\n".join(responses))
    await state.clear()

# === /result —Ç–µ–ø–µ—Ä—å –∏–∑ –±–∞–∑—ã ===
@router.message(Command("result"))
async def cmd_result(m: Message):
    with closing(sqlite3.connect(DB_PATH)) as conn:
        cur = conn.execute("SELECT object_id, COUNT(*) FROM files GROUP BY object_id ORDER BY object_id")
        rows = cur.fetchall()

    if not rows:
        await m.answer("üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=main_kb())
        return

    lines = ["‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏ (–≤—Å–µ–≥–æ):"]
    for oid, cnt in rows:
        lines.append(f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {cnt} —Ñ–∞–π–ª–æ–≤")

    await m.answer("\n".join(lines), reply_markup=main_kb())

# ======== –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏—ë–º–∞ —Ñ–æ—Ç–æ, —à–∞–≥–∏, callbacks –∏ –∞—Ä—Ö–∏–≤ ========
# (–æ—Å—Ç–∞—ë—Ç—Å—è –∫–∞–∫ –≤ —Ç–≤–æ—ë–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–æ–¥–µ ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ save_files –∏ post_archive_single_group)

# ========== WEBHOOK ==========
async def on_startup():
    init_db()
    webhook_url = f"{WEBHOOK_URL}/{TOKEN}"
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_webhook(webhook_url)
    await bot.set_my_commands([
        BotCommand(command="start", description="–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand(command="photo", description="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        BotCommand(command="addphoto", description="–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ"),
        BotCommand(command="download", description="–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand(command="result", description="–ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏"),
        BotCommand(command="info", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ")
    ])
    print("‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:", webhook_url)

async def handle_webhook(request):
    data = await request.json()
    from aiogram.types import Update
    update = Update(**data)
    asyncio.create_task(dp.feed_update(bot, update))
    return web.Response(text="OK")

async def health(request):
    return web.Response(text="ü§ñ OK")

def main():
    dp.include_router(router)
    app = web.Application()
    app.router.add_post(f"/{TOKEN}", handle_webhook)
    app.router.add_get("/", health)
    app.on_startup.append(lambda a: asyncio.create_task(on_startup()))
    web.run_app(app, host="0.0.0.0", port=PORT)

if __name__ == "__main__":
    main()
