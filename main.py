import os
import telebot
from flask import Flask, request
import pandas as pd

TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –æ–±—ä–µ–∫—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
OBJECTS_FILE = "objects.xlsx"
df_objects = pd.read_excel(OBJECTS_FILE)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /objects –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_waiting_for_objects = set()

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–±—ä–µ–∫—Ç–∞–º–∏. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /objects —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö.")

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.reply_to(message, ("–ö–æ–º–∞–Ω–¥—ã:\n"
                          "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
                          "/help - –ø–æ–º–æ—â—å\n"
                          "/objects - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ–±—ä–µ–∫—Ç–∞–º (–Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"))

@bot.message_handler(commands=['objects'])
def objects_command(message):
    user_waiting_for_objects.add(message.from_user.id)
    bot.reply_to(message, "–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5,7,10")

@bot.message_handler(func=lambda message: message.from_user.id in user_waiting_for_objects)
def send_objects_info(message):
    user_waiting_for_objects.discard(message.from_user.id)
    text = message.text.strip()
    # –û–∂–∏–¥–∞–µ–º –Ω–æ–º–µ—Ä–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –æ—á–∏—â–∞–µ–º
    try:
        nums = [int(x.strip()) for x in text.split(",") if x.strip().isdigit()]
    except Exception:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
        return
    
    if not nums:
        bot.reply_to(message, "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /objects.")
        return
    
    for num in nums:
        obj_row = df_objects[df_objects.iloc[:,0] == num]
        if obj_row.empty:
            bot.send_message(message.chat.id, f"–û–±—ä–µ–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º {num} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            continue
        # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º –ø–µ—Ä–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü - –Ω–æ–º–µ—Ä, –≤—Ç–æ—Ä–æ–π - –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, —Ç—Ä–µ—Ç–∏–π - –∞–¥—Ä–µ—Å
        obj_name = obj_row.iloc[0,1]
        obj_address = obj_row.iloc[0,2]
        bot.send_message(message.chat.id, f"–û–±—ä–µ–∫—Ç ‚Ññ{num}\n–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {obj_name}\n–ê–¥—Ä–µ—Å: {obj_address}")

@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
