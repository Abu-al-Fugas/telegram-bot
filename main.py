import os
import json
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
GOOGLE_SHEETS_KEY = os.environ.get("GOOGLE_SHEETS_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_state = {}
processed_objects = set()
objects_data = {}

# ========== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó EXCEL ==========
def load_objects_from_excel():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –æ–±—ä–µ–∫—Ç—ã –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    global objects_data
    try:
        workbook = openpyxl.load_workbook('objects.xlsx')
        sheet = workbook.active
        
        objects_dict = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] is not None:
                obj_number = str(row[0]).strip()
                objects_dict[obj_number] = {
                    'name': row[1] or '',
                    'address': row[2] or '',
                    'status': '–ù–µ –Ω–∞—á–∞—Ç'
                }
        return objects_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return {}

# ========== GOOGLE SHEETS ==========
def init_google_sheets():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets"""
    try:
        if GOOGLE_SHEETS_KEY:
            creds_dict = json.loads(GOOGLE_SHEETS_KEY)
            creds = Credentials.from_service_account_info(creds_dict)
            client = gspread.authorize(creds)
            return client
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
        return None

def update_google_sheets(object_id, status="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω"):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Google Sheets - –ø–æ–º–µ—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
    try:
        client = init_google_sheets()
        if not client:
            return False
        
        sheet = client.open("–û–±—ä–µ–∫—Ç—ã –ò–ü–£–ì").sheet1
        all_data = sheet.get_all_values()
        
        for i, row in enumerate(all_data, start=1):
            if i == 1:
                continue
                
            if row and str(row[0]).strip() == str(object_id):
                sheet.update_cell(i, 4, status)
                sheet.format(f"D{i}", {
                    "backgroundColor": {
                        "red": 0.7,
                        "green": 0.9, 
                        "blue": 0.7
                    }
                })
                return True
        return False
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
        return False

# ========== –ê–†–•–ò–í –í TELEGRAM ==========
def save_to_archive(object_id, files_count, file_types):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∞—Ä—Ö–∏–≤–Ω—ã–π —á–∞—Ç"""
    try:
        type_description = []
        if file_types.get('photos', 0) > 0:
            type_description.append(f"üì∏ {file_types['photos']} —Ñ–æ—Ç–æ")
        if file_types.get('documents', 0) > 0:
            type_description.append(f"üìÑ {file_types['documents']} –¥–æ–∫.")
        if file_types.get('videos', 0) > 0:
            type_description.append(f"üé• {file_types['videos']} –≤–∏–¥–µ–æ")
        
        files_desc = " + ".join(type_description) if type_description else "—Ñ–∞–π–ª—ã"
        
        message_text = f"""
üíæ –û–ë–™–ï–ö–¢ #{object_id}
üìÅ {files_count} {files_desc}
üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        bot.send_message(ARCHIVE_CHAT_ID, message_text.strip())
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∞—Ä—Ö–∏–≤: {e}")
        return False

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–ê ==========
def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/info'),
        KeyboardButton('/upload'),
        KeyboardButton('/download'), 
        KeyboardButton('/processed'),
        KeyboardButton('/help')
    )
    return keyboard

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞  
/download - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
/processed - –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
    """
    bot.reply_to(message, help_text.strip(), reply_markup=create_main_keyboard())

@bot.message_handler(commands=['info'])
def ask_info_object(message):
    msg = bot.reply_to(message, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:", reply_markup=create_main_keyboard())
    bot.register_next_step_handler(msg, process_info_object)

def process_info_object(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
        return
        
    object_id = message.text.strip()
    obj_info = objects_data.get(object_id)
    
    if obj_info:
        is_processed = object_id in processed_objects
        status_icon = "‚úÖ" if is_processed else "‚è≥"
        
        response = f"""
{status_icon} –û–ë–™–ï–ö–¢ #{object_id}
üè¢ {obj_info['name']}
üìç {obj_info['address']}
üìä –°—Ç–∞—Ç—É—Å: {obj_info['status']}
üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω: {"–î–∞" if is_processed else "–ù–µ—Ç"}
        """
        bot.reply_to(message, response.strip(), reply_markup=create_main_keyboard())
    else:
        bot.reply_to(message, f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['upload'])
def ask_upload_object(message):
    msg = bot.reply_to(message, "üì§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", reply_markup=create_main_keyboard())
    bot.register_next_step_handler(msg, process_upload_object)

def process_upload_object(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
        return
        
    object_id = message.text.strip()
    obj_info = objects_data.get(object_id)
    
    if not obj_info:
        bot.reply_to(message, f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", reply_markup=create_main_keyboard())
        return
    
    user_state[message.chat.id] = {
        'object_id': object_id,
        'step': 'waiting_files',
        'files': [],
        'file_types': {'photos': 0, 'documents': 0, 'videos': 0}
    }
    
    bot.reply_to(message, f"""
üìé –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}

–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –ø–æ –æ–¥–Ω–æ–º—É –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ä–∞–∑—É.
–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –≤–≤–µ–¥–∏—Ç–µ /done
    """.strip())

@bot.message_handler(content_types=['photo', 'document', 'video'])
def handle_files(message):
    chat_id = message.chat.id
    
    if chat_id not in user_state or user_state[chat_id]['step'] != 'waiting_files':
        return
    
    object_id = user_state[chat_id]['object_id']
    files = user_state[chat_id]['files']
    file_types = user_state[chat_id]['file_types']
    
    file_info = {}
    
    if message.photo:
        file_id = message.photo[-1].file_id
        file_info = {'type': 'photo', 'file_id': file_id}
        file_types['photos'] += 1
    elif message.document:
        file_id = message.document.file_id
        file_info = {'type': 'document', 'file_id': file_id, 'name': message.document.file_name}
        file_types['documents'] += 1
    elif message.video:
        file_id = message.video.file_id
        file_info = {'type': 'video', 'file_id': file_id}
        file_types['videos'] += 1
    
    files.append(file_info)
    total_files = len(files)
    bot.reply_to(message, f"‚úÖ –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –í—Å–µ–≥–æ: {total_files} —Ñ–∞–π–ª–æ–≤\n–í–≤–µ–¥–∏—Ç–µ /done –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ")

@bot.message_handler(commands=['done'])
def finish_upload(message):
    chat_id = message.chat.id
    
    if chat_id not in user_state or user_state[chat_id]['step'] != 'waiting_files':
        bot.reply_to(message, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤", reply_markup=create_main_keyboard())
        return
    
    object_id = user_state[chat_id]['object_id']
    files = user_state[chat_id]['files']
    file_types = user_state[chat_id]['file_types']
    
    if not files:
        bot.reply_to(message, "‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞", reply_markup=create_main_keyboard())
        del user_state[chat_id]
        return
    
    save_to_archive(object_id, len(files), file_types)
    update_google_sheets(object_id)
    processed_objects.add(object_id)
    del user_state[chat_id]
    
    bot.reply_to(message, f"""
‚úÖ –£–°–ü–ï–•!

üìÅ –î–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:
üì∏ –§–æ—Ç–æ: {file_types['photos']}
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: {file_types['documents']}  
üé• –í–∏–¥–µ–æ: {file_types['videos']}
üìä –í—Å–µ–≥–æ: {len(files)} —Ñ–∞–π–ª–æ–≤

üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∞—Ä—Ö–∏–≤
üìà –û–±—ä–µ–∫—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
    """.strip(), reply_markup=create_main_keyboard())

@bot.message_handler(commands=['download'])
def ask_download_object(message):
    msg = bot.reply_to(message, "üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", reply_markup=create_main_keyboard())
    bot.register_next_step_handler(msg, process_download_object)

def process_download_object(message):
    if message.text.startswith('/'):
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∞ –Ω–µ –∫–æ–º–∞–Ω–¥—É")
        return
        
    object_id = message.text.strip()
    
    if object_id not in processed_objects:
        bot.reply_to(message, f"‚ùå –î–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ", reply_markup=create_main_keyboard())
        return
    
    archive_info = f"""
üìÅ –§–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ #{object_id} –≤ –∞—Ä—Ö–∏–≤–µ:

üíæ –ê—Ä—Ö–∏–≤–Ω—ã–π —á–∞—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
üïí –û–±—ä–µ–∫—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {datetime.now().strftime('%d.%m.%Y %H:%M')}
üìã –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

‚úÖ –û–±—ä–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ
    """
    
    bot.reply_to(message, archive_info.strip(), reply_markup=create_main_keyboard())

@bot.message_handler(commands=['processed'])
def show_processed_objects(message):
    if not processed_objects:
        bot.reply_to(message, "üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", reply_markup=create_main_keyboard())
        return
    
    objects_info = []
    for obj_id in sorted(processed_objects):
        obj_info = objects_data.get(obj_id)
        if obj_info:
            objects_info.append(f"‚Ä¢ #{obj_id} - {obj_info['name']}")
        else:
            objects_info.append(f"‚Ä¢ #{obj_id} - –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç")
    
    objects_list = "\n".join(objects_info)
    
    bot.reply_to(message, f"""
üìä –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –û–ë–™–ï–ö–¢–´:

{objects_list}

–í—Å–µ–≥–æ: {len(processed_objects)} –æ–±—ä–µ–∫—Ç–æ–≤
    """.strip(), reply_markup=create_main_keyboard())

@bot.message_handler(func=lambda message: True)
def handle_other_messages(message):
    if not message.text.startswith('/'):
        return
    bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥", reply_markup=create_main_keyboard())

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    
    objects_data = load_objects_from_excel()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects_data)}")
    
    sheets_client = init_google_sheets()
    if sheets_client:
        print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
