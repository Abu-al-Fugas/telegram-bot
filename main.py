import os
import json
import openpyxl
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from flask import Flask, request

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –§–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
OBJECTS_EXCEL_FILE = 'objects.xlsx'
OBJECTS_DATA_FILE = 'data/objects_data.json'
USER_STATE_FILE = 'data/user_state.json'

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –∏–∑ Excel —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º openpyxl
def load_objects_from_excel():
    try:
        workbook = openpyxl.load_workbook(OBJECTS_EXCEL_FILE)
        sheet = workbook.active
        
        objects_dict = {}
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É) –∏ —á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] is None:  # –ï—Å–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                continue
            obj_number = str(row[0]).strip()
            objects_dict[obj_number] = {
                'name': row[1] or '',
                'address': row[2] or '',
                'status': '–ù–µ –Ω–∞—á–∞—Ç',  # –°—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                'photos': {},          # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id —Ñ–æ—Ç–æ
                'acts': {},            # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è file_id –∞–∫—Ç–æ–≤
                'comments': []         # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤/–ø—Ä–æ–±–ª–µ–º
            }
        return objects_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        return {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –æ–±—ä–µ–∫—Ç–∞–º
def load_objects_data():
    if os.path.exists(OBJECTS_DATA_FILE):
        with open(OBJECTS_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö
def save_objects_data(data):
    os.makedirs('data', exist_ok=True)
    with open(OBJECTS_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –†–∞–±–æ—Ç–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤)
def load_user_state():
    if os.path.exists(USER_STATE_FILE):
        with open(USER_STATE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_user_state(data):
    os.makedirs('data', exist_ok=True)
    with open(USER_STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
objects_db = load_objects_from_excel()
objects_data = load_objects_data()
user_state = load_user_state()

# –û–±–Ω–æ–≤–ª—è–µ–º objects_data –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel, –µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
for obj_id, obj_info in objects_db.items():
    if obj_id not in objects_data:
        objects_data[obj_id] = obj_info
save_objects_data(objects_data)

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('/objects'), KeyboardButton('/report_object'))
    keyboard.add(KeyboardButton('/help'))
    return keyboard

def object_status_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–í —Ä–∞–±–æ—Ç–µ'), KeyboardButton('–ü—Ä–æ–±–ª–µ–º–∞'))
    keyboard.add(KeyboardButton('–ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏'))
    return keyboard

def cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    return keyboard

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£–ì.\n"
                     "–Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –∏ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç.",
                     reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = """
üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

/objects - –ù–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±—ä–µ–∫—Ç–µ –ø–æ –Ω–æ–º–µ—Ä—É. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 7, 10).

/report_object - –ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å–¥–∞—á–∏ –æ–±—ä–µ–∫—Ç–∞. –ë–æ—Ç –∑–∞–ø—Ä–æ—Å–∏—Ç –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —Ñ–æ—Ç–æ –∏ –¥—Ä—É–≥—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

*–î–ª—è –º–æ–Ω—Ç–∞–∂–Ω–∏–∫–æ–≤:*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /report_object, —á—Ç–æ–±—ã –æ—Ç—á–∏—Ç–∞—Ç—å—Å—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ. –ë–æ—Ç –ø—Ä–æ–≤–µ–¥–µ—Ç –≤–∞—Å –ø–æ –≤—Å–µ–º —à–∞–≥–∞–º.
    """
    bot.send_message(message.chat.id, help_text, reply_markup=main_menu_keyboard())

@bot.message_handler(commands=['objects'])
def ask_object_number(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –æ–±—ä–µ–∫—Ç–∞(–æ–≤) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:", reply_markup=cancel_keyboard())
    bot.register_next_step_handler(msg, process_object_numbers)

def process_object_numbers(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    numbers = [num.strip() for num in message.text.split(',')]
    response = ""

    for num in numbers:
        if num in objects_data:
            obj = objects_data[num]
            status_emoji = {
                '–ù–µ –Ω–∞—á–∞—Ç': '‚ö™',
                '–í —Ä–∞–±–æ—Ç–µ': 'üü°',
                '–ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏': 'üü†',
                '–ü—Ä–∏–Ω—è—Ç': 'üü¢',
                '–ü—Ä–æ–±–ª–µ–º–∞': 'üî¥'
            }.get(obj['status'], '‚ö™')

            response += f"""
{status_emoji} *–û–±—ä–µ–∫—Ç ‚Ññ{num}*
*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {obj['name']}
*–ê–¥—Ä–µ—Å:* {obj['address']}
*–°—Ç–∞—Ç—É—Å:* {obj['status']}
"""
            if obj.get('comments'):
                response += f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:* {', '.join(obj['comments'])}\n"
            response += "---\n"
        else:
            response += f"‚ùå –û–±—ä–µ–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º {num} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n---\n"

    bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=main_menu_keyboard())

# ========== –ü–†–û–¶–ï–°–° –°–î–ê–ß–ò –û–ë–™–ï–ö–¢–ê ==========
@bot.message_handler(commands=['report_object'])
def start_object_report(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞:", reply_markup=cancel_keyboard())
    bot.register_next_step_handler(msg, process_report_object_number)

def process_report_object_number(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    object_id = message.text.strip()
    if object_id not in objects_data:
        msg = bot.send_message(message.chat.id, "–û–±—ä–µ–∫—Ç —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:", reply_markup=cancel_keyboard())
        bot.register_next_step_handler(msg, process_report_object_number)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state[str(message.chat.id)] = {'object_id': object_id, 'step': 'waiting_photos'}
    save_user_state(user_state)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
    photo_requirements = """
üì∏ *–®–ê–ì 1: –°–î–ï–õ–ê–ô–¢–ï –§–û–¢–û*

–î–ª—è –ø—Ä–∏–µ–º–∫–∏ —Ä–∞–±–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (—Å–æ–≥–ª–∞—Å–Ω–æ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º—É –∑–∞–¥–∞–Ω–∏—é):

1.  –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£–ì *–¥–æ* –º–æ–Ω—Ç–∞–∂–∞.
2.  –û–±—â–∏–π –≤–∏–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –≥–∞–∑–∞.
3.  –ü–ª–æ–º–±—ã –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å—á–µ—Ç—á–∏–∫–µ (–Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã).
4.  –û–±—â–∏–π –≤–∏–¥ –ò–ü–£–ì *–ø–æ—Å–ª–µ* –º–æ–Ω—Ç–∞–∂–∞.
5.  –ü–ª–æ–º–±—ã –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞ –Ω–∞ –Ω–æ–≤–æ–º –ò–ü–£–ì (–Ω–æ–º–µ—Ä–∞, –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω —Å–∞–º –ò–ü–£–ì).
6.  –£—á–∞—Å—Ç–æ–∫ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ –ø–µ—Ä–µ–¥ –ò–ü–£–ì —Å –Ω–∞–Ω–µ—Å–µ–Ω–Ω–æ–π —Å—Ç—Ä–µ–ª–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞.
7.  –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ (—à–∏–ª—å–¥–∏–∫) –ò–ü–£–ì –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–µ–Ω –∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä).

*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.*
    """
    msg = bot.send_message(message.chat.id, photo_requirements, parse_mode='Markdown', reply_markup=cancel_keyboard())
    bot.register_next_step_handler(msg, process_report_photos)

def process_report_photos(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report_object.", reply_markup=main_menu_keyboard())
        return

    if message.text and message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏—Å–ª–∞–ª–∏ —Ñ–æ—Ç–æ
    if message.photo is None:
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.", reply_markup=cancel_keyboard())
        bot.register_next_step_handler(msg, process_report_photos)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    object_id = user_state[user_id]['object_id']
    if 'photos' not in objects_data[object_id]:
        objects_data[object_id]['photos'] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ (—Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ) —Ñ–æ—Ç–æ
    photo_id = message.photo[-1].file_id
    objects_data[object_id]['photos'][f'photo_{len(objects_data[object_id]["photos"])}'] = photo_id

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    user_state[user_id]['step'] = 'waiting_status'
    save_user_state(user_state)

    msg = bot.send_message(message.chat.id, "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω—ã. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞:", reply_markup=object_status_keyboard())
    bot.register_next_step_handler(msg, process_report_status)

def process_report_status(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /report_object.", reply_markup=main_menu_keyboard())
        return

    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    object_id = user_state[user_id]['object_id']
    new_status = message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    objects_data[object_id]['status'] = new_status
    save_objects_data(objects_data)

    # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å "–ü—Ä–æ–±–ª–µ–º–∞", –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    if new_status == '–ü—Ä–æ–±–ª–µ–º–∞':
        user_state[user_id]['step'] = 'waiting_problem_comment'
        save_user_state(user_state)
        msg = bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:", reply_markup=cancel_keyboard())
        bot.register_next_step_handler(msg, process_problem_comment)
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—á–µ—Ç
        finalize_object_report(message.chat.id, user_id, object_id)

def process_problem_comment(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        bot.send_message(message.chat.id, "–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.", reply_markup=main_menu_keyboard())
        return

    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        bot.send_message(message.chat.id, "–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
        return

    object_id = user_state[user_id]['object_id']
    if 'comments' not in objects_data[object_id]:
        objects_data[object_id]['comments'] = []
    objects_data[object_id]['comments'].append(message.text)
    save_objects_data(objects_data)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—á–µ—Ç
    finalize_object_report(message.chat.id, user_id, object_id)

def finalize_object_report(chat_id, user_id, object_id):
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å, —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    del user_state[user_id]
    save_user_state(user_state)

    obj_name = objects_data[object_id]['name']
    status = objects_data[object_id]['status']

    bot.send_message(chat_id,
                     f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É *{object_id} - {obj_name}* —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n"
                     f"–°—Ç–∞—Ç—É—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: *{status}*",
                     parse_mode='Markdown',
                     reply_markup=main_menu_keyboard())

    # –û–ü–û–í–ï–©–ï–ù–ò–ï –î–õ–Ø –û–§–ò–°–ê/–†–£–ö–û–í–û–î–ò–¢–ï–õ–Ø (–º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —á–∞—Ç)
    # admin_chat_id = os.environ.get("ADMIN_CHAT_ID")
    # if admin_chat_id:
    #     bot.send_message(admin_chat_id, f"üì¢ –ù–æ–≤—ã–π –æ—Ç—á–µ—Ç –ø–æ –æ–±—ä–µ–∫—Ç—É {object_id}. –°—Ç–∞—Ç—É—Å: {status}")

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê –ò –ù–ï–ò–ó–í–ï–°–¢–ù–´–• –ö–û–ú–ê–ù–î ==========
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text in ['–í —Ä–∞–±–æ—Ç–µ', '–ü—Ä–æ–±–ª–µ–º–∞', '–ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏']:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ç—É—Å–∞ –≤–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–±—ä–µ–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /report_object", reply_markup=main_menu_keyboard())
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.", reply_markup=main_menu_keyboard())

# ========== WEBHOOK –õ–û–ì–ò–ö–ê (–¥–ª—è Render) ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º –ò–ü–£–ì —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    os.makedirs('data', exist_ok=True)

    bot.remove_webhook()
    # ‚ö†Ô∏è –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® URL –†ENDER
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
