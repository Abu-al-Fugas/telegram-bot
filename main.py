import os
import telebot
from telebot.types import (
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument
)
from flask import Flask, request
from datetime import datetime

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# ========== –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ==========
user_state = {}
objects_data = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== –•–ï–õ–ü–ï–†–´ ==========
def make_key(chat_id, thread_id, user_id):
    return (chat_id, thread_id, user_id)

def upload_keyboard(step_name):
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton("‚úÖ OK", callback_data="upload_ok")]
    if step_name not in MANDATORY_STEPS:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton("‚ùå Cancel", callback_data="upload_cancel"))
    kb.add(*buttons)
    return kb

def send_message(chat_id, text, reply_markup=None, thread_id=None):
    try:
        return bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

def delete_message(chat_id, msg_id):
    try:
        bot.delete_message(chat_id, msg_id)
    except Exception:
        pass

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=["start"])
def start_message(message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/photo ‚Äì –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/addphoto ‚Äì –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É\n"
        "/download ‚Äì —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞\n"
        "/result ‚Äì —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"
    )
    send_message(message.chat.id, text, thread_id=message.message_thread_id)

@bot.message_handler(commands=["photo"])
def cmd_photo(message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_object"}
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏:", thread_id=message.message_thread_id)

@bot.message_handler(commands=["addphoto"])
def cmd_addphoto(message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    user_state[key] = {"command": "await_addphoto_object"}
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ:", thread_id=message.message_thread_id)

@bot.message_handler(commands=["download"])
def cmd_download(message):
    if not objects_data:
        send_message(message.chat.id, "üìÇ –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.", thread_id=message.message_thread_id)
        return
    text = "üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n" + "\n".join([f"‚Ä¢ {oid} ‚Äì {len(data['steps'])} —à–∞–≥–æ–≤" for oid, data in objects_data.items()])
    send_message(message.chat.id, text, thread_id=message.message_thread_id)

@bot.message_handler(commands=["result"])
def cmd_result(message):
    if not objects_data:
        send_message(message.chat.id, "üìã –ù–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫.", thread_id=message.message_thread_id)
        return
    text = "‚úÖ –ó–∞–≤–µ—Ä—à—ë–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n"
    for oid, data in objects_data.items():
        total_files = sum(len(s["files"]) for s in data["steps"])
        text += f"‚Ä¢ –û–±—ä–µ–∫—Ç {oid}: {total_files} —Ñ–∞–π–ª–æ–≤\n"
    send_message(message.chat.id, text, thread_id=message.message_thread_id)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@bot.message_handler(func=lambda m: True, content_types=["text"])
def handle_text(message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    state = user_state.get(key)

    if not state:
        return

    # –Ω–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏
    if state["command"] == "await_object":
        object_id = message.text.strip()
        steps = [{"name": s, "files": []} for s in UPLOAD_STEPS]
        user_state[key] = {
            "command": "upload_steps",
            "object_id": object_id,
            "steps": steps,
            "step_index": 0,
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id
        }
        send_upload_step(key)

    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É
    elif state["command"] == "await_addphoto_object":
        object_id = message.text.strip()
        user_state[key] = {
            "command": "add_photos",
            "object_id": object_id,
            "files": [],
            "chat_id": message.chat.id,
            "thread_id": message.message_thread_id
        }
        send_message(message.chat.id, f"üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å.", 
                     reply_markup=InlineKeyboardMarkup().add(
                         InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="addphoto_done"),
                         InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="upload_cancel")
                     ), thread_id=message.message_thread_id)

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@bot.message_handler(content_types=["photo", "document", "video"])
def handle_files(message):
    key = make_key(message.chat.id, message.message_thread_id, message.from_user.id)
    state = user_state.get(key)
    if not state:
        return

    if state["command"] == "upload_steps":
        step = state["steps"][state["step_index"]]
        file_info = {}
        if message.photo:
            file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
        elif message.document:
            file_info = {"type": "document", "file_id": message.document.file_id}
        elif message.video:
            file_info = {"type": "video", "file_id": message.video.file_id}
        step["files"].append(file_info)
        # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
        if "last_message_id" in state:
            delete_message(state["chat_id"], state["last_message_id"])
        msg = send_message(state["chat_id"], "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                           reply_markup=upload_keyboard(step["name"]), 
                           thread_id=state["thread_id"])
        state["last_message_id"] = msg.message_id

    elif state["command"] == "add_photos":
        file_info = {}
        if message.photo:
            file_info = {"type": "photo", "file_id": message.photo[-1].file_id}
        elif message.document:
            file_info = {"type": "document", "file_id": message.document.file_id}
        elif message.video:
            file_info = {"type": "video", "file_id": message.video.file_id}
        state["files"].append(file_info)

# ========== CALLBACKS ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith("upload_") or call.data.startswith("addphoto_"))
def handle_callback(call):
    key = make_key(call.message.chat.id, call.message.message_thread_id, call.from_user.id)
    state = user_state.get(key)
    if not state:
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    if call.data == "upload_ok":
        advance_step(key)
        bot.answer_callback_query(call.id, "‚úÖ –®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
    elif call.data == "upload_next":
        advance_step(key, skip=True)
        bot.answer_callback_query(call.id, "‚û°Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ")
    elif call.data == "upload_cancel":
        obj = state.get("object_id", "")
        user_state.pop(key, None)
        delete_message(call.message.chat.id, call.message.message_id)
        send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞")
        bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
    elif call.data == "addphoto_done":
        object_id = state["object_id"]
        if object_id not in objects_data:
            objects_data[object_id] = {"steps": []}
        save_to_archive(object_id, [{"name": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã", "files": state["files"]}], append=True)
        user_state.pop(key, None)
        delete_message(call.message.chat.id, call.message.message_id)
        send_message(call.message.chat.id, f"‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ ‚úÖ")

# ========== –ü–†–û–î–í–ò–ñ–ï–ù–ò–ï –®–ê–ì–û–í ==========
def send_upload_step(key):
    state = user_state[key]
    step = state["steps"][state["step_index"]]
    if "last_message_id" in state:
        delete_message(state["chat_id"], state["last_message_id"])
    msg = send_message(state["chat_id"], f"üì∏ –®–∞–≥: {step['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                       reply_markup=upload_keyboard(step["name"]),
                       thread_id=state["thread_id"])
    state["last_message_id"] = msg.message_id

def advance_step(key, skip=False):
    state = user_state[key]
    state["step_index"] += 1
    if state["step_index"] >= len(state["steps"]):
        object_id = state["object_id"]
        all_steps = state["steps"]
        save_to_archive(object_id, all_steps)
        objects_data[object_id] = {"steps": all_steps}
        user_state.pop(key, None)
        send_message(state["chat_id"], f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {object_id}")
    else:
        send_upload_step(key)

# ========== –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ê–†–•–ò–í ==========
def save_to_archive(object_id, steps, append=False):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        bot.send_message(ARCHIVE_CHAT_ID, info_text)
        for s in steps:
            files = s["files"]
            if not files:
                continue
            media = []
            for f in files[:50]:
                if f["type"] == "photo":
                    media.append(InputMediaPhoto(f["file_id"]))
                elif f["type"] == "video":
                    media.append(InputMediaVideo(f["file_id"]))
                elif f["type"] == "document":
                    media.append(InputMediaDocument(f["file_id"]))
            if media:
                bot.send_media_group(ARCHIVE_CHAT_ID, media)
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")

# ========== WEBHOOK ==========
@app.route("/" + TOKEN, methods=["POST"])
def webhook():
    update = telebot.types.Update.de_json(request.get_data().decode("utf-8"))
    bot.process_new_updates([update])
    return "OK", 200

@app.route("/")
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.remove_webhook()
    bot.set_webhook(url=WEBHOOK_URL)
    # –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∏–º—ã –≤ –≥—Ä—É–ø–ø–∞—Ö –∏ —Ç–µ–º–∞—Ö
    bot.set_my_commands([
        telebot.types.BotCommand("start", "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        telebot.types.BotCommand("photo", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ –æ–±—ä–µ–∫—Ç—É"),
        telebot.types.BotCommand("addphoto", "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –∫ –æ–±—ä–µ–∫—Ç—É"),
        telebot.types.BotCommand("download", "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤"),
        telebot.types.BotCommand("result", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–æ–∫")
    ])
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
