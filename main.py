import os
import json
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
GOOGLE_SHEETS_KEY = os.environ.get("GOOGLE_SHEETS_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –∫–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è: (chat_id, user_id)
user_state = {}
objects_data = {}
object_files = {}

# ========== HELPERS ==========
def make_key_from_message(message):
    return (message.chat.id, message.from_user.id)

def send_message_with_topic(chat_id, text, message_thread_id=None, reply_markup=None):
    try:
        if message_thread_id:
            return bot.send_message(chat_id=chat_id, text=text, message_thread_id=message_thread_id, reply_markup=reply_markup)
        return bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[send_message_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_photo_with_topic(chat_id, photo, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_photo(chat_id=chat_id, photo=photo, message_thread_id=message_thread_id, caption=caption)
        return bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
    except Exception as e:
        print(f"[send_photo_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_document_with_topic(chat_id, document, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_document(chat_id=chat_id, document=document, message_thread_id=message_thread_id, caption=caption)
        return bot.send_document(chat_id=chat_id, document=document, caption=caption)
    except Exception as e:
        print(f"[send_document_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_video_with_topic(chat_id, video, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_video(chat_id=chat_id, video=video, message_thread_id=message_thread_id, caption=caption)
        return bot.send_video(chat_id=chat_id, video=video, caption=caption)
    except Exception as e:
        print(f"[send_video_with_topic] –û—à–∏–±–∫–∞: {e}")

# ========== EXCEL ==========
def load_objects_from_excel():
    global objects_data
    try:
        workbook = openpyxl.load_workbook('objects.xlsx')
        sheet = workbook.active
        data = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] is not None:
                key = str(row[0]).strip()
                data[key] = {
                    'name': row[1] or '',
                    'address': row[2] or '',
                    'status': '–ù–µ –Ω–∞—á–∞—Ç'
                }
        return data
    except Exception as e:
        print(f"[load_objects_from_excel] –û—à–∏–±–∫–∞: {e}")
        return {}

# ========== GOOGLE SHEETS ==========
def init_google_sheets():
    try:
        if not GOOGLE_SHEETS_KEY:
            return None
        creds_dict = json.loads(GOOGLE_SHEETS_KEY)
        creds = Credentials.from_service_account_info(creds_dict)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        print(f"[init_google_sheets] –û—à–∏–±–∫–∞: {e}")
        return None

def update_google_sheets(object_id, status="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω"):
    try:
        client = init_google_sheets()
        if not client:
            return False
        sheet = client.open("–û–±—ä–µ–∫—Ç—ã –ò–ü–£–ì").sheet1
        all_data = sheet.get_all_values()
        for i, row in enumerate(all_data, start=1):
            if i == 1:
                continue
            if row and str(row[0]).strip() == str(object_id):
                sheet.update_cell(i, 4, status)
                return True
        return False
    except Exception as e:
        print(f"[update_google_sheets] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== –ê–†–•–ò–í ==========
def save_to_archive(object_id, all_files):
    try:
        type_description = {}
        for step in all_files:
            for file in step['files']:
                type_description[file['type']] = type_description.get(file['type'], 0) + 1

        files_desc = " + ".join([f"{k}:{v}" for k,v in type_description.items()]) if type_description else "—Ñ–∞–π–ª—ã"

        info_text = f"""
üíæ –û–ë–™–ï–ö–¢ #{object_id}
üìÅ {sum(len(s['files']) for s in all_files)} {files_desc}
üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        bot.send_message(ARCHIVE_CHAT_ID, info_text.strip())

        for step in all_files:
            for file in step['files']:
                try:
                    if file['type']=='photo':
                        bot.send_photo(ARCHIVE_CHAT_ID, file['file_id'])
                    elif file['type']=='document':
                        bot.send_document(ARCHIVE_CHAT_ID, file['file_id'])
                    elif file['type']=='video':
                        bot.send_video(ARCHIVE_CHAT_ID, file['file_id'])
                except Exception as e:
                    print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")
        return True
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/info'),
        KeyboardButton('/upload'),
        KeyboardButton('/download'),
        KeyboardButton('/processed'),
        KeyboardButton('/help')
    )
    return keyboard

def create_upload_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/done'),
        KeyboardButton('/cancel')
    )
    return keyboard

# ========== –®–ê–ì–ò –ó–ê–ì–†–£–ó–ö–ò ==========
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
/upload - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º
/download - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
/processed - —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
"""
    send_message_with_topic(message.chat.id, help_text.strip(), message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['upload'])
def start_upload(message):
    key = make_key_from_message(message)
    send_message_with_topic(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", message.message_thread_id)
    user_state[key] = {'command':'await_object'}

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    key = make_key_from_message(message)
    state = user_state.get(key)

    if not state:
        return

    # –≤–≤–æ–¥ –æ–±—ä–µ–∫—Ç–∞
    if state['command']=='await_object':
        object_id = message.text.strip()
        if object_id not in objects_data:
            send_message_with_topic(message.chat.id, f"‚ùå –û–±—ä–µ–∫—Ç {object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", message.message_thread_id)
            return
        # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
        steps = [{'name': s, 'files': []} for s in UPLOAD_STEPS]
        user_state[key] = {
            'command':'upload_steps',
            'object_id': object_id,
            'step_index':0,
            'steps':steps,
            'chat_id':message.chat.id,
            'thread_id':message.message_thread_id
        }
        send_message_with_topic(message.chat.id, f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {steps[0]['name']}", message.message_thread_id, create_upload_keyboard())
        return

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['photo','document','video'])
def handle_files(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command')!='upload_steps':
        return

    step = state['steps'][state['step_index']]
    file_info = {}
    if message.photo:
        file_info = {'type':'photo','file_id':message.photo[-1].file_id}
    elif message.document:
        file_info = {'type':'document','file_id':message.document.file_id,'name':message.document.file_name}
    elif message.video:
        file_info = {'type':'video','file_id':message.video.file_id}

    step['files'].append(file_info)

# /done –Ω–∞ —à–∞–≥–µ
@bot.message_handler(commands=['done'])
def handle_done(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command')!='upload_steps':
        send_message_with_topic(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", message.message_thread_id, create_main_keyboard())
        return
    # –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    state['step_index']+=1
    if state['step_index']>=len(state['steps']):
        # –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        object_id = state['object_id']
        all_steps = state['steps']
        save_to_archive(object_id, all_steps)
        update_google_sheets(object_id)
        # –æ—Ç—á–µ—Ç
        report = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n"
        for i, s in enumerate(all_steps,1):
            report += f"{i}. ‚úÖ {s['name']}: {len(s['files'])} —Ñ–∞–π–ª–æ–≤\n"
        send_message_with_topic(state['chat_id'], report, state['thread_id'], create_main_keyboard())
        user_state.pop(key)
    else:
        next_step = state['steps'][state['step_index']]
        send_message_with_topic(state['chat_id'], f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {next_step['name']}", state['thread_id'], create_upload_keyboard())

# /cancel
@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    key = make_key_from_message(message)
    if key in user_state:
        obj = user_state[key].get('object_id','')
        send_message_with_topic(message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", message.message_thread_id, create_main_keyboard())
        user_state.pop(key)

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK",200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",200

if __name__=="__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    objects_data = load_objects_from_excel()
    bot.remove_webhook()
    WEBHOOK_URL = f"https://your-deploy-url/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT",10000)))
