import os
import json
import openpyxl
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from flask import Flask, request
from datetime import datetime

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –§–∞–π–ª—ã –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
OBJECTS_EXCEL_FILE = 'objects.xlsx'
OBJECTS_DATA_FILE = 'data/objects_data.json'
USER_STATE_FILE = 'data/user_state.json'

# –°—Ç–∞—Ç—É—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤
STATUSES = {
    'not_started': '‚ö™ –ù–µ –Ω–∞—á–∞—Ç',
    'in_progress': 'üü° –í —Ä–∞–±–æ—Ç–µ', 
    'waiting_acceptance': 'üü† –ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏',
    'accepted': 'üü¢ –ü—Ä–∏–Ω—è—Ç',
    'problem': 'üî¥ –ü—Ä–æ–±–ª–µ–º–∞'
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö –∏–∑ Excel
def load_objects_from_excel():
    try:
        workbook = openpyxl.load_workbook(OBJECTS_EXCEL_FILE)
        sheet = workbook.active
        
        objects_dict = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] is None:
                continue
            obj_number = str(row[0]).strip()
            objects_dict[obj_number] = {
                'name': row[1] or '',
                'address': row[2] or '',
                'status': 'not_started',
                'photos': {},
                'acts': {},
                'comments': [],
                'history': [],
                'equipment': {
                    'ipug_received': False,
                    'sim_received': False,
                    'seals_received': False,
                    'ipug_installed': False,
                    'sim_installed': False,
                    'seals_installed': False
                },
                'dates': {
                    'started': None,
                    'completed': None,
                    'accepted': None
                }
            }
        return objects_dict
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel —Ñ–∞–π–ª–∞: {e}")
        return {}

def load_objects_data():
    if os.path.exists(OBJECTS_DATA_FILE):
        with open(OBJECTS_DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_objects_data(data):
    os.makedirs('data', exist_ok=True)
    with open(OBJECTS_DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def load_user_state():
    if os.path.exists(USER_STATE_FILE):
        with open(USER_STATE_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    else:
        return {}

def save_user_state(data):
    os.makedirs('data', exist_ok=True)
    with open(USER_STATE_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–µ–º
def send_message_with_topic(chat_id, text, message_thread_id=None, reply_markup=None, parse_mode=None):
    try:
        if message_thread_id:
            return bot.send_message(
                chat_id=chat_id,
                message_thread_id=message_thread_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        else:
            return bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if "message thread not found" in str(e).lower():
            return bot.send_message(
                chat_id=chat_id,
                text=text,
                reply_markup=reply_markup,
                parse_mode=parse_mode
            )
        raise e

def add_object_history(object_id, action, user_id=None):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–±—ä–µ–∫—Ç–∞"""
    if object_id in objects_data:
        history_entry = {
            'timestamp': datetime.now().isoformat(),
            'action': action,
            'user_id': user_id
        }
        objects_data[object_id]['history'].append(history_entry)
        save_objects_data(objects_data)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
objects_db = load_objects_from_excel()
objects_data = load_objects_data()
user_state = load_user_state()

# –û–±–Ω–æ–≤–ª—è–µ–º objects_data –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ Excel
for obj_id, obj_info in objects_db.items():
    if obj_id not in objects_data:
        objects_data[obj_id] = obj_info
save_objects_data(objects_data)

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_menu_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('/objects'), KeyboardButton('/start_work'))
    keyboard.add(KeyboardButton('/complete_work'), KeyboardButton('/report_problem'))
    keyboard.add(KeyboardButton('/equipment'), KeyboardButton('/help'))
    return keyboard

def cancel_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–û—Ç–º–µ–Ω–∞'))
    return keyboard

def equipment_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton('–ü–æ–ª—É—á–µ–Ω –ò–ü–£–ì'), KeyboardButton('–ü–æ–ª—É—á–µ–Ω—ã SIM-–∫–∞—Ä—Ç—ã'))
    keyboard.add(KeyboardButton('–ü–æ–ª—É—á–µ–Ω—ã –ø–ª–æ–º–±—ã'), KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ò–ü–£–ì'))
    keyboard.add(KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SIM'), KeyboardButton('–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–ª–æ–º–±—ã'))
    keyboard.add(KeyboardButton('–ù–∞–∑–∞–¥'))
    return keyboard

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
@bot.message_handler(commands=['start'])
def start_message(message):
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π –ò–ü–£–ì.\n\n"
             "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
             "/objects - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö\n"
             "/start_work - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ\n" 
             "/complete_work - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–∏–µ–º–∫—É\n"
             "/report_problem - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ\n"
             "/equipment - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º\n"
             "/help - –ü–æ–ª–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

@bot.message_handler(commands=['help'])
def help_message(message):
    help_text = """
üîß *–ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ö–û–ú–ê–ù–î*

üìä *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*
/objects - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–∞—Ö (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)

üèóÔ∏è *–†–∞–±–æ—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–∞—Ö:*
/start_work - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ (—Å—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ)
/complete_work - –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–∏–µ–º–∫—É (—Å—Ç–∞—Ç—É—Å: –ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏)
/report_problem - –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ

üì¶ *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:*
/equipment - –û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ/—É—Å—Ç–∞–Ω–æ–≤–∫—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è

üîÑ *–°—Ç–∞—Ç—É—Å—ã –æ–±—ä–µ–∫—Ç–æ–≤:*
‚ö™ –ù–µ –Ω–∞—á–∞—Ç - –†–∞–±–æ—Ç—ã –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏—Å—å
üü° –í —Ä–∞–±–æ—Ç–µ - –ë—Ä–∏–≥–∞–¥–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
üü† –ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏ - –†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–∏–µ–º–∫–∞
üü¢ –ü—Ä–∏–Ω—è—Ç - –û–±—ä–µ–∫—Ç –ø—Ä–∏–Ω—è—Ç –∑–∞–∫–∞–∑—á–∏–∫–æ–º
üî¥ –ü—Ä–æ–±–ª–µ–º–∞ - –í–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã

*–ü—Ä–∏–º–µ—Ä—ã:*
`/objects 5, 7, 10` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ç—Ä–µ–º –æ–±—ä–µ–∫—Ç–∞–º
`/start_work` - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞ –æ–±—ä–µ–∫—Ç–µ
"""
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=help_text,
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

@bot.message_handler(commands=['objects'])
def ask_object_number(message):
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä(–∞) –æ–±—ä–µ–∫—Ç–∞(–æ–≤) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:",
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_object_numbers)

def process_object_numbers(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    numbers = [num.strip() for num in message.text.split(',')]
    response = ""

    for num in numbers:
        if num in objects_data:
            obj = objects_data[num]
            status_display = STATUSES.get(obj['status'], '‚ö™ –ù–µ –Ω–∞—á–∞—Ç')
            
            response += f"""
{status_display} *–û–±—ä–µ–∫—Ç ‚Ññ{num}*
*–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:* {obj['name']}
*–ê–¥—Ä–µ—Å:* {obj['address']}
*–°—Ç–∞—Ç—É—Å:* {status_display}
"""
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏
            equipment = obj['equipment']
            equipment_info = []
            if equipment['ipug_received']: equipment_info.append('‚úÖ –ò–ü–£–ì –ø–æ–ª—É—á–µ–Ω')
            if equipment['sim_received']: equipment_info.append('‚úÖ SIM –ø–æ–ª—É—á–µ–Ω—ã') 
            if equipment['seals_received']: equipment_info.append('‚úÖ –ü–ª–æ–º–±—ã –ø–æ–ª—É—á–µ–Ω—ã')
            if equipment['ipug_installed']: equipment_info.append('‚úÖ –ò–ü–£–ì —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
            if equipment['sim_installed']: equipment_info.append('‚úÖ SIM —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
            if equipment['seals_installed']: equipment_info.append('‚úÖ –ü–ª–æ–º–±—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã')
            
            if equipment_info:
                response += f"*–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ:* {', '.join(equipment_info)}\n"
            
            if obj.get('comments'):
                response += f"*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏:* {', '.join(obj['comments'])}\n"
            
            response += "---\n"
        else:
            response += f"‚ùå –û–±—ä–µ–∫—Ç —Å –Ω–æ–º–µ—Ä–æ–º {num} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n---\n"

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=response,
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# ========== –ù–ê–ß–ê–¢–¨ –†–ê–ë–û–¢–£ ==========
@bot.message_handler(commands=['start_work'])
def start_work(message):
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç:",
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_start_work)

def process_start_work(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    object_id = message.text.strip()
    if object_id not in objects_data:
        msg = send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=cancel_keyboard()
        )
        bot.register_next_step_handler(msg, process_start_work)
        return

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    objects_data[object_id]['status'] = 'in_progress'
    objects_data[object_id]['dates']['started'] = datetime.now().isoformat()
    save_objects_data(objects_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_object_history(object_id, f"–†–∞–±–æ—Ç—ã –Ω–∞—á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"‚úÖ *–†–∞–±–æ—Ç—ã –Ω–∞—á–∞—Ç—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ {object_id}*\n"
             f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: üü° –í —Ä–∞–±–æ—Ç–µ\n"
             f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /equipment",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# ========== –ó–ê–í–ï–†–®–ò–¢–¨ –†–ê–ë–û–¢–´ ==========
@bot.message_handler(commands=['complete_work'])
def complete_work(message):
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç:\n\n"
             "‚ö†Ô∏è *–ü–µ—Ä–µ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:*\n"
             "‚Ä¢ –í—Å–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n"
             "‚Ä¢ –°–¥–µ–ª–∞–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"
             "‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã",
        parse_mode='Markdown',
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_complete_work_number)

def process_complete_work_number(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    object_id = message.text.strip()
    if object_id not in objects_data:
        msg = send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=cancel_keyboard()
        )
        bot.register_next_step_handler(msg, process_complete_work_number)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–Ω–æ–≥–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    user_state[str(message.chat.id)] = {
        'object_id': object_id,
        'step': 'waiting_complete_photos',
        'message_thread_id': message.message_thread_id
    }
    save_user_state(user_state)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    photo_requirements = """
üì∏ *–°–î–ï–õ–ê–ô–¢–ï –§–û–¢–û –î–õ–Ø –ü–†–ò–ï–ú–ö–ò*

–î–ª—è –ø—Ä–∏–µ–º–∫–∏ —Ä–∞–±–æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:

1. üìç –ú–µ—Å—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ò–ü–£–ì *–¥–æ* –º–æ–Ω—Ç–∞–∂–∞
2. üîß –û–±—â–∏–π –≤–∏–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞ –≥–∞–∑–∞  
3. üîí –ü–ª–æ–º–±—ã –Ω–∞ —Å—Ç–∞—Ä–æ–º —Å—á–µ—Ç—á–∏–∫–µ (–Ω–æ–º–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã)
4. üÜï –û–±—â–∏–π –≤–∏–¥ –ò–ü–£–ì *–ø–æ—Å–ª–µ* –º–æ–Ω—Ç–∞–∂–∞
5. üè∑Ô∏è –ü–ª–æ–º–±—ã –Ω–∞ –Ω–æ–≤–æ–º –ò–ü–£–ì (–Ω–æ–º–µ—Ä–∞ + –≤–∏–¥–µ–Ω –ò–ü–£–ì)
6. ‚û°Ô∏è –£—á–∞—Å—Ç–æ–∫ –≥–∞–∑–æ–ø—Ä–æ–≤–æ–¥–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–∞–∑–∞
7. üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—á–∫–∞ –ò–ü–£–ì (–∑–∞–≤–æ–¥—Å–∫–æ–π –Ω–æ–º–µ—Ä)

*–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –û–î–ù–ò–ú —Å–æ–æ–±—â–µ–Ω–∏–µ–º*",
    """
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=photo_requirements,
        parse_mode='Markdown',
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_complete_photos)

def process_complete_photos(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /complete_work.",
            reply_markup=main_menu_keyboard()
        )
        return

    if message.text and message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ç–æ
    if message.photo is None:
        msg = send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞'.",
            reply_markup=cancel_keyboard()
        )
        bot.register_next_step_handler(msg, process_complete_photos)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    object_id = user_state[user_id]['object_id']
    if 'photos' not in objects_data[object_id]:
        objects_data[object_id]['photos'] = {}

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    for i, photo in enumerate(message.photo):
        photo_id = photo.file_id
        objects_data[object_id]['photos'][f'complete_photo_{i}'] = photo_id

    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
    objects_data[object_id]['status'] = 'waiting_acceptance'
    objects_data[object_id]['dates']['completed'] = datetime.now().isoformat()
    save_objects_data(objects_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_object_history(object_id, f"–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–∏–µ–º–∫—É. –§–æ—Ç–æ: {len(message.photo)} —à—Ç.")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º
    del user_state[user_id]
    save_user_state(user_state)

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"‚úÖ *–†–∞–±–æ—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã –Ω–∞ –æ–±—ä–µ–∫—Ç–µ {object_id}*\n"
             f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: üü† –ñ–¥–µ—Ç –ø—Ä–∏–µ–º–∫–∏\n"
             f"–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(message.photo)} —à—Ç.\n"
             f"–û–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–∫–∞–∑—á–∏–∫—É.",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# ========== –ü–†–û–ë–õ–ï–ú–´ ==========
@bot.message_handler(commands=['report_problem'])
def report_problem(message):
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ —Å –ø—Ä–æ–±–ª–µ–º–æ–π:",
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_problem_number)

def process_problem_number(message):
    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    object_id = message.text.strip()
    if object_id not in objects_data:
        msg = send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=cancel_keyboard()
        )
        bot.register_next_step_handler(msg, process_problem_number)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_state[str(message.chat.id)] = {
        'object_id': object_id,
        'step': 'waiting_problem_description',
        'message_thread_id': message.message_thread_id
    }
    save_user_state(user_state)

    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:",
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_problem_description)

def process_problem_description(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.",
            reply_markup=main_menu_keyboard()
        )
        return

    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    object_id = user_state[user_id]['object_id']
    
    # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    objects_data[object_id]['status'] = 'problem'
    if 'comments' not in objects_data[object_id]:
        objects_data[object_id]['comments'] = []
    objects_data[object_id]['comments'].append(f"{datetime.now().strftime('%d.%m.%Y')}: {message.text}")
    save_objects_data(objects_data)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    add_object_history(object_id, f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞: {message.text}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º
    del user_state[user_id]
    save_user_state(user_state)

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"üî¥ *–ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ {object_id}*\n"
             f"–û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n"
             f"–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: üî¥ –ü—Ä–æ–±–ª–µ–º–∞",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# ========== –û–ë–û–†–£–î–û–í–ê–ù–ò–ï ==========
@bot.message_handler(commands=['equipment'])
def equipment_menu(message):
    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º:",
        reply_markup=equipment_keyboard()
    )

@bot.message_handler(func=lambda message: message.text in [
    '–ü–æ–ª—É—á–µ–Ω –ò–ü–£–ì', '–ü–æ–ª—É—á–µ–Ω—ã SIM-–∫–∞—Ä—Ç—ã', '–ü–æ–ª—É—á–µ–Ω—ã –ø–ª–æ–º–±—ã',
    '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ò–ü–£–ì', '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SIM', '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–ª–æ–º–±—ã'
])
def handle_equipment_action(message):
    if message.text == '–ù–∞–∑–∞–¥':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    user_state[str(message.chat.id)] = {
        'equipment_action': message.text,
        'step': 'waiting_equipment_object',
        'message_thread_id': message.message_thread_id
    }
    save_user_state(user_state)

    msg = send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è '{message.text}':",
        reply_markup=cancel_keyboard()
    )
    bot.register_next_step_handler(msg, process_equipment_object)

def process_equipment_object(message):
    user_id = str(message.chat.id)
    if user_id not in user_state:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–°–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞.",
            reply_markup=main_menu_keyboard()
        )
        return

    if message.text.strip().lower() == '–æ—Ç–º–µ–Ω–∞':
        del user_state[user_id]
        save_user_state(user_state)
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=main_menu_keyboard()
        )
        return

    object_id = message.text.strip()
    if object_id not in objects_data:
        msg = send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä:",
            reply_markup=cancel_keyboard()
        )
        bot.register_next_step_handler(msg, process_equipment_object)
        return

    action = user_state[user_id]['equipment_action']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    equipment_map = {
        '–ü–æ–ª—É—á–µ–Ω –ò–ü–£–ì': 'ipug_received',
        '–ü–æ–ª—É—á–µ–Ω—ã SIM-–∫–∞—Ä—Ç—ã': 'sim_received', 
        '–ü–æ–ª—É—á–µ–Ω—ã –ø–ª–æ–º–±—ã': 'seals_received',
        '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ò–ü–£–ì': 'ipug_installed',
        '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã SIM': 'sim_installed',
        '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–ª–æ–º–±—ã': 'seals_installed'
    }
    
    field = equipment_map.get(action)
    if field:
        objects_data[object_id]['equipment'][field] = True
        save_objects_data(objects_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        add_object_history(object_id, f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {action}")

    # –ó–∞–≤–µ—Ä—à–∞–µ–º
    del user_state[user_id]
    save_user_state(user_state)

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"‚úÖ *–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ –æ–±—ä–µ–∫—Ç–µ {object_id}*\n"
             f"–î–µ–π—Å—Ç–≤–∏–µ: {action}",
        parse_mode='Markdown',
        reply_markup=main_menu_keyboard()
    )

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–°–¢–ê–õ–¨–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ==========
@bot.message_handler(func=lambda message: True)
def handle_all_messages(message):
    if message.text == '–ù–∞–∑–∞–¥':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_keyboard()
        )
    else:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
            reply_markup=main_menu_keyboard()
        )
@bot.message_handler(commands=['getid'])
def get_chat_id(message):
    chat_info = f"""
üí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:
–ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title if message.chat.title else '–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'}
–¢–∏–ø: {message.chat.type}
ID: {message.chat.id}
ID —Ç–µ–º—ã: {message.message_thread_id if message.message_thread_id else '–ù–µ—Ç'}
    """
    bot.reply_to(message, chat_info.strip())
# ========== WEBHOOK –õ–û–ì–ò–ö–ê ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "–ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–º –ò–ü–£–ì —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    os.makedirs('data', exist_ok=True)

    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
