import os
import time
from datetime import datetime
from flask import Flask, request
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")

bot = telebot.TeleBot(TOKEN, parse_mode=None)
app = Flask(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–ª—é—á = (chat_id, thread_id, user_id)
user_state = {}

# –ê—Ä—Ö–∏–≤: object_id -> list of file dicts {'type','file_id','step'}
archive_records = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",                              # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",                                   # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",                   # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",                      # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

# –®–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï–õ–¨–ó–Ø –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== HELPERS ==========
def make_key_from_message(message):
    thread_id = getattr(message, "message_thread_id", None)
    return (message.chat.id, thread_id, message.from_user.id)

def make_key_from_callback(call):
    thread_id = getattr(call.message, "message_thread_id", None)
    return (call.message.chat.id, thread_id, call.from_user.id)

def find_session_by_message(call):
    """
    –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–µ –≤–ª–∞–¥–µ—è —Å–µ—Å—Å–∏–µ–π, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
    –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ/—Ç–µ–º–µ –∏ –≤–µ—Ä–Ω—É—Ç—å –µ—ë –∫–ª—é—á (owner), —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è".
    """
    chat_id = call.message.chat.id
    thread_id = getattr(call.message, "message_thread_id", None)
    for k in user_state.keys():
        if k[0] == chat_id and k[1] == thread_id:
            return k
    return None

def send_message(chat_id, text, reply_markup=None, thread_id=None):
    return bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)

def send_file(chat_id, file_type, file_id, caption=None, thread_id=None):
    if file_type == "photo":
        return bot.send_photo(chat_id, file_id, caption=caption, message_thread_id=thread_id)
    elif file_type == "document":
        return bot.send_document(chat_id, file_id, caption=caption, message_thread_id=thread_id)
    elif file_type == "video":
        return bot.send_video(chat_id, file_id, caption=caption, message_thread_id=thread_id)
    return None

def register_bot_commands():
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã, —á—Ç–æ–±—ã –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—è–≤–ª—è–ª—Å—è '/' –∏ –∫–æ–º–∞–Ω–¥—ã
    """
    commands = [
        telebot.types.BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ / –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        telebot.types.BotCommand("photo", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã (—á–µ–∫-–ª–∏—Å—Ç)"),
        telebot.types.BotCommand("download", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        telebot.types.BotCommand("result", "–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"),
        telebot.types.BotCommand("help", "–ü–æ–º–æ—â—å")
    ]
    try:
        bot.set_my_commands(commands)
    except Exception:
        pass

# ========== INLINE –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def upload_inline_keyboard(allow_next=True):
    kb = InlineKeyboardMarkup(row_width=3)
    kb_buttons = []
    kb_buttons.append(InlineKeyboardButton("‚úÖ OK", callback_data="upload_ok"))
    if allow_next:
        kb_buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data="upload_next"))
    kb_buttons.append(InlineKeyboardButton("‚ùå Cancel", callback_data="upload_cancel"))
    kb.add(*kb_buttons)
    return kb

def main_inline_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ÑπÔ∏è Info", callback_data="cmd_info"),
        InlineKeyboardButton("üì∏ Photo", callback_data="cmd_photo"),
        InlineKeyboardButton("‚¨áÔ∏è Download", callback_data="cmd_download"),
        InlineKeyboardButton("üìã Result", callback_data="cmd_result"),
        InlineKeyboardButton("‚ùì Help", callback_data="cmd_help")
    )
    return kb

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–∞–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ /"
    )
    send_message(message.chat.id, text, reply_markup=main_inline_keyboard(), thread_id=message.message_thread_id)

@bot.message_handler(commands=['photo'])
def start_upload(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)
    user_state[key] = {'command': 'await_object'}

@bot.message_handler(commands=['result'])
def cmd_result(message):
    # –í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (in-memory)
    if not archive_records:
        send_message(message.chat.id, "üìÅ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", thread_id=message.message_thread_id)
        return
    text = "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n\n"
    for obj_id, rec in archive_records.items():
        cnt = len(rec)
        ts = rec[0].get('archived_at') if rec else ''
        text += f"#{obj_id}: {cnt} —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ts}\n"
    send_message(message.chat.id, text, thread_id=message.message_thread_id)

@bot.message_handler(commands=['download'])
def cmd_download(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)
    user_state[key] = {'command': 'await_download_object'}

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@bot.message_handler(content_types=['text'])
def handle_text(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state:
        return

    cmd = state.get('command')

    if cmd == 'await_object':
        object_id = message.text.strip()
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.", thread_id=message.message_thread_id)
            return

        steps = [{'name': s, 'files': []} for s in UPLOAD_STEPS]
        user_state[key] = {
            'command': 'upload_steps',
            'object_id': object_id,
            'step_index': 0,
            'steps': steps,
            'chat_id': message.chat.id,
            'thread_id': getattr(message, 'message_thread_id', None),
            'seen_media_groups': set(),
            'control_message_id': None
        }
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (Next ‚Äî –≤—ã–∫–ª—é—á–µ–Ω –µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
        step = steps[0]
        allow_next = (step['name'] not in MANDATORY_STEPS)
        msg = send_message(
            message.chat.id,
            f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {step['name']}",
            reply_markup=upload_inline_keyboard(allow_next=allow_next),
            thread_id=getattr(message, 'message_thread_id', None)
        )
        user_state[key]['control_message_id'] = getattr(msg, 'message_id', None)
        return

    if cmd == 'await_download_object':
        object_id = message.text.strip()
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.", thread_id=message.message_thread_id)
            user_state.pop(key, None)
            return
        # –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∞—Ä—Ö–∏–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        send_object_files_to_user(object_id, message.chat.id, thread_id=getattr(message, 'message_thread_id', None))
        user_state.pop(key, None)
        return

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@bot.message_handler(content_types=['photo', 'document', 'video'])
def handle_files(message):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —à–∞–≥–∞, –Ω–µ —Å–ø–∞–º–∏–º "—Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω".
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
     - –ø—Ä–∏ –æ–¥–∏–Ω–æ—á–Ω–æ–º —Ñ–∞–π–ª–µ —Å—Ä–∞–∑—É
     - –ø—Ä–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ ‚Äî —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ (–ø–æ media_group_id)
    """
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command') != 'upload_steps':
        return

    step = state['steps'][state['step_index']]

    # –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø –∏ file_id
    if message.photo:
        fid = message.photo[-1].file_id
        ftype = 'photo'
    elif message.video:
        fid = message.video.file_id
        ftype = 'video'
    elif message.document:
        fid = message.document.file_id
        ftype = 'document'
    else:
        return

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —à–∞–≥
    step['files'].append({'type': ftype, 'file_id': fid, 'step': step['name']})

    # –ø–æ–º–µ—á–∞–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞—Ä—Ö–∏–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ (—á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø—Ä–∏ crash) ‚Äî –¥–æ–±–∞–≤–∏–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    mgid = getattr(message, 'media_group_id', None)
    seen = state.get('seen_media_groups', set())
    should_send = False
    if mgid:
        if mgid not in seen:
            should_send = True
            seen.add(mgid)
            state['seen_media_groups'] = seen
    else:
        # –æ–¥–∏–Ω–æ—á–Ω—ã–π —Ñ–∞–π–ª ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ –ø–æ–∫–∞–∑–∞–ª–∏ control_message_id –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞)
        # –µ—Å–ª–∏ control_message_id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—É—â–µ–º—É —à–∞–≥—É ‚Äî –Ω–µ —à–ª–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        should_send = True

    if should_send:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–µ—Å–ª–∏ –µ—Å—Ç—å) ‚Äî —á—Ç–æ–±—ã –Ω–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
        prev_mid = state.get('control_message_id')
        if prev_mid:
            try:
                bot.delete_message(chat_id=state['chat_id'], message_id=prev_mid, message_thread_id=state.get('thread_id'))
            except Exception:
                pass

        allow_next = (step['name'] not in MANDATORY_STEPS)
        msg = send_message(
            state['chat_id'],
            f"üì∏ –®–∞–≥: {step['name']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=upload_inline_keyboard(allow_next=allow_next),
            thread_id=state.get('thread_id')
        )
        state['control_message_id'] = getattr(msg, 'message_id', None)

# ========== CALLBACK HANDLERS ==========
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cmd_"))
def handle_cmd_callback(call):
    data = call.data
    # –ø—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if data == "cmd_photo":
        # —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç /photo
        send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(call.message, 'message_thread_id', None))
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        key = (call.message.chat.id, getattr(call.message, 'message_thread_id', None), call.from_user.id)
        user_state[key] = {'command': 'await_object'}
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    if data == "cmd_info":
        bot.answer_callback_query(call.id, "Info: –∑–∞–≥–ª—É—à–∫–∞")
        send_message(call.message.chat.id, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ: (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)", thread_id=getattr(call.message,'message_thread_id',None))
        return

    if data == "cmd_download":
        # —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç /download
        send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(call.message, 'message_thread_id', None))
        key = (call.message.chat.id, getattr(call.message, 'message_thread_id', None), call.from_user.id)
        user_state[key] = {'command': 'await_download_object'}
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    if data == "cmd_result":
        # —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç /result
        if not archive_records:
            bot.answer_callback_query(call.id, "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
            send_message(call.message.chat.id, "üìÅ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", thread_id=getattr(call.message,'message_thread_id',None))
            return
        text = "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n\n"
        for obj_id, rec in archive_records.items():
            cnt = len(rec)
            ts = rec[0].get('archived_at') if rec else ''
            text += f"#{obj_id}: {cnt} —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ts}\n"
        bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
        send_message(call.message.chat.id, text, thread_id=getattr(call.message,'message_thread_id',None))
        return

    if data == "cmd_help":
        bot.answer_callback_query(call.id, "–ü–æ–º–æ—â—å")
        send_message(call.message.chat.id, "‚ùì –ü–æ–º–æ—â—å: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /photo –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", thread_id=getattr(call.message,'message_thread_id',None))
        return

    bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("upload_"))
def handle_upload_callback(call):
    # –ù–∞–π–¥—ë–º —Å–µ—Å—Å–∏—é: —Å–Ω–∞—á–∞–ª–∞ ‚Äî —Ç–æ—á–Ω—ã–π –∫–ª—é—á –ø–æ –Ω–∞–∂–∞—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    key = make_key_from_callback(call)
    state = user_state.get(key)

    if not state:
        # –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–∂–∞–ª –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏–º, –µ—Å—Ç—å –ª–∏ —Å–µ—Å—Å–∏—è –≤ —ç—Ç–æ–º chat/thread
        owner_key = find_session_by_message(call)
        if owner_key:
            # –µ—Å—Ç—å —Å–µ—Å—Å–∏—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
            return
        # –≤–æ–æ–±—â–µ –Ω–µ—Ç —Å–µ—Å—Å–∏–∏
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∏–ª–∏ —Å–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.")
        return

    # –¢–µ–ø–µ—Ä—å key –≤–ª–∞–¥–µ–ª–µ—Ü ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    action = call.data  # upload_ok / upload_next / upload_cancel

    # —É–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –Ω–∞–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ)
    ctrl_mid = state.get('control_message_id')
    if ctrl_mid:
        try:
            bot.delete_message(chat_id=state['chat_id'], message_id=ctrl_mid, message_thread_id=state.get('thread_id'))
        except Exception:
            pass

    if action == "upload_cancel":
        obj = state.get('object_id', '')
        user_state.pop(key, None)
        # –æ–ø–æ–≤–µ—Å—Ç–∏–º —á–∞—Ç
        try:
            bot.edit_message_text(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", chat_id=call.message.chat.id, message_id=call.message.message_id, message_thread_id=getattr(call.message, 'message_thread_id', None))
        except Exception:
            send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", thread_id=getattr(call.message, 'message_thread_id', None))
        bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if action == "upload_ok":
        # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —à–∞–≥ (–æ—Å—Ç–∞–≤–ª—è—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã)
        advance_step(key)
        bot.answer_callback_query(call.id, "–®–∞–≥ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à—ë–Ω")
        return

    if action == "upload_next":
        # –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ–∫—É—â–∏–π —à–∞–≥: –µ—Å–ª–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π ‚Äî –∑–∞–ø—Ä–µ—Ç–∏–º
        step = state['steps'][state['step_index']]
        if step['name'] in MANDATORY_STEPS:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —à–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
        advance_step(key, skip=True)
        bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
        return

    bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# ========== –ü–†–û–ì–†–ï–°–° –∏ –ê–†–•–ò–í ==========
def advance_step(key, skip=False):
    """
    –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—å —à–∞–≥, —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è,
    –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∞—Ä—Ö–∏–≤ (–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ ARCHIVE_CHAT_ID –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏).
    """
    state = user_state.get(key)
    if not state:
        return

    # –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—å
    state['step_index'] += 1

    # –æ—á–∏—Å—Ç–∏–º seen_media_groups –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    state['seen_media_groups'] = set()

    # –µ—Å–ª–∏ –≤—ã—à–ª–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —à–∞–≥–æ–≤ ‚Äî –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º
    if state['step_index'] >= len(state['steps']):
        object_id = state.get('object_id', '')
        all_steps = state.get('steps', [])
        # –∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º: –¥–æ–±–∞–≤–ª—è–µ–º –≤ archive_records –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞–º–∏
        save_to_archive(object_id, all_steps)
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –∏ —à–ª—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        report = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n"
        for i, s in enumerate(all_steps, 1):
            report += f"{i}. {s['name']}: {len(s['files'])} —Ñ–∞–π–ª–æ–≤\n"
        send_message(state['chat_id'], report, thread_id=state.get('thread_id'))
        # —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        user_state.pop(key, None)
        return

    # –∏–Ω–∞—á–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    next_step = state['steps'][state['step_index']]
    allow_next = (next_step['name'] not in MANDATORY_STEPS)

    # –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —É–¥–∞–ª–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π (–µ—Å–ª–∏ –µ—â—ë –æ—Å—Ç–∞–ª—Å—è)
    prev_mid = state.get('control_message_id')
    if prev_mid:
        try:
            bot.delete_message(chat_id=state['chat_id'], message_id=prev_mid, message_thread_id=state.get('thread_id'))
        except Exception:
            pass

    msg = send_message(
        state['chat_id'],
        f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {next_step['name']}",
        reply_markup=upload_inline_keyboard(allow_next=allow_next),
        thread_id=state.get('thread_id')
    )
    state['control_message_id'] = getattr(msg, 'message_id', None)

def save_to_archive(object_id, all_steps):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –≤ ARCHIVE_CHAT_ID —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏:
    - –§–æ—Ç–æ/–≤–∏–¥–µ–æ ‚Äî –∫–∞–∫ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –ø–æ 10
    - –î–æ–∫—É–º–µ–Ω—Ç—ã ‚Äî –ø–æ –æ–¥–Ω–æ–º—É
    –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞ –≤ archive_records –¥–ª—è /result –∏ /download
    """
    try:
        # –°–æ–±–µ—Ä—ë–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–∏–º –æ—Ç–º–µ—Ç–∫—É archived_at
        flat = []
        for s in all_steps:
            for f in s['files']:
                rec = {'type': f['type'], 'file_id': f['file_id'], 'step': s['name'], 'archived_at': datetime.now().strftime('%d.%m.%Y %H:%M')}
                flat.append(rec)

        if not flat:
            # –ø—É—Å—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å–∞—Ç—å –º–µ—Ç–∞
            archive_records.setdefault(object_id, [])
            return True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        archive_records.setdefault(object_id, [])
        archive_records[object_id].extend(flat)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤-—á–∞—Ç
        info = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüìÅ {len(flat)} —Ñ–∞–π–ª–æ–≤\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        send_message(ARCHIVE_CHAT_ID, info)

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ/video –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (–ø–æ 10)
        media_batch = []
        for item in flat:
            if item['type'] == 'photo':
                media_batch.append(InputMediaPhoto(item['file_id']))
            elif item['type'] == 'video':
                media_batch.append(InputMediaVideo(item['file_id']))
            else:
                # –¥–æ–∫—É–º–µ–Ω—Ç: —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–∫—É—â –Ω–∞–∫–æ–ø–∏–≤—à–∏–π—Å—è –º–µ–¥–∏–∞–±–∞—Ç—á, –∑–∞—Ç–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                if media_batch:
                    try:
                        # Telegram –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç 10 items per media_group
                        # —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –∫—É—Å–∫–∏ –ø–æ 10
                        for i in range(0, len(media_batch), 10):
                            bot.send_media_group(ARCHIVE_CHAT_ID, media_batch[i:i+10])
                            time.sleep(0.3)
                    except Exception:
                        pass
                    media_batch = []
                # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                try:
                    bot.send_document(ARCHIVE_CHAT_ID, item['file_id'])
                    time.sleep(0.2)
                except Exception:
                    pass

        # –≤ –∫–æ–Ω—Ü–µ –æ—Ç–ø—Ä–∞–≤–∏–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è –º–µ–¥–∏–∞ –±–∞—Ç—á
        if media_batch:
            try:
                for i in range(0, len(media_batch), 10):
                    bot.send_media_group(ARCHIVE_CHAT_ID, media_batch[i:i+10])
                    time.sleep(0.3)
            except Exception:
                pass

        return True
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–ü–†–û–°–ê –§–ê–ô–õ–û–í (DOWNLOAD) ==========
def send_object_files_to_user(object_id, dest_chat_id, thread_id=None):
    recs = archive_records.get(object_id)
    if not recs:
        send_message(dest_chat_id, f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.", thread_id=thread_id)
        return

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ/video –∫–∞–∫ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã –æ—Ç–¥–µ–ª—å–Ω–æ
    media_batch = []
    for item in recs:
        if item['type'] == 'photo':
            media_batch.append(InputMediaPhoto(item['file_id']))
        elif item['type'] == 'video':
            media_batch.append(InputMediaVideo(item['file_id']))
        else:
            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞ –±–∞—Ç—á, –∑–∞—Ç–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            if media_batch:
                try:
                    for i in range(0, len(media_batch), 10):
                        bot.send_media_group(dest_chat_id, media_batch[i:i+10], message_thread_id=thread_id)
                        time.sleep(0.2)
                except Exception:
                    pass
                media_batch = []
            try:
                bot.send_document(dest_chat_id, item['file_id'], message_thread_id=thread_id)
                time.sleep(0.15)
            except Exception:
                pass

    if media_batch:
        try:
            for i in range(0, len(media_batch), 10):
                bot.send_media_group(dest_chat_id, media_batch[i:i+10], message_thread_id=thread_id)
                time.sleep(0.2)
        except Exception:
            pass

    send_message(dest_chat_id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ #{object_id}", thread_id=thread_id)

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    update = telebot.types.Update.de_json(request.data.decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    register_bot_commands()
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
