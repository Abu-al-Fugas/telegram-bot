import os
import json
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from flask import Flask, request
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
GOOGLE_SHEETS_KEY = os.environ.get("GOOGLE_SHEETS_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_state = {}      # —Ç–µ–ø–µ—Ä—å –∫–ª—é—á ‚Äî (chat_id, message_thread_id, user_id)
objects_data = {}
object_files = {}

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
def make_key(message):
    """–°–æ–∑–¥–∞—ë—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç–µ–º–µ"""
    return (message.chat.id, message.message_thread_id, message.from_user.id)

def send_message_with_topic(chat_id, text, message_thread_id=None, reply_markup=None, parse_mode=None):
    try:
        if message_thread_id:
            return bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode, message_thread_id=message_thread_id)
        return bot.send_message(chat_id, text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

def send_photo_with_topic(chat_id, photo, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_photo(chat_id, photo, caption=caption, message_thread_id=message_thread_id)
        return bot.send_photo(chat_id, photo, caption=caption)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {e}")

def send_document_with_topic(chat_id, document, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_document(chat_id, document, caption=caption, message_thread_id=message_thread_id)
        return bot.send_document(chat_id, document, caption=caption)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")

def send_video_with_topic(chat_id, video, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_video(chat_id, video, caption=caption, message_thread_id=message_thread_id)
        return bot.send_video(chat_id, video, caption=caption)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ: {e}")

# ========== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ==========
def load_objects_from_excel():
    try:
        workbook = openpyxl.load_workbook('objects.xlsx')
        sheet = workbook.active
        data = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0]:
                data[str(row[0]).strip()] = {'name': row[1] or '', 'address': row[2] or '', 'status': '–ù–µ –Ω–∞—á–∞—Ç'}
        return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return {}

# ========== GOOGLE SHEETS ==========
def init_google_sheets():
    try:
        if GOOGLE_SHEETS_KEY:
            creds_dict = json.loads(GOOGLE_SHEETS_KEY)
            creds = Credentials.from_service_account_info(creds_dict)
            return gspread.authorize(creds)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets: {e}")
    return None

def update_google_sheets(object_id, status="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω"):
    try:
        client = init_google_sheets()
        if not client:
            return False
        sheet = client.open("–û–±—ä–µ–∫—Ç—ã –ò–ü–£–ì").sheet1
        data = sheet.get_all_values()
        for i, row in enumerate(data, start=1):
            if i == 1:
                continue
            if row and str(row[0]).strip() == str(object_id):
                sheet.update_cell(i, 4, status)
                return True
        return False
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google Sheets: {e}")
        return False

# ========== –ê–†–•–ò–í ==========
def save_to_archive(object_id, files, file_types):
    try:
        desc = []
        if file_types.get('photos'): desc.append(f"üì∏ {file_types['photos']} —Ñ–æ—Ç–æ")
        if file_types.get('documents'): desc.append(f"üìÑ {file_types['documents']} –¥–æ–∫.")
        if file_types.get('videos'): desc.append(f"üé• {file_types['videos']} –≤–∏–¥–µ–æ")
        info_text = f"""
üíæ –û–ë–™–ï–ö–¢ #{object_id}
üìÅ {len(files)} {' + '.join(desc)}
üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        bot.send_message(ARCHIVE_CHAT_ID, info_text.strip())
        for f in files:
            try:
                if f['type'] == 'photo':
                    bot.send_photo(ARCHIVE_CHAT_ID, f['file_id'])
                elif f['type'] == 'document':
                    bot.send_document(ARCHIVE_CHAT_ID, f['file_id'])
                elif f['type'] == 'video':
                    bot.send_video(ARCHIVE_CHAT_ID, f['file_id'])
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—Ä—Ö–∏–≤–∞: {e}")
        return False

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def create_main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(KeyboardButton('/info'), KeyboardButton('/upload'),
           KeyboardButton('/download'), KeyboardButton('/processed'),
           KeyboardButton('/help'))
    return kb

def create_upload_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(KeyboardButton('/done'), KeyboardButton('/cancel'), KeyboardButton('/help'))
    return kb

def create_processed_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    buttons = [KeyboardButton(f"üìÅ #{obj}") for obj in sorted(object_files.keys())]
    for i in range(0, len(buttons), 3):
        kb.add(*buttons[i:i+3])
    kb.add(KeyboardButton('/help'))
    return kb

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì

üìã –ö–æ–º–∞–Ω–¥—ã:
/info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ
/upload ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã  
/download ‚Äî —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã
/processed ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
/help ‚Äî –ø–æ–º–æ—â—å
    """
    send_message_with_topic(message.chat.id, text.strip(),
                            message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['info'])
def ask_info_object(message):
    key = make_key(message)
    user_state[key] = {'command': 'info', 'chat_id': message.chat.id, 'message_thread_id': message.message_thread_id}
    send_message_with_topic(message.chat.id, "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞:", message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['upload'])
def ask_upload_object(message):
    key = make_key(message)
    user_state[key] = {'command': 'upload', 'chat_id': message.chat.id, 'message_thread_id': message.message_thread_id}
    send_message_with_topic(message.chat.id, "üì§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['download'])
def handle_download(message):
    parts = message.text.split()
    key = make_key(message)
    if len(parts) == 1:
        user_state[key] = {'command': 'download', 'chat_id': message.chat.id, 'message_thread_id': message.message_thread_id}
        send_message_with_topic(message.chat.id, "üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:", message.message_thread_id, create_main_keyboard())
    else:
        download_object_files(message, parts[1])

@bot.message_handler(commands=['done'])
def handle_done(message):
    key = make_key(message)
    if key not in user_state or user_state[key].get('command') != 'upload_files':
        send_message_with_topic(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", message.message_thread_id, create_main_keyboard())
        return
    state = user_state[key]
    object_id, files, file_types = state['object_id'], state['files'], state['file_types']
    if not files:
        send_message_with_topic(message.chat.id, "‚ùå –ù–µ—Ç —Ñ–∞–π–ª–æ–≤", message.message_thread_id, create_main_keyboard())
        user_state.pop(key, None)
        return
    object_files[object_id] = files
    save_to_archive(object_id, files, file_types)
    update_google_sheets(object_id)
    user_state.pop(key, None)
    send_message_with_topic(message.chat.id, f"‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}", message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['cancel'])
def cancel_upload(message):
    key = make_key(message)
    if key in user_state and user_state[key].get('command') == 'upload_files':
        obj = user_state[key]['object_id']
        user_state.pop(key, None)
        send_message_with_topic(message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è #{obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", message.message_thread_id, create_main_keyboard())

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    if message.text.startswith('/'):
        return
    key = make_key(message)
    if key not in user_state:
        return
    state = user_state[key]
    cmd = state.get('command')
    if cmd == 'info':
        process_info_object(message, state, key)
    elif cmd == 'upload':
        process_upload_object(message, state, key)
    elif cmd == 'download':
        process_download_object(message, state, key)

def process_info_object(message, state, key):
    ids = [i.strip() for i in message.text.split(',')]
    res = []
    for i in ids:
        obj = objects_data.get(i)
        if obj:
            processed = "‚úÖ" if i in object_files else "‚è≥"
            res.append(f"{processed} #{i}\nüè¢ {obj['name']}\nüìç {obj['address']}\nüìä {obj['status']}")
        else:
            res.append(f"‚ùå –û–±—ä–µ–∫—Ç #{i} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    send_message_with_topic(state['chat_id'], "\n\n".join(res), state['message_thread_id'], create_main_keyboard())
    user_state.pop(key, None)

def process_upload_object(message, state, key):
    obj_id = message.text.strip()
    if obj_id not in objects_data:
        send_message_with_topic(state['chat_id'], f"‚ùå –û–±—ä–µ–∫—Ç #{obj_id} –Ω–µ –Ω–∞–π–¥–µ–Ω", state['message_thread_id'], create_main_keyboard())
        user_state.pop(key, None)
        return
    user_state[key] = {
        'command': 'upload_files', 'object_id': obj_id,
        'chat_id': state['chat_id'], 'message_thread_id': state['message_thread_id'],
        'files': [], 'file_types': {'photos': 0, 'documents': 0, 'videos': 0}
    }
    send_message_with_topic(state['chat_id'], f"üìé –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{obj_id}\n–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî /done\n–î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel", state['message_thread_id'], create_upload_keyboard())

def process_download_object(message, state, key):
    obj_id = message.text.strip()
    user_state.pop(key, None)
    download_object_files(message, obj_id)

@bot.message_handler(content_types=['photo', 'document', 'video'])
def handle_files(message):
    key = make_key(message)
    if key not in user_state or user_state[key].get('command') != 'upload_files':
        return
    s = user_state[key]
    f_info = {}
    if message.photo:
        f_info = {'type': 'photo', 'file_id': message.photo[-1].file_id}
        s['file_types']['photos'] += 1
    elif message.document:
        f_info = {'type': 'document', 'file_id': message.document.file_id, 'name': message.document.file_name}
        s['file_types']['documents'] += 1
    elif message.video:
        f_info = {'type': 'video', 'file_id': message.video.file_id}
        s['file_types']['videos'] += 1
    s['files'].append(f_info)

def download_object_files(message, obj_id):
    if obj_id not in object_files:
        send_message_with_topic(message.chat.id, f"‚ùå –î–ª—è #{obj_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤", message.message_thread_id, create_main_keyboard())
        return
    send_message_with_topic(message.chat.id, f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –¥–ª—è #{obj_id}...", message.message_thread_id, create_main_keyboard())
    count = 0
    for f in object_files[obj_id]:
        try:
            if f['type'] == 'photo':
                send_photo_with_topic(message.chat.id, f['file_id'], message.message_thread_id)
            elif f['type'] == 'document':
                send_document_with_topic(message.chat.id, f['file_id'], message.message_thread_id)
            elif f['type'] == 'video':
                send_video_with_topic(message.chat.id, f['file_id'], message.message_thread_id)
            count += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")
    send_message_with_topic(message.chat.id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤", message.message_thread_id, create_main_keyboard())

@bot.message_handler(commands=['processed'])
def show_processed_objects(message):
    if not object_files:
        send_message_with_topic(message.chat.id, "üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤", message.message_thread_id, create_main_keyboard())
        return
    kb = create_processed_keyboard()
    send_message_with_topic(message.chat.id, f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(object_files)}\nüëá –í—ã–±–µ—Ä–∏—Ç–µ:", message.message_thread_id, kb)

@bot.message_handler(func=lambda m: m.text.startswith('üìÅ #'))
def handle_download_button(message):
    obj_id = message.text.replace('üìÅ #', '').strip()
    download_object_files(message, obj_id)

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    update = telebot.types.Update.de_json(request.get_data().decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    objects_data = load_objects_from_excel()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects_data)}")
    if init_google_sheets():
        print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
