import os
from datetime import datetime
from flask import Flask, request
import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –∫–ª—é—á = (chat_id, thread_id, user_id)
user_state = {}

UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

# ========== HELPERS ==========
def make_key(message):
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–º–µ"""
    thread_id = getattr(message, "message_thread_id", None)
    return (message.chat.id, thread_id, message.from_user.id)

def send_message(chat_id, text, reply_markup=None, thread_id=None):
    bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)

def send_file(chat_id, file_type, file_id, caption=None):
    if file_type == "photo":
        bot.send_photo(chat_id, file_id, caption=caption)
    elif file_type == "document":
        bot.send_document(chat_id, file_id, caption=caption)
    elif file_type == "video":
        bot.send_video(chat_id, file_id, caption=caption)

# ========== INLINE –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def upload_inline_keyboard():
    kb = InlineKeyboardMarkup(row_width=3)
    kb.add(
        InlineKeyboardButton("‚úÖ OK", callback_data="upload_ok"),
        InlineKeyboardButton("‚û°Ô∏è Next", callback_data="upload_next"),
        InlineKeyboardButton("‚ùå Cancel", callback_data="upload_cancel")
    )
    return kb

def main_inline_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("/info", callback_data="cmd_info"),
        InlineKeyboardButton("/photo", callback_data="cmd_photo"),
        InlineKeyboardButton("/download", callback_data="cmd_download"),
        InlineKeyboardButton("/result", callback_data="cmd_result"),
        InlineKeyboardButton("/help", callback_data="cmd_help")
    )
    return kb

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ\n"
        "/photo - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/download - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞\n"
        "/result - —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
    )
    send_message(message.chat.id, text, reply_markup=main_inline_keyboard(), thread_id=message.message_thread_id)

@bot.message_handler(commands=['photo'])
def start_upload(message):
    key = make_key(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)
    user_state[key] = {'command': 'await_object'}

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@bot.message_handler(content_types=['text'])
def handle_text(message):
    key = make_key(message)
    state = user_state.get(key)
    if not state:
        return

    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞
    if state['command'] == 'await_object':
        object_id = message.text.strip()
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.", thread_id=message.message_thread_id)
            return

        steps = [{'name': s, 'files': []} for s in UPLOAD_STEPS]
        user_state[key] = {
            'command': 'upload_steps',
            'object_id': object_id,
            'step_index': 0,
            'steps': steps,
            'chat_id': message.chat.id,
            'thread_id': message.message_thread_id
        }

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
        send_message(
            message.chat.id,
            f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {steps[0]['name']}",
            reply_markup=upload_inline_keyboard(),
            thread_id=message.message_thread_id
        )

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@bot.message_handler(content_types=['photo', 'document', 'video'])
def handle_files(message):
    key = make_key(message)
    state = user_state.get(key)
    if not state or state.get('command') != 'upload_steps':
        return

    step = state['steps'][state['step_index']]

    if message.photo:
        step['files'].append({'type': 'photo', 'file_id': message.photo[-1].file_id})
    elif message.document:
        step['files'].append({'type': 'document', 'file_id': message.document.file_id})
    elif message.video:
        step['files'].append({'type': 'video', 'file_id': message.video.file_id})

    send_message(message.chat.id, "‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", thread_id=state['thread_id'])

# ========== –û–ë–†–ê–ë–û–¢–ö–ê CALLBACK ==========
@bot.callback_query_handler(func=lambda call: call.data.startswith("upload_"))
def handle_upload_callback(call):
    key = (call.message.chat.id, call.message.message_thread_id, call.from_user.id)
    state = user_state.get(key)
    if not state or state.get('command') != 'upload_steps':
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏")
        return

    if call.data == "upload_ok":
        advance_step(key)
        bot.answer_callback_query(call.id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω ‚úÖ")
    elif call.data == "upload_next":
        advance_step(key, skip=True)
        bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω ‚û°Ô∏è")
    elif call.data == "upload_cancel":
        obj = state.get('object_id', '')
        user_state.pop(key, None)
        bot.edit_message_text(f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå")

# ========== –ü–†–û–ì–†–ï–°–° ==========
def advance_step(key, skip=False):
    state = user_state[key]
    state['step_index'] += 1

    if state['step_index'] >= len(state['steps']):
        object_id = state['object_id']
        all_steps = state['steps']
        save_to_archive(object_id, all_steps)

        report = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n"
        for i, s in enumerate(all_steps, 1):
            report += f"{i}. {s['name']}: {len(s['files'])} —Ñ–∞–π–ª–æ–≤\n"

        send_message(state['chat_id'], report, thread_id=state['thread_id'])
        user_state.pop(key)
    else:
        next_step = state['steps'][state['step_index']]
        send_message(
            state['chat_id'],
            f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {next_step['name']}",
            reply_markup=upload_inline_keyboard(),
            thread_id=state['thread_id']
        )

# ========== –ê–†–•–ò–í ==========
def save_to_archive(object_id, all_steps):
    total_files = sum(len(s['files']) for s in all_steps)
    info = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüìÅ {total_files} —Ñ–∞–π–ª–æ–≤\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    send_message(ARCHIVE_CHAT_ID, info)

    for step in all_steps:
        for f in step['files']:
            send_file(ARCHIVE_CHAT_ID, f['type'], f['file_id'])

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    update = telebot.types.Update.de_json(request.data.decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ========== –ó–ê–ü–£–°–ö ==========
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
