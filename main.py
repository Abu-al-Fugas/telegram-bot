import os
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import datetime

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
user_state = {}  # –∫–ª—é—á: (chat_id, user_id)
objects_data = {}  # —Ç—É—Ç –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã –∏–∑ Excel –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

# ========== HELPERS ==========
def make_key_from_message(message):
    return (message.chat.id, message.from_user.id)

def send_message(chat_id, text, reply_markup=None, thread_id=None):
    try:
        if thread_id:
            return bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)
        return bot.send_message(chat_id, text, reply_markup=reply_markup)
    except Exception as e:
        print(f"[send_message] –û—à–∏–±–∫–∞: {e}")

def send_file(chat_id, file_type, file_id, caption=None):
    try:
        if file_type=='photo':
            bot.send_photo(chat_id, file_id, caption=caption)
        elif file_type=='document':
            bot.send_document(chat_id, file_id, caption=caption)
        elif file_type=='video':
            bot.send_video(chat_id, file_id, caption=caption)
    except Exception as e:
        print(f"[send_file] –û—à–∏–±–∫–∞: {e}")

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def main_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton('/info'),
        KeyboardButton('/photo'),
        KeyboardButton('/download'),
        KeyboardButton('/result'),
        KeyboardButton('/help')
    )
    return kb

def upload_keyboard():
    kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    kb.add(
        KeyboardButton('/OK'),  # –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
        KeyboardButton('/next'),  # –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ–∫—É—â–∏–π —à–∞–≥
        KeyboardButton('/cancel')
    )
    return kb

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    text = (
        "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ\n"
        "/photo - –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n"
        "/download - —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞\n"
        "/result - —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤\n"
    )
    send_message(message.chat.id, text, reply_markup=main_keyboard(), thread_id=message.message_thread_id)

@bot.message_handler(commands=['photo'])
def start_upload(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=message.message_thread_id)
    user_state[key] = {'command': 'await_object'}

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_text(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state:
        return

    # –í–≤–æ–¥ –æ–±—ä–µ–∫—Ç–∞
    if state['command']=='await_object':
        object_id = message.text.strip()
        # –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã —Ä–∞–∑—Ä–µ—à–∞–µ–º
        if not object_id:
            send_message(message.chat.id, "‚ùå –û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", thread_id=message.message_thread_id)
            return
        steps = [{'name': s, 'files': []} for s in UPLOAD_STEPS]
        user_state[key] = {
            'command': 'upload_steps',
            'object_id': object_id,
            'step_index': 0,
            'steps': steps,
            'chat_id': message.chat.id,
            'thread_id': message.message_thread_id
        }
        send_message(message.chat.id, f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {steps[0]['name']}", reply_markup=upload_keyboard(), thread_id=message.message_thread_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
@bot.message_handler(content_types=['photo','document','video'])
def handle_files(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command')!='upload_steps':
        return
    step = state['steps'][state['step_index']]
    file_info = {}
    if message.photo:
        file_info = {'type':'photo','file_id':message.photo[-1].file_id}
    elif message.document:
        file_info = {'type':'document','file_id':message.document.file_id,'name':message.document.file_name}
    elif message.video:
        file_info = {'type':'video','file_id':message.video.file_id}
    step['files'].append(file_info)

# /OK - –∑–∞–≤–µ—Ä—à–∏—Ç—å —à–∞–≥
@bot.message_handler(commands=['OK'])
def handle_ok(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command')!='upload_steps':
        send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", reply_markup=main_keyboard(), thread_id=message.message_thread_id)
        return
    advance_step(key)

# /next - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥
@bot.message_handler(commands=['next'])
def handle_next(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state or state.get('command')!='upload_steps':
        send_message(message.chat.id, "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏", reply_markup=main_keyboard(), thread_id=message.message_thread_id)
        return
    advance_step(key, skip=True)

# /cancel
@bot.message_handler(commands=['cancel'])
def handle_cancel(message):
    key = make_key_from_message(message)
    state = user_state.pop(key, None)
    if state:
        obj = state.get('object_id','')
        send_message(message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=main_keyboard(), thread_id=message.message_thread_id)

# ========== –õ–û–ì–ò–ö–ê –ü–†–û–î–í–ò–ñ–ï–ù–ò–Ø –®–ê–ì–û–í ==========
def advance_step(key, skip=False):
    state = user_state[key]
    state['step_index'] += 1
    if state['step_index'] >= len(state['steps']):
        # –≤—Å–µ —à–∞–≥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
        object_id = state['object_id']
        all_steps = state['steps']
        save_to_archive(object_id, all_steps)
        report = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n"
        for i, s in enumerate(all_steps, 1):
            report += f"{i}. ‚úÖ {s['name']}: {len(s['files'])} —Ñ–∞–π–ª–æ–≤\n"
        send_message(state['chat_id'], report, reply_markup=main_keyboard(), thread_id=state['thread_id'])
        user_state.pop(key)
    else:
        next_step = state['steps'][state['step_index']]
        send_message(state['chat_id'], f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {next_step['name']}", reply_markup=upload_keyboard(), thread_id=state['thread_id'])

# ========== –ê–†–•–ò–í ==========
def save_to_archive(object_id, all_steps):
    try:
        info_text = f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüìÅ {sum(len(s['files']) for s in all_steps)} —Ñ–∞–π–ª–æ–≤\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        send_message(ARCHIVE_CHAT_ID, info_text)
        for step in all_steps:
            for f in step['files']:
                send_file(ARCHIVE_CHAT_ID, f['type'], f['file_id'])
        return True
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ========== RUN ==========
if __name__=="__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT",10000)))

