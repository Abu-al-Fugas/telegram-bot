import os
import time
from datetime import datetime
from flask import Flask, request
import telebot
from telebot.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    InputMediaPhoto, InputMediaVideo, InputMediaDocument, BotCommand
)

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# ========== –ì–õ–û–ë–ê–õ–´ ==========
# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–ª—é—á = (chat_id, thread_id, user_id)
user_state = {}

# –ê—Ä—Ö–∏–≤: object_id -> list of records {'type','file_id','step','archived_at','additional'}
archive_records = {}

# –ß–µ–∫-–ª–∏—Å—Ç —à–∞–≥–æ–≤
UPLOAD_STEPS = [
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",                              # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",                                   # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –°–¢–ú –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",                   # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ (–ì–†–£)",
    "–§–æ—Ç–æ –∫–æ—Ç–ª–æ–≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –≥–∞–∑–æ–≤–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
    "–§–æ—Ç–æ —Ç–æ—á–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 220–í",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π",                      # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π
    "–§–æ—Ç–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–≤–µ—Ä–µ–π —Å–Ω–∞—Ä—É–∂–∏",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏"
]

MANDATORY_STEPS = {
    "–û–±—â–µ–µ —Ñ–æ—Ç–æ –ø–æ–º–µ—â–µ–Ω–∏—è",
    "–§–æ—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–æ–π –°–¢–ú",
    "–§–æ—Ç–æ –º–µ—Å—Ç–∞ –ø—Ä–æ–∫–ª–∞–¥–∫–∏ –∫–∞–±–µ–ª–µ–π"
}

# ========== HELPERS ==========
def make_key_from_message(message):
    thread_id = getattr(message, "message_thread_id", None)
    return (message.chat.id, thread_id, message.from_user.id)

def make_key_from_callback(call):
    thread_id = getattr(call.message, "message_thread_id", None)
    return (call.message.chat.id, thread_id, call.from_user.id)

def find_session_in_chat(chat_id, thread_id):
    for k in user_state.keys():
        if k[0] == chat_id and k[1] == thread_id:
            return k
    return None

def send_message(chat_id, text, reply_markup=None, thread_id=None):
    try:
        if thread_id is not None:
            return bot.send_message(chat_id, text, reply_markup=reply_markup, message_thread_id=thread_id)
        return bot.send_message(chat_id, text, reply_markup=reply_markup)
    except TypeError:
        return bot.send_message(chat_id, text, reply_markup=reply_markup)

def delete_message_safe(chat_id, message_id):
    try:
        bot.delete_message(chat_id, message_id)
    except Exception:
        pass

def send_media_group_safe(chat_id, media, thread_id=None):
    for i in range(0, len(media), 10):
        chunk = media[i:i+10]
        try:
            if thread_id is not None:
                bot.send_media_group(chat_id, chunk, message_thread_id=thread_id)
            else:
                bot.send_media_group(chat_id, chunk)
            time.sleep(0.25)
        except Exception:
            try:
                bot.send_media_group(chat_id, chunk)
                time.sleep(0.25)
            except Exception:
                pass

def register_commands_global():
    commands = [
        BotCommand("start", "–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é"),
        BotCommand("photo", "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã (—á–µ–∫-–ª–∏—Å—Ç)"),
        BotCommand("download", "–°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞"),
        BotCommand("result", "–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤"),
        BotCommand("addphoto", "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –æ–±—ä–µ–∫—Ç—É")
    ]
    try:
        bot.set_my_commands(commands)
    except Exception:
        pass

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def upload_inline_keyboard(allow_next=True, include_header=True, addphoto_mode=False):
    # include_header –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Ç–µ–∫—Å—Ç–∞, –Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∞–º–∞ –æ–¥–∏–Ω–∞–∫–æ–≤–∞
    kb = InlineKeyboardMarkup(row_width=3)
    buttons = [InlineKeyboardButton("‚úÖ OK", callback_data="upload_ok")]
    if allow_next:
        buttons.append(InlineKeyboardButton("‚û°Ô∏è Next", callback_data="upload_next"))
    buttons.append(InlineKeyboardButton("‚ùå Cancel", callback_data="upload_cancel"))
    if addphoto_mode:
        # –¥–ª—è —Ä–µ–∂–∏–º–∞ addphoto —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Finish –∏ Cancel
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(InlineKeyboardButton("‚úÖ Finish", callback_data="add_finish"),
               InlineKeyboardButton("‚ùå Cancel", callback_data="add_cancel"))
        return kb
    kb.add(*buttons)
    return kb

def main_inline_keyboard():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("‚ÑπÔ∏è Info", callback_data="cmd_info"),
        InlineKeyboardButton("üì∏ Photo", callback_data="cmd_photo"),
        InlineKeyboardButton("‚¨áÔ∏è Download", callback_data="cmd_download"),
        InlineKeyboardButton("üìã Result", callback_data="cmd_result"),
        InlineKeyboardButton("‚ûï AddPhoto", callback_data="cmd_addphoto")
    )
    return kb

# ========== –ö–û–ú–ê–ù–î–´ ==========
@bot.message_handler(commands=['start'])
def cmd_start(message):
    text = "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ `/`."
    send_message(message.chat.id, text, reply_markup=main_inline_keyboard(), thread_id=getattr(message, 'message_thread_id', None))

@bot.message_handler(commands=['photo'])
def cmd_photo(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(message, 'message_thread_id', None))
    user_state[key] = {'command': 'await_object'}

@bot.message_handler(commands=['result'])
def cmd_result(message):
    if not archive_records:
        send_message(message.chat.id, "üìÅ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", thread_id=getattr(message, 'message_thread_id', None))
        return
    text = "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n\n"
    for obj_id, recs in archive_records.items():
        cnt = len(recs)
        ts = recs[0].get('archived_at') if recs else ''
        text += f"#{obj_id}: {cnt} —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ts}\n"
    send_message(message.chat.id, text, thread_id=getattr(message, 'message_thread_id', None))

@bot.message_handler(commands=['download'])
def cmd_download(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(message, 'message_thread_id', None))
    user_state[key] = {'command': 'await_download_object'}

@bot.message_handler(commands=['addphoto'])
def cmd_addphoto(message):
    key = make_key_from_message(message)
    send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã:", thread_id=getattr(message, 'message_thread_id', None))
    user_state[key] = {'command': 'await_addphoto_object'}

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ==========
@bot.message_handler(content_types=['text'])
def handle_text(message):
    key = make_key_from_message(message)
    state = user_state.get(key)
    if not state:
        return

    cmd = state.get('command')
    text = message.text.strip()

    if cmd == 'await_object':
        object_id = text
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.", thread_id=getattr(message, 'message_thread_id', None))
            return

        steps = [{'name': s, 'files': []} for s in UPLOAD_STEPS]
        user_state[key] = {
            'command': 'upload_steps',
            'object_id': object_id,
            'step_index': 0,
            'steps': steps,
            'chat_id': message.chat.id,
            'thread_id': getattr(message, 'message_thread_id', None),
            'seen_media_groups': set(),
            'control_message_id': None,
            'step_header_sent': True  # –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        }

        current_step = steps[0]
        allow_next = current_step['name'] not in MANDATORY_STEPS
        msg = send_message(message.chat.id, f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {current_step['name']}", reply_markup=upload_inline_keyboard(allow_next=allow_next), thread_id=getattr(message, 'message_thread_id', None))
        user_state[key]['control_message_id'] = getattr(msg, 'message_id', None)
        # step_header_sent True –æ–∑–Ω–∞—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–µ–µ (–ø–æ—Å–ª–µ —Ñ–∞–π–ª–æ–≤) –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–∂–µ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        return

    if cmd == 'await_download_object':
        object_id = text
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.", thread_id=getattr(message, 'message_thread_id', None))
            user_state.pop(key, None)
            return
        send_object_files_to_user(object_id, message.chat.id, thread_id=getattr(message, 'message_thread_id', None))
        user_state.pop(key, None)
        return

    if cmd == 'await_addphoto_object':
        object_id = text
        if not object_id:
            send_message(message.chat.id, "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞.", thread_id=getattr(message, 'message_thread_id', None))
            user_state.pop(key, None)
            return
        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å, –Ω–æ –ø–æ–º–µ—Ç–∏–º
        archive_records.setdefault(object_id, [])
        # –°–µ—Å—Å–∏—è addphoto: —Å–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª—ã –≤ add_files
        user_state[key] = {
            'command': 'addphoto_collect',
            'object_id': object_id,
            'add_files': [],   # list of {'type','file_id'}
            'chat_id': message.chat.id,
            'thread_id': getattr(message, 'message_thread_id', None),
            'control_message_id': None
        }
        # –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–¥—Å–∫–∞–∑–∫—É —Å –∫–ª–∞–≤–∏—à–∞–º–∏ Finish/Cancel
        msg = send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã (—Ñ–æ—Ç–æ/–º–µ–¥–∏–∞) ‚Äî –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ **Finish**.", reply_markup=upload_inline_keyboard(addphoto_mode=True), thread_id=getattr(message, 'message_thread_id', None))
        user_state[key]['control_message_id'] = getattr(msg, 'message_id', None)
        return

# ========== –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í ==========
@bot.message_handler(content_types=['photo', 'video', 'document'])
def handle_files(message):
    key = make_key_from_message(message)
    state = user_state.get(key)

    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç
    if state and state.get('command') == 'addphoto_collect':
        add_files = state['add_files']
        if message.photo:
            fid = message.photo[-1].file_id
            add_files.append({'type': 'photo', 'file_id': fid})
        elif message.video:
            add_files.append({'type': 'video', 'file_id': message.video.file_id})
        elif message.document:
            add_files.append({'type': 'document', 'file_id': message.document.file_id})

        state['add_files'] = add_files
        # –¥–ª—è addphoto ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É (Finish) —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ per media_group or single
        mgid = getattr(message, 'media_group_id', None)
        seen = state.get('seen_media_groups', set())
        should_show = False
        if mgid:
            if mgid not in seen:
                should_show = True
                seen.add(mgid)
                state['seen_media_groups'] = seen
        else:
            should_show = True

        if should_show:
            prev_mid = state.get('control_message_id')
            if prev_mid:
                delete_message_safe(state['chat_id'], prev_mid)
                state['control_message_id'] = None
            msg = send_message(state['chat_id'], "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n‚úÖ Finish   ‚ùå Cancel", reply_markup=upload_inline_keyboard(addphoto_mode=True), thread_id=state.get('thread_id'))
            state['control_message_id'] = getattr(msg, 'message_id', None)
        return

    # –ò–Ω–∞—á–µ ‚Äî –æ–±—ã—á–Ω—ã–π –ø–æ—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º
    if not state or state.get('command') != 'upload_steps':
        return

    step = state['steps'][state['step_index']]

    if message.photo:
        fid = message.photo[-1].file_id
        ftype = 'photo'
    elif message.video:
        fid = message.video.file_id
        ftype = 'video'
    elif message.document:
        fid = message.document.file_id
        ftype = 'document'
    else:
        return

    step['files'].append({'type': ftype, 'file_id': fid, 'step': step['name']})

    mgid = getattr(message, 'media_group_id', None)
    seen = state.get('seen_media_groups', set())
    should_show = False
    if mgid:
        if mgid not in seen:
            should_show = True
            seen.add(mgid)
            state['seen_media_groups'] = seen
    else:
        should_show = True

    if should_show:
        prev_mid = state.get('control_message_id')
        if prev_mid:
            delete_message_safe(state['chat_id'], prev_mid)
            state['control_message_id'] = None

        # –ï—Å–ª–∏ header –±—ã–ª –ø–æ–∫–∞–∑–∞–Ω —Ä–∞–Ω–µ–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —à–∞–≥–∞, —Ç–æ —Ç–µ–ø–µ—Ä—å –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à–∏ –ë–ï–ó –∑–∞–≥–æ–ª–æ–≤–∫–∞
        # (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç, —á—Ç–æ–±—ã –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –±–µ–∑ "üì∏ –®–∞–≥: ...")
        allow_next = step['name'] not in MANDATORY_STEPS
        msg_text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n‚úÖ OK"
        if allow_next:
            msg_text += "   ‚û°Ô∏è Next"
        msg_text += "   ‚ùå Cancel"
        msg = send_message(state['chat_id'], msg_text, reply_markup=upload_inline_keyboard(allow_next=allow_next), thread_id=state.get('thread_id'))
        state['control_message_id'] = getattr(msg, 'message_id', None)
        # –ø–æ–º–µ—Ç–∫–∞ —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω—ã (–≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–Ω–æ–≤–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞)
        state['step_header_sent'] = True

# ========== CALLBACK –û–ë–†–ê–ë–û–¢–ö–ê ==========
@bot.callback_query_handler(func=lambda c: c.data and c.data.startswith("cmd_"))
def handle_cmd_callback(call):
    data = call.data
    if data == "cmd_photo":
        send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(call.message, 'message_thread_id', None))
        key = (call.message.chat.id, getattr(call.message, 'message_thread_id', None), call.from_user.id)
        user_state[key] = {'command': 'await_object'}
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    if data == "cmd_info":
        bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–∑–∞–≥–ª—É—à–∫–∞)")
        send_message(call.message.chat.id, "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ: (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)", thread_id=getattr(call.message,'message_thread_id',None))
        return

    if data == "cmd_download":
        send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:", thread_id=getattr(call.message, 'message_thread_id', None))
        key = (call.message.chat.id, getattr(call.message, 'message_thread_id', None), call.from_user.id)
        user_state[key] = {'command': 'await_download_object'}
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    if data == "cmd_result":
        if not archive_records:
            bot.answer_callback_query(call.id, "–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
            send_message(call.message.chat.id, "üìÅ –ê—Ä—Ö–∏–≤ –ø—É—Å—Ç.", thread_id=getattr(call.message,'message_thread_id',None))
            return
        text = "üìÅ –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:\n\n"
        for obj_id, recs in archive_records.items():
            cnt = len(recs)
            ts = recs[0].get('archived_at') if recs else ''
            text += f"#{obj_id}: {cnt} —Ñ–∞–π–ª–æ–≤, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {ts}\n"
        bot.answer_callback_query(call.id, "–°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤")
        send_message(call.message.chat.id, text, thread_id=getattr(call.message,'message_thread_id',None))
        return

    if data == "cmd_addphoto":
        send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã:", thread_id=getattr(call.message, 'message_thread_id', None))
        key = (call.message.chat.id, getattr(call.message, 'message_thread_id', None), call.from_user.id)
        user_state[key] = {'command': 'await_addphoto_object'}
        bot.answer_callback_query(call.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞")
        return

    bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

@bot.callback_query_handler(func=lambda c: c.data and (c.data.startswith("upload_") or c.data.startswith("add_")))
def handle_upload_callback(call):
    # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é —Å–µ—Å—Å–∏—é –≤–ª–∞–¥–µ–ª—å—Ü–∞
    key = make_key_from_callback(call)
    state = user_state.get(key)

    if not state:
        owner_key = find_session_in_chat(call.message.chat.id, getattr(call.message, 'message_thread_id', None))
        if owner_key:
            bot.answer_callback_query(call.id, "–≠—Ç–æ –Ω–µ –≤–∞—à–∞ —Å–µ—Å—Å–∏—è.")
            return
        bot.answer_callback_query(call.id, "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
        return

    # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–∂–∏–º addphoto
    if state.get('command') == 'addphoto_collect' or state.get('command') == 'addphoto_collect' or call.data in ("add_finish", "add_cancel"):
        # handle addphoto callbacks
        if call.data == "add_cancel":
            obj = state.get('object_id', '')
            user_state.pop(key, None)
            send_message(call.message.chat.id, f"‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–±—ä–µ–∫—Ç—É #{obj} –æ—Ç–º–µ–Ω–µ–Ω–æ", thread_id=getattr(call.message, 'message_thread_id', None))
            bot.answer_callback_query(call.id, "–û—Ç–º–µ–Ω–µ–Ω–æ")
            return

        if call.data == "add_finish":
            # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ add_files –≤ –∞—Ä—Ö–∏–≤_records —Å –ø–æ–º–µ—Ç–∫–æ–π additional=True
            obj = state.get('object_id')
            add_files = state.get('add_files', [])
            if not add_files:
                bot.answer_callback_query(call.id, "–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.")
                return
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ archive_records –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ ARCHIVE_CHAT_ID –≤ –±–∞—Ç—á–∞—Ö
            flat = []
            for f in add_files:
                flat.append({'type': f['type'], 'file_id': f['file_id'], 'step': 'additional', 'archived_at': datetime.now().strftime('%d.%m.%Y %H:%M'), 'additional': True})
            archive_records.setdefault(obj, []).extend(flat)

            # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞—Ä—Ö–∏–≤-—á–∞—Ç –±–∞—Ç—á–∞–º–∏
            send_message(ARCHIVE_CHAT_ID, f"üíæ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–ê–ô–õ–´ –∫ –æ–±—ä–µ–∫—Ç—É #{obj}\nüìÅ {len(flat)} —Ñ–∞–π–ª–æ–≤\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}")
            media_batch = []
            for item in flat:
                if item['type'] == 'photo':
                    media_batch.append(InputMediaPhoto(item['file_id']))
                elif item['type'] == 'video':
                    media_batch.append(InputMediaVideo(item['file_id']))
                else:
                    if media_batch:
                        send_media_group_safe(ARCHIVE_CHAT_ID, media_batch)
                        media_batch = []
                    try:
                        bot.send_document(ARCHIVE_CHAT_ID, item['file_id'])
                        time.sleep(0.12)
                    except Exception:
                        pass
            if media_batch:
                send_media_group_safe(ARCHIVE_CHAT_ID, media_batch)

            send_message(call.message.chat.id, f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(flat)} —Ñ–∞–π–ª–æ–≤ –∫ –æ–±—ä–µ–∫—Ç—É #{obj}", thread_id=getattr(call.message, 'message_thread_id', None))
            user_state.pop(key, None)
            bot.answer_callback_query(call.id, "–ì–æ—Ç–æ–≤–æ")
            return

    # –û–±—ã—á–Ω—ã–µ upload_ callbacks (OK/Next/Cancel)
    action = call.data  # upload_ok / upload_next / upload_cancel
    # —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
    ctrl_mid = state.get('control_message_id')
    if ctrl_mid:
        delete_message_safe(state['chat_id'], ctrl_mid)
        state['control_message_id'] = None

    if action == "upload_cancel":
        obj = state.get('object_id', '')
        user_state.pop(key, None)
        send_message(call.message.chat.id, f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—ä–µ–∫—Ç–∞ {obj} –æ—Ç–º–µ–Ω–µ–Ω–∞", thread_id=getattr(call.message, 'message_thread_id', None))
        bot.answer_callback_query(call.id, "–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return

    if action == "upload_ok":
        advance_step(key)
        bot.answer_callback_query(call.id, "–®–∞–≥ –∑–∞–≤–µ—Ä—à—ë–Ω")
        return

    if action == "upload_next":
        step = state['steps'][state['step_index']]
        if step['name'] in MANDATORY_STEPS:
            bot.answer_callback_query(call.id, "–≠—Ç–æ—Ç —à–∞–≥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω")
            return
        advance_step(key, skip=True)
        bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω")
        return

    bot.answer_callback_query(call.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")

# ========== –ü–†–û–ì–†–ï–°–° –ò –ê–†–•–ò–í ==========
def advance_step(key, skip=False):
    state = user_state.get(key)
    if not state:
        return

    state['step_index'] += 1
    state['seen_media_groups'] = set()

    if state['step_index'] >= len(state['steps']):
        object_id = state.get('object_id', '')
        all_steps = state.get('steps', [])
        save_to_archive(object_id, all_steps)
        report = f"‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n"
        for i, s in enumerate(all_steps, 1):
            report += f"{i}. {s['name']}: {len(s['files'])} —Ñ–∞–π–ª–æ–≤\n"
        send_message(state['chat_id'], report, thread_id=state.get('thread_id'))
        user_state.pop(key, None)
        return

    next_step = state['steps'][state['step_index']]
    allow_next = next_step['name'] not in MANDATORY_STEPS

    prev_mid = state.get('control_message_id')
    if prev_mid:
        delete_message_safe(state['chat_id'], prev_mid)
        state['control_message_id'] = None

    # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –Ω–æ–≤—ã–π —à–∞–≥ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏–ª, —á—Ç–æ–±—ã –∏–º–µ–Ω–Ω–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫)
    msg = send_message(state['chat_id'], f"üì∏ –ó–∞–≥—Ä—É–∑–∏—Ç–µ {next_step['name']}", reply_markup=upload_inline_keyboard(allow_next=allow_next), thread_id=state.get('thread_id'))
    state['control_message_id'] = getattr(msg, 'message_id', None)
    state['step_header_sent'] = True

def save_to_archive(object_id, all_steps):
    try:
        flat = []
        for s in all_steps:
            for f in s['files']:
                rec = {'type': f['type'], 'file_id': f['file_id'], 'step': s['name'], 'archived_at': datetime.now().strftime('%d.%m.%Y %H:%M'), 'additional': False}
                flat.append(rec)

        archive_records.setdefault(object_id, [])
        archive_records[object_id].extend(flat)

        if not flat:
            return True

        send_message(ARCHIVE_CHAT_ID, f"üíæ –û–ë–™–ï–ö–¢ #{object_id}\nüìÅ {len(flat)} —Ñ–∞–π–ª–æ–≤\nüïí {datetime.now().strftime('%d.%m.%Y %H:%M')}")

        media_batch = []
        for item in flat:
            if item['type'] == 'photo':
                media_batch.append(InputMediaPhoto(item['file_id']))
            elif item['type'] == 'video':
                media_batch.append(InputMediaVideo(item['file_id']))
            else:
                if media_batch:
                    send_media_group_safe(ARCHIVE_CHAT_ID, media_batch)
                    media_batch = []
                try:
                    bot.send_document(ARCHIVE_CHAT_ID, item['file_id'])
                    time.sleep(0.12)
                except Exception:
                    pass

        if media_batch:
            send_media_group_safe(ARCHIVE_CHAT_ID, media_batch)
        return True
    except Exception as e:
        print("[save_to_archive] –û—à–∏–±–∫–∞:", e)
        return False

# ========== –û–¢–ü–†–ê–í–ö–ê –§–ê–ô–õ–û–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (DOWNLOAD) ==========
def send_object_files_to_user(object_id, dest_chat_id, thread_id=None):
    recs = archive_records.get(object_id)
    if not recs:
        send_message(dest_chat_id, f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞—Ä—Ö–∏–≤–µ.", thread_id=thread_id)
        return

    media_batch = []
    for item in recs:
        if item['type'] == 'photo':
            media_batch.append(InputMediaPhoto(item['file_id']))
        elif item['type'] == 'video':
            media_batch.append(InputMediaVideo(item['file_id']))
        else:
            if media_batch:
                send_media_group_safe(dest_chat_id, media_batch, thread_id=thread_id)
                media_batch = []
            try:
                if thread_id is not None:
                    bot.send_document(dest_chat_id, item['file_id'], message_thread_id=thread_id)
                else:
                    bot.send_document(dest_chat_id, item['file_id'])
                time.sleep(0.12)
            except Exception:
                pass

    if media_batch:
        send_media_group_safe(dest_chat_id, media_batch, thread_id=thread_id)

    send_message(dest_chat_id, f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ #{object_id}", thread_id=thread_id)

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    update = telebot.types.Update.de_json(request.data.decode('utf-8'))
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç", 200

# ========== RUN ==========
if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        register_commands_global()
    except Exception:
        pass
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    try:
        bot.set_webhook(url=WEBHOOK_URL)
    except Exception:
        pass
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
