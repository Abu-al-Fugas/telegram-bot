import os
import json
import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton
from flask import Flask, request
from datetime import datetime
import gspread
from google.oauth2.service_account import Credentials
import openpyxl

# ========== –ù–ê–°–¢–†–û–ô–ö–ò ==========
TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
ARCHIVE_CHAT_ID = os.environ.get("ARCHIVE_CHAT_ID", "-1003160855229")
GOOGLE_SHEETS_KEY = os.environ.get("GOOGLE_SHEETS_KEY")

bot = telebot.TeleBot(TOKEN)
app = Flask(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# –∫–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è: (chat_id, user_id)
user_state = {}
objects_data = {}
object_files = {}

# ========== HELPERS ==========
def make_key_from_message(message):
    """–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á —Å–æ—Å—Ç–æ—è–Ω–∏—è: (chat_id, user_id)"""
    # chat.id –æ–¥–∏–Ω–∞–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤ —Ç–µ–º–µ, from_user.id —É–Ω–∏–∫–∞–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    return (message.chat.id, message.from_user.id)

def send_message_with_topic(chat_id, text, message_thread_id=None, reply_markup=None, parse_mode=None):
    try:
        if message_thread_id:
            return bot.send_message(chat_id=chat_id, text=text, message_thread_id=message_thread_id,
                                    reply_markup=reply_markup, parse_mode=parse_mode)
        return bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup, parse_mode=parse_mode)
    except Exception as e:
        print(f"[send_message_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_photo_with_topic(chat_id, photo, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_photo(chat_id=chat_id, photo=photo, message_thread_id=message_thread_id, caption=caption)
        return bot.send_photo(chat_id=chat_id, photo=photo, caption=caption)
    except Exception as e:
        print(f"[send_photo_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_document_with_topic(chat_id, document, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_document(chat_id=chat_id, document=document, message_thread_id=message_thread_id, caption=caption)
        return bot.send_document(chat_id=chat_id, document=document, caption=caption)
    except Exception as e:
        print(f"[send_document_with_topic] –û—à–∏–±–∫–∞: {e}")

def send_video_with_topic(chat_id, video, message_thread_id=None, caption=None):
    try:
        if message_thread_id:
            return bot.send_video(chat_id=chat_id, video=video, message_thread_id=message_thread_id, caption=caption)
        return bot.send_video(chat_id=chat_id, video=video, caption=caption)
    except Exception as e:
        print(f"[send_video_with_topic] –û—à–∏–±–∫–∞: {e}")

# ========== –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• –ò–ó EXCEL ==========
def load_objects_from_excel():
    global objects_data
    try:
        workbook = openpyxl.load_workbook('objects.xlsx')
        sheet = workbook.active
        data = {}
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] is not None:
                key = str(row[0]).strip()
                data[key] = {
                    'name': row[1] or '',
                    'address': row[2] or '',
                    'status': '–ù–µ –Ω–∞—á–∞—Ç'
                }
        return data
    except Exception as e:
        print(f"[load_objects_from_excel] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return {}

# ========== GOOGLE SHEETS ==========
def init_google_sheets():
    try:
        if not GOOGLE_SHEETS_KEY:
            return None
        creds_dict = json.loads(GOOGLE_SHEETS_KEY)
        creds = Credentials.from_service_account_info(creds_dict)
        client = gspread.authorize(creds)
        return client
    except Exception as e:
        print(f"[init_google_sheets] –û—à–∏–±–∫–∞: {e}")
        return None

def update_google_sheets(object_id, status="‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω"):
    try:
        client = init_google_sheets()
        if not client:
            return False
        sheet = client.open("–û–±—ä–µ–∫—Ç—ã –ò–ü–£–ì").sheet1
        all_data = sheet.get_all_values()
        for i, row in enumerate(all_data, start=1):
            if i == 1:
                continue
            if row and str(row[0]).strip() == str(object_id):
                sheet.update_cell(i, 4, status)
                return True
        return False
    except Exception as e:
        print(f"[update_google_sheets] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== –ê–†–•–ò–í –í TELEGRAM ==========
def save_to_archive(object_id, files, file_types):
    try:
        type_description = []
        if file_types.get('photos', 0) > 0:
            type_description.append(f"üì∏ {file_types['photos']} —Ñ–æ—Ç–æ")
        if file_types.get('documents', 0) > 0:
            type_description.append(f"üìÑ {file_types['documents']} –¥–æ–∫.")
        if file_types.get('videos', 0) > 0:
            type_description.append(f"üé• {file_types['videos']} –≤–∏–¥–µ–æ")

        files_desc = " + ".join(type_description) if type_description else "—Ñ–∞–π–ª—ã"

        info_text = f"""
üíæ –û–ë–™–ï–ö–¢ #{object_id}
üìÅ {len(files)} {files_desc}
üïí {datetime.now().strftime('%d.%m.%Y %H:%M')}
        """
        bot.send_message(ARCHIVE_CHAT_ID, info_text.strip())

        for file_info in files:
            try:
                if file_info['type'] == 'photo':
                    bot.send_photo(ARCHIVE_CHAT_ID, file_info['file_id'])
                elif file_info['type'] == 'document':
                    bot.send_document(ARCHIVE_CHAT_ID, file_info['file_id'])
                elif file_info['type'] == 'video':
                    bot.send_video(ARCHIVE_CHAT_ID, file_info['file_id'])
            except Exception as e:
                print(f"[save_to_archive] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ –∞—Ä—Ö–∏–≤: {e}")

        return True
    except Exception as e:
        print(f"[save_to_archive] –û—à–∏–±–∫–∞: {e}")
        return False

# ========== –ö–õ–ê–í–ò–ê–¢–£–†–´ ==========
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/info'),
        KeyboardButton('/upload'),
        KeyboardButton('/download'),
        KeyboardButton('/processed'),
        KeyboardButton('/help')
    )
    return keyboard

def create_upload_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        KeyboardButton('/done'),
        KeyboardButton('/cancel'),
        KeyboardButton('/help')
    )
    return keyboard

def create_processed_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    processed_objects = sorted(object_files.keys())
    buttons = [KeyboardButton(f"üìÅ #{obj}") for obj in processed_objects]
    for i in range(0, len(buttons), 3):
        keyboard.add(*buttons[i:i+3])
    keyboard.add(KeyboardButton('/help'))
    return keyboard

# ========== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==========
@bot.message_handler(commands=['start', 'help'])
def start_message(message):
    help_text = """
ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:

/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—ä–µ–∫—Ç–µ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
/upload - –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞  
/download - –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞
/processed - –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞!
    """
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=help_text.strip(),
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['info'])
def ask_info_object(message):
    key = make_key_from_message(message)
    user_state[key] = {
        'command': 'info',
        'chat_id': message.chat.id,
        'message_thread_id': message.message_thread_id
    }
    print(f"[STATE CREATE] {key} -> info")
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="üîç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['upload'])
def ask_upload_object(message):
    key = make_key_from_message(message)
    user_state[key] = {
        'command': 'upload',
        'chat_id': message.chat.id,
        'message_thread_id': message.message_thread_id
    }
    print(f"[STATE CREATE] {key} -> upload")
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text="üì§ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['download'])
def handle_download(message):
    key = make_key_from_message(message)
    parts = message.text.split()
    if len(parts) == 1:
        user_state[key] = {
            'command': 'download',
            'chat_id': message.chat.id,
            'message_thread_id': message.message_thread_id
        }
        print(f"[STATE CREATE] {key} -> download")
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:",
            reply_markup=create_main_keyboard()
        )
        return
    # /download <id>
    object_id = parts[1]
    download_object_files(message, object_id)

@bot.message_handler(commands=['done'])
def handle_done(message):
    key = make_key_from_message(message)
    if key not in user_state or user_state[key].get('command') != 'upload_files':
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤",
            reply_markup=create_main_keyboard()
        )
        return

    state = user_state[key]
    object_id = state['object_id']
    files = state['files']
    file_types = state['file_types']
    if not files:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞",
            reply_markup=create_main_keyboard()
        )
        user_state.pop(key, None)
        print(f"[STATE REMOVE] {key} (no files)")
        return

    object_files[object_id] = files
    save_to_archive(object_id, files, file_types)
    update_google_sheets(object_id)
    user_state.pop(key, None)
    print(f"[STATE REMOVE] {key} -> done (saved {len(files)} files)")

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"‚úÖ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n–í—Å–µ–≥–æ: {len(files)} —Ñ–∞–π–ª–æ–≤",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['cancel'])
def cancel_upload(message):
    key = make_key_from_message(message)
    if key in user_state and user_state[key].get('command') == 'upload_files':
        object_id = user_state[key]['object_id']
        user_state.pop(key, None)
        print(f"[STATE REMOVE] {key} -> cancel")
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=f"‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id} –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=create_main_keyboard()
        )

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text_messages(message):
    # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    if message.text.startswith('/'):
        return

    key = make_key_from_message(message)
    if key not in user_state:
        return

    state = user_state[key]
    command = state.get('command')

    if command == 'info':
        process_info_object(message, state, key)
    elif command == 'upload':
        process_upload_object(message, state, key)
    elif command == 'download':
        process_download_object(message, state, key)

def process_info_object(message, state, key):
    object_ids = [obj_id.strip() for obj_id in message.text.split(',')]
    responses = []
    for object_id in object_ids:
        obj_info = objects_data.get(object_id)
        if obj_info:
            is_processed = object_id in object_files
            status_icon = "‚úÖ" if is_processed else "‚è≥"
            responses.append(f"{status_icon} –û–ë–™–ï–ö–¢ #{object_id}\nüè¢ {obj_info['name']}\nüìç {obj_info['address']}\nüìä –°—Ç–∞—Ç—É—Å: {obj_info['status']}\n---")
        else:
            responses.append(f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω\n---")

    final_response = "\n".join(responses)
    send_message_with_topic(
        chat_id=state['chat_id'],
        message_thread_id=state.get('message_thread_id'),
        text=final_response,
        reply_markup=create_main_keyboard()
    )

    user_state.pop(key, None)
    print(f"[STATE REMOVE] {key} -> info done")

def process_upload_object(message, state, key):
    object_id = message.text.strip()
    obj_info = objects_data.get(object_id)
    if not obj_info:
        send_message_with_topic(
            chat_id=state['chat_id'],
            message_thread_id=state.get('message_thread_id'),
            text=f"‚ùå –û–±—ä–µ–∫—Ç #{object_id} –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=create_main_keyboard()
        )
        user_state.pop(key, None)
        print(f"[STATE REMOVE] {key} -> upload (not found)")
        return

    # –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_state[key] = {
        'command': 'upload_files',
        'object_id': object_id,
        'chat_id': state['chat_id'],
        'message_thread_id': state.get('message_thread_id'),
        'files': [],
        'file_types': {'photos': 0, 'documents': 0, 'videos': 0}
    }
    print(f"[STATE UPDATE] {key} -> upload_files for object {object_id}")

    send_message_with_topic(
        chat_id=state['chat_id'],
        message_thread_id=state.get('message_thread_id'),
        text=f"üìé –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id}\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ/–¥–æ–∫—É–º–µ–Ω—Ç—ã/–≤–∏–¥–µ–æ. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî /done. –î–ª—è –æ—Ç–º–µ–Ω—ã ‚Äî /cancel.",
        reply_markup=create_upload_keyboard()
    )

def process_download_object(message, state, key):
    object_id = message.text.strip()
    # —É–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–æ) –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    user_state.pop(key, None)
    print(f"[STATE REMOVE] {key} -> download request for {object_id}")
    download_object_files(message, object_id)

@bot.message_handler(content_types=['photo', 'document', 'video'])
def handle_files(message):
    key = make_key_from_message(message)
    if key not in user_state or user_state[key].get('command') != 'upload_files':
        return

    state = user_state[key]
    file_info = {}
    if message.photo:
        file_info = {'type': 'photo', 'file_id': message.photo[-1].file_id}
        state['file_types']['photos'] += 1
    elif message.document:
        file_info = {'type': 'document', 'file_id': message.document.file_id, 'name': message.document.file_name}
        state['file_types']['documents'] += 1
    elif message.video:
        file_info = {'type': 'video', 'file_id': message.video.file_id}
        state['file_types']['videos'] += 1

    state['files'].append(file_info)
    state['last_file_count'] = len(state['files'])
    print(f"[FILE RECEIVED] {key} -> {file_info['type']} (total {state['last_file_count']})")

def download_object_files(message, object_id):
    if object_id not in object_files:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text=f"‚ùå –î–ª—è –æ–±—ä–µ–∫—Ç–∞ #{object_id} –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤",
            reply_markup=create_main_keyboard()
        )
        return

    files = object_files[object_id]
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"üìÅ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –æ–±—ä–µ–∫—Ç–∞ #{object_id}...",
        reply_markup=create_main_keyboard()
    )

    sent_count = 0
    for file_info in files:
        try:
            if file_info['type'] == 'photo':
                send_photo_with_topic(message.chat.id, file_info['file_id'], message.message_thread_id)
            elif file_info['type'] == 'document':
                send_document_with_topic(message.chat.id, file_info['file_id'], message.message_thread_id)
            elif file_info['type'] == 'video':
                send_video_with_topic(message.chat.id, file_info['file_id'], message.message_thread_id)
            sent_count += 1
        except Exception as e:
            print(f"[download_object_files] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {e}")

    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ñ–∞–π–ª–æ–≤ –∏–∑ {len(files)}",
        reply_markup=create_main_keyboard()
    )

@bot.message_handler(commands=['processed'])
def show_processed_objects(message):
    if not object_files:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="üì≠ –ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤",
            reply_markup=create_main_keyboard()
        )
        return

    keyboard = create_processed_keyboard()
    response = f"üìä –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –û–ë–™–ï–ö–¢–´:\n\n–í—Å–µ–≥–æ: {len(object_files)} –æ–±—ä–µ–∫—Ç–æ–≤\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤:"
    send_message_with_topic(
        chat_id=message.chat.id,
        message_thread_id=message.message_thread_id,
        text=response,
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda message: message.text and message.text.startswith('üìÅ #'))
def handle_download_button(message):
    try:
        object_id = message.text.replace('üìÅ #', '').strip()
        download_object_files(message, object_id)
    except Exception as e:
        send_message_with_topic(
            chat_id=message.chat.id,
            message_thread_id=message.message_thread_id,
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±—ä–µ–∫—Ç–∞",
            reply_markup=create_main_keyboard()
        )

# ========== WEBHOOK ==========
@app.route('/' + TOKEN, methods=['POST'])
def receive_update():
    json_str = request.get_data().decode('utf-8')
    update = telebot.types.Update.de_json(json_str)
    bot.process_new_updates([update])
    return "OK", 200

@app.route('/')
def index():
    return "ü§ñ –ë–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏ –ò–ü–£–ì —Ä–∞–±–æ—Ç–∞–µ—Ç! ‚úÖ", 200

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    objects_data = load_objects_from_excel()
    print(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: {len(objects_data)}")
    if init_google_sheets():
        print("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω")
    bot.remove_webhook()
    WEBHOOK_URL = f"https://telegram-bot-b6pn.onrender.com/{TOKEN}"
    bot.set_webhook(url=WEBHOOK_URL)
    print(f"üåê Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))
